name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci  # Use npm ci for reproducible installs
      
    - name: TypeScript compilation check
      run: npm run type-check
      
    - name: Code linting
      run: npm run lint:ci
      
    - name: Run tests
      env:
        NODE_ENV: test
        CI: true
      run: npm test
      
    - name: Build verification
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      run: npm run build
      
    - name: Security audit (warnings only)
      run: npm audit --audit-level high || echo "‚ö†Ô∏è Security vulnerabilities found - review recommended"
      continue-on-error: true

  # Optional: Advanced quality checks for stricter enforcement
  advanced-quality:
    runs-on: ubuntu-latest
    needs: quality-gates  # Only run if basic quality gates pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for unused dependencies
      run: |
        npx depcheck --ignores="@types/*,eslint-*,prettier,jest,typescript" || \
        echo "::warning::Unused dependencies detected"
      continue-on-error: true
      
    - name: Bundle size check (if applicable)
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      run: |
        npm run build
        # Add bundle size verification here if you have size limits
      continue-on-error: true

  summary:
    runs-on: ubuntu-latest
    needs: [quality-gates, advanced-quality]
    if: always()
    
    steps:
    - name: Quality Gates Summary
      run: |
        echo "üéØ CI/CD Pipeline Results:"
        echo ""
        
        if [ "${{ needs.quality-gates.result }}" == "success" ]; then
          echo "‚úÖ Quality Gates: PASSED"
          echo "   ‚úÖ TypeScript compilation"
          echo "   ‚úÖ Code linting"
          echo "   ‚úÖ Test suite"
          echo "   ‚úÖ Build verification"
        else
          echo "‚ùå Quality Gates: FAILED"
          echo "   Pipeline blocked - fix issues before merging"
          exit 1
        fi
        
        if [ "${{ needs.advanced-quality.result }}" == "success" ]; then
          echo "‚úÖ Advanced Quality: PASSED"
        else
          echo "‚ö†Ô∏è Advanced Quality: Some warnings detected"
        fi
        
        echo ""
        echo "üöÄ Ready for deployment: ${{ needs.quality-gates.result == 'success' && 'YES' || 'NO' }}" 