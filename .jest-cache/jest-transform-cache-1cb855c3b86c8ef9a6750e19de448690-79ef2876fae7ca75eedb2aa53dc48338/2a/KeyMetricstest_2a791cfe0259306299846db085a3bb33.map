{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\dashboard\\KeyMetrics.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { KeyMetrics } from '@/components/dashboard/KeyMetrics';\r\nimport { Activity } from '@/lib/strava/types';\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/useGoals', () => ({\r\n  useUserGoals: jest.fn(),\r\n  useUpdateGoal: jest.fn(() => ({ mutate: jest.fn(), isLoading: false, error: null })),\r\n  useCreateGoal: jest.fn(() => ({ mutate: jest.fn(), isLoading: false, error: null })),\r\n  useDeleteGoal: jest.fn(() => ({ mutate: jest.fn(), isLoading: false, error: null })),\r\n  useGoalTypes: jest.fn(() => ({ data: [], isLoading: false, error: null })),\r\n}));\r\n\r\njest.mock('@/hooks/use-user-activities', () => ({\r\n  useUserActivities: jest.fn()\r\n}));\r\n\r\njest.mock('@/hooks/useUnitPreferences', () => ({\r\n  useUnitPreferences: jest.fn()\r\n}));\r\n\r\nimport { useUserGoals } from '@/hooks/useGoals';\r\nimport { useUserActivities } from '@/hooks/use-user-activities';\r\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences';\r\n\r\nconst mockUseUserGoals = useUserGoals as jest.MockedFunction<typeof useUserGoals>;\r\nconst mockUseUserActivities = useUserActivities as jest.MockedFunction<typeof useUserActivities>;\r\nconst mockUseUnitPreferences = useUnitPreferences as jest.MockedFunction<typeof useUnitPreferences>;\r\n\r\nconst createMockActivity = (overrides: Partial<Activity> = {}): Activity => ({\r\n  id: '1',\r\n  user_id: 'user-1',\r\n  strava_activity_id: 123456,\r\n  name: 'Morning Run',\r\n  sport_type: 'Run',\r\n  start_date: new Date().toISOString(),\r\n  start_date_local: new Date().toISOString(),\r\n  timezone: 'America/New_York',\r\n  distance: 5000, // 5km\r\n  moving_time: 1800, // 30 minutes\r\n  elapsed_time: 1900,\r\n  total_elevation_gain: 100,\r\n  ...overrides,\r\n});\r\n\r\nconst createWrapper = () => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: { retry: false },\r\n      mutations: { retry: false },\r\n    },\r\n  });\r\n  return ({ children }: { children: React.ReactNode }) => (\r\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\r\n  );\r\n};\r\n\r\ndescribe('KeyMetrics', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Default mock for unit preferences\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn(),\r\n      isLoading: false\r\n    });\r\n  });\r\n\r\n  it('renders loading skeleton when data is loading', () => {\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: true,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: true,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n\r\n    const { container } = render(<KeyMetrics userId=\"test-user\" />, { wrapper: createWrapper() });\r\n    \r\n    // Should show skeleton loading cards - look for the specific skeleton structure\r\n    const skeletonCards = container.querySelectorAll('.animate-pulse');\r\n    expect(skeletonCards).toHaveLength(3); // 3 skeleton cards\r\n  });\r\n\r\n  it('renders setup message when no dashboard goals are configured', () => {\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: { goals: [], onboarding: null },\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n\r\n    render(<KeyMetrics userId=\"test-user\" />, { wrapper: createWrapper() });\r\n    \r\n    expect(screen.getByText('Set Up Your Dashboard Goals')).toBeInTheDocument();\r\n    expect(screen.getByText('Choose Dashboard Goals')).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders goal metrics for dashboard goals', () => {\r\n    const mockGoals = [\r\n      {\r\n        id: '1',\r\n        user_id: 'test-user',\r\n        goal_type_id: 'weekly-distance',\r\n        target_value: 20,\r\n        target_unit: 'km',\r\n        time_period: 'weekly',\r\n        current_progress: 15,\r\n        is_active: true,\r\n        is_completed: false,\r\n        priority: 1,\r\n        goal_data: {\r\n          show_on_dashboard: true,\r\n          dashboard_priority: 1\r\n        },\r\n        goal_type: {\r\n          id: 'weekly-distance',\r\n          display_name: 'Weekly Distance',\r\n          category: 'distance',\r\n          name: 'weekly_distance_goal'\r\n        }\r\n      },\r\n      {\r\n        id: '2',\r\n        user_id: 'test-user',\r\n        goal_type_id: 'frequency',\r\n        target_value: 3,\r\n        target_unit: 'runs',\r\n        time_period: 'weekly',\r\n        current_progress: 2,\r\n        is_active: true,\r\n        is_completed: false,\r\n        priority: 2,\r\n        goal_data: {\r\n          show_on_dashboard: true,\r\n          dashboard_priority: 2\r\n        },\r\n        goal_type: {\r\n          id: 'frequency',\r\n          display_name: 'Weekly Runs',\r\n          category: 'frequency',\r\n          name: 'weekly_frequency_goal'\r\n        }\r\n      }\r\n    ];\r\n\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: { goals: mockGoals, onboarding: null },\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n\r\n    render(<KeyMetrics userId=\"test-user\" />, { wrapper: createWrapper() });\r\n    \r\n    // Should show goal metric cards\r\n    expect(screen.getByText('Weekly Distance')).toBeInTheDocument();\r\n    expect(screen.getByText('Weekly Runs')).toBeInTheDocument();\r\n    expect(screen.getByText('15.0 km')).toBeInTheDocument(); // current progress\r\n    expect(screen.getByText('2 runs')).toBeInTheDocument(); // current progress\r\n    expect(screen.getByText('75.0%')).toBeInTheDocument(); // 15/20 * 100\r\n    expect(screen.getByText('66.7%')).toBeInTheDocument(); // 2/3 * 100\r\n  });\r\n\r\n  it('sorts dashboard goals by priority', () => {\r\n    const mockGoals = [\r\n      {\r\n        id: '1',\r\n        user_id: 'test-user',\r\n        goal_type_id: 'goal-1',\r\n        target_value: 20,\r\n        is_active: true,\r\n        is_completed: false,\r\n        current_progress: 10,\r\n        goal_data: {\r\n          show_on_dashboard: true,\r\n          dashboard_priority: 3\r\n        },\r\n        goal_type: {\r\n          id: 'goal-1',\r\n          display_name: 'Third Priority',\r\n          category: 'distance'\r\n        }\r\n      },\r\n      {\r\n        id: '2',\r\n        user_id: 'test-user',\r\n        goal_type_id: 'goal-2',\r\n        target_value: 30,\r\n        is_active: true,\r\n        is_completed: false,\r\n        current_progress: 15,\r\n        goal_data: {\r\n          show_on_dashboard: true,\r\n          dashboard_priority: 1\r\n        },\r\n        goal_type: {\r\n          id: 'goal-2',\r\n          display_name: 'First Priority',\r\n          category: 'distance'\r\n        }\r\n      }\r\n    ];\r\n\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: { goals: mockGoals, onboarding: null },\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn()\r\n    } as any);\r\n\r\n    render(<KeyMetrics userId=\"test-user\" />, { wrapper: createWrapper() });\r\n    \r\n    const priorityBadges = screen.getAllByText(/#\\d/);\r\n    expect(priorityBadges[0]).toHaveTextContent('#1'); // First Priority should be first\r\n    expect(priorityBadges[1]).toHaveTextContent('#2'); // Third Priority should be second\r\n  });\r\n}); "],"names":["jest","mock","useUserGoals","fn","useUpdateGoal","mutate","isLoading","error","useCreateGoal","useDeleteGoal","useGoalTypes","data","useUserActivities","useUnitPreferences","mockUseUserGoals","mockUseUserActivities","mockUseUnitPreferences","createMockActivity","overrides","id","user_id","strava_activity_id","name","sport_type","start_date","Date","toISOString","start_date_local","timezone","distance","moving_time","elapsed_time","total_elevation_gain","createWrapper","queryClient","QueryClient","defaultOptions","queries","retry","mutations","children","QueryClientProvider","client","describe","beforeEach","clearAllMocks","mockReturnValue","preferences","pace","updatePreferences","setDistanceUnit","toggleUnits","it","undefined","refetch","container","render","KeyMetrics","userId","wrapper","skeletonCards","querySelectorAll","expect","toHaveLength","goals","onboarding","screen","getByText","toBeInTheDocument","mockGoals","goal_type_id","target_value","target_unit","time_period","current_progress","is_active","is_completed","priority","goal_data","show_on_dashboard","dashboard_priority","goal_type","display_name","category","priorityBadges","getAllByText","toHaveTextContent"],"mappings":"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"}