c52f7b57c7dfdade41f9ffaea18f5e3f
"use strict";
// Mock the hooks
jest.mock('@/hooks/useGoals', ()=>({
        useUserGoals: jest.fn(),
        useUpdateGoal: jest.fn(()=>({
                mutate: jest.fn(),
                isLoading: false,
                error: null
            })),
        useCreateGoal: jest.fn(()=>({
                mutate: jest.fn(),
                isLoading: false,
                error: null
            })),
        useDeleteGoal: jest.fn(()=>({
                mutate: jest.fn(),
                isLoading: false,
                error: null
            })),
        useGoalTypes: jest.fn(()=>({
                data: [],
                isLoading: false,
                error: null
            }))
    }));
jest.mock('@/hooks/use-user-activities', ()=>({
        useUserActivities: jest.fn()
    }));
jest.mock('@/hooks/useUnitPreferences', ()=>({
        useUnitPreferences: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _KeyMetrics = require("../../../components/dashboard/KeyMetrics");
const _useGoals = require("../../../hooks/useGoals");
const _useuseractivities = require("../../../hooks/use-user-activities");
const _useUnitPreferences = require("../../../hooks/useUnitPreferences");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseUserGoals = _useGoals.useUserGoals;
const mockUseUserActivities = _useuseractivities.useUserActivities;
const mockUseUnitPreferences = _useUnitPreferences.useUnitPreferences;
const createMockActivity = (overrides = {})=>({
        id: '1',
        user_id: 'user-1',
        strava_activity_id: 123456,
        name: 'Morning Run',
        sport_type: 'Run',
        start_date: new Date().toISOString(),
        start_date_local: new Date().toISOString(),
        timezone: 'America/New_York',
        distance: 5000,
        moving_time: 1800,
        elapsed_time: 1900,
        total_elevation_gain: 100,
        ...overrides
    });
const createWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
};
describe('KeyMetrics', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Default mock for unit preferences
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn(),
            isLoading: false
        });
    });
    it('renders loading skeleton when data is loading', ()=>{
        mockUseUserGoals.mockReturnValue({
            data: undefined,
            isLoading: true,
            error: null,
            refetch: jest.fn()
        });
        mockUseUserActivities.mockReturnValue({
            data: undefined,
            isLoading: true,
            error: null,
            refetch: jest.fn()
        });
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KeyMetrics.KeyMetrics, {
            userId: "test-user"
        }), {
            wrapper: createWrapper()
        });
        // Should show skeleton loading cards - look for the specific skeleton structure
        const skeletonCards = container.querySelectorAll('.animate-pulse');
        expect(skeletonCards).toHaveLength(3); // 3 skeleton cards
    });
    it('renders setup message when no dashboard goals are configured', ()=>{
        mockUseUserGoals.mockReturnValue({
            data: {
                goals: [],
                onboarding: null
            },
            isLoading: false,
            error: null,
            refetch: jest.fn()
        });
        mockUseUserActivities.mockReturnValue({
            data: [],
            isLoading: false,
            error: null,
            refetch: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KeyMetrics.KeyMetrics, {
            userId: "test-user"
        }), {
            wrapper: createWrapper()
        });
        expect(_react1.screen.getByText('Set Up Your Dashboard Goals')).toBeInTheDocument();
        expect(_react1.screen.getByText('Choose Dashboard Goals')).toBeInTheDocument();
    });
    it('renders goal metrics for dashboard goals', ()=>{
        const mockGoals = [
            {
                id: '1',
                user_id: 'test-user',
                goal_type_id: 'weekly-distance',
                target_value: 20,
                target_unit: 'km',
                time_period: 'weekly',
                current_progress: 15,
                is_active: true,
                is_completed: false,
                priority: 1,
                goal_data: {
                    show_on_dashboard: true,
                    dashboard_priority: 1
                },
                goal_type: {
                    id: 'weekly-distance',
                    display_name: 'Weekly Distance',
                    category: 'distance',
                    name: 'weekly_distance_goal'
                }
            },
            {
                id: '2',
                user_id: 'test-user',
                goal_type_id: 'frequency',
                target_value: 3,
                target_unit: 'runs',
                time_period: 'weekly',
                current_progress: 2,
                is_active: true,
                is_completed: false,
                priority: 2,
                goal_data: {
                    show_on_dashboard: true,
                    dashboard_priority: 2
                },
                goal_type: {
                    id: 'frequency',
                    display_name: 'Weekly Runs',
                    category: 'frequency',
                    name: 'weekly_frequency_goal'
                }
            }
        ];
        mockUseUserGoals.mockReturnValue({
            data: {
                goals: mockGoals,
                onboarding: null
            },
            isLoading: false,
            error: null,
            refetch: jest.fn()
        });
        mockUseUserActivities.mockReturnValue({
            data: [],
            isLoading: false,
            error: null,
            refetch: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KeyMetrics.KeyMetrics, {
            userId: "test-user"
        }), {
            wrapper: createWrapper()
        });
        // Should show goal metric cards
        expect(_react1.screen.getByText('Weekly Distance')).toBeInTheDocument();
        expect(_react1.screen.getByText('Weekly Runs')).toBeInTheDocument();
        expect(_react1.screen.getByText('15.0 km')).toBeInTheDocument(); // current progress
        expect(_react1.screen.getByText('2 runs')).toBeInTheDocument(); // current progress
        expect(_react1.screen.getByText('75.0%')).toBeInTheDocument(); // 15/20 * 100
        expect(_react1.screen.getByText('66.7%')).toBeInTheDocument(); // 2/3 * 100
    });
    it('sorts dashboard goals by priority', ()=>{
        const mockGoals = [
            {
                id: '1',
                user_id: 'test-user',
                goal_type_id: 'goal-1',
                target_value: 20,
                is_active: true,
                is_completed: false,
                current_progress: 10,
                goal_data: {
                    show_on_dashboard: true,
                    dashboard_priority: 3
                },
                goal_type: {
                    id: 'goal-1',
                    display_name: 'Third Priority',
                    category: 'distance'
                }
            },
            {
                id: '2',
                user_id: 'test-user',
                goal_type_id: 'goal-2',
                target_value: 30,
                is_active: true,
                is_completed: false,
                current_progress: 15,
                goal_data: {
                    show_on_dashboard: true,
                    dashboard_priority: 1
                },
                goal_type: {
                    id: 'goal-2',
                    display_name: 'First Priority',
                    category: 'distance'
                }
            }
        ];
        mockUseUserGoals.mockReturnValue({
            data: {
                goals: mockGoals,
                onboarding: null
            },
            isLoading: false,
            error: null,
            refetch: jest.fn()
        });
        mockUseUserActivities.mockReturnValue({
            data: [],
            isLoading: false,
            error: null,
            refetch: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KeyMetrics.KeyMetrics, {
            userId: "test-user"
        }), {
            wrapper: createWrapper()
        });
        const priorityBadges = _react1.screen.getAllByText(/#\d/);
        expect(priorityBadges[0]).toHaveTextContent('#1'); // First Priority should be first
        expect(priorityBadges[1]).toHaveTextContent('#2'); // Third Priority should be second
    });
});

//# sourceMappingURL=data:application/json;base64,