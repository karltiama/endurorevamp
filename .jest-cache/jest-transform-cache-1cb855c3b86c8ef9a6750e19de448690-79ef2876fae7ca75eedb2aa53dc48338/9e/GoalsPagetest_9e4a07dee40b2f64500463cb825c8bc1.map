{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\goals\\GoalsPage.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { GoalCard } from '@/components/goals/GoalCard';\r\nimport { AddGoalModal } from '@/components/goals/AddGoalModal';\r\nimport { UserGoal, GoalType } from '@/types/goals';\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/useGoals', () => ({\r\n  useGoalTypes: jest.fn(),\r\n  useCreateGoal: jest.fn(),\r\n  useUpdateGoal: jest.fn(),\r\n  useDeleteGoal: jest.fn(),\r\n}));\r\n\r\n// Mock fetch\r\nglobal.fetch = jest.fn();\r\n\r\nconst createQueryClient = () => new QueryClient({\r\n  defaultOptions: {\r\n    queries: { retry: false },\r\n    mutations: { retry: false },\r\n  },\r\n});\r\n\r\nconst renderWithQueryClient = (component: React.ReactElement) => {\r\n  const queryClient = createQueryClient();\r\n  return render(\r\n    <QueryClientProvider client={queryClient}>\r\n      {component}\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\ndescribe('GoalCard', () => {\r\n  const mockGoal: UserGoal = {\r\n    id: '1',\r\n    user_id: 'user1',\r\n    goal_type_id: 'type1',\r\n    target_value: 100,\r\n    target_unit: 'km',\r\n    time_period: 'weekly',\r\n    current_progress: 50,\r\n    streak_count: 0,\r\n    is_active: true,\r\n    is_completed: false,\r\n    priority: 1,\r\n    created_at: '2024-01-01',\r\n    updated_at: '2024-01-01',\r\n    goal_type: {\r\n      id: 'type1',\r\n      name: 'weekly_distance',\r\n      display_name: 'Weekly Distance',\r\n      description: 'Run a certain distance per week',\r\n      category: 'distance',\r\n      metric_type: 'total_distance',\r\n      unit: 'km',\r\n      target_guidance: 'Beginners: 15-25km',\r\n      calculation_method: 'Sum of all run distances in the week',\r\n      is_active: true,\r\n      created_at: '2024-01-01',\r\n      updated_at: '2024-01-01'\r\n    }\r\n  };\r\n\r\n  it('renders goal information correctly', () => {\r\n    const mockOnEdit = jest.fn();\r\n    \r\n    renderWithQueryClient(\r\n      <GoalCard goal={mockGoal} onEdit={mockOnEdit} />\r\n    );\r\n\r\n    expect(screen.getByText('Weekly Distance')).toBeInTheDocument();\r\n    expect(screen.getByText('100 km')).toBeInTheDocument();\r\n    expect(screen.getByText('50 / 100 km')).toBeInTheDocument();\r\n    expect(screen.getByText('50% complete')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows completed status for completed goals', () => {\r\n    const completedGoal = { ...mockGoal, is_completed: true };\r\n    const mockOnEdit = jest.fn();\r\n    \r\n    renderWithQueryClient(\r\n      <GoalCard goal={completedGoal} onEdit={mockOnEdit} showCompleted />\r\n    );\r\n\r\n    expect(screen.getByText('Complete')).toBeInTheDocument();\r\n  });\r\n\r\n  it('calls onEdit when edit button is clicked', async () => {\r\n    const mockOnEdit = jest.fn();\r\n    \r\n    renderWithQueryClient(\r\n      <GoalCard goal={mockGoal} onEdit={mockOnEdit} />\r\n    );\r\n\r\n    // Click the dropdown menu trigger (it's the button with just an icon)\r\n    const buttons = screen.getAllByRole('button');\r\n    const menuTrigger = buttons.find(button => button.classList.contains('h-8'));\r\n    if (!menuTrigger) throw new Error('Menu trigger not found');\r\n    fireEvent.click(menuTrigger);\r\n\r\n    // Wait for menu to appear and click edit\r\n    await waitFor(() => {\r\n      const editButton = screen.getByText('Edit Goal');\r\n      fireEvent.click(editButton);\r\n    });\r\n\r\n    expect(mockOnEdit).toHaveBeenCalled();\r\n  });\r\n\r\n  it('calculates progress percentage correctly', () => {\r\n    const mockOnEdit = jest.fn();\r\n    \r\n    renderWithQueryClient(\r\n      <GoalCard goal={mockGoal} onEdit={mockOnEdit} />\r\n    );\r\n\r\n    // Progress is 50/100 = 50%\r\n    expect(screen.getByText('50% complete')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows remaining distance', () => {\r\n    const mockOnEdit = jest.fn();\r\n    \r\n    renderWithQueryClient(\r\n      <GoalCard goal={mockGoal} onEdit={mockOnEdit} />\r\n    );\r\n\r\n    expect(screen.getByText('50.0 km remaining')).toBeInTheDocument();\r\n  });\r\n});\r\n\r\ndescribe('AddGoalModal', () => {\r\n  const mockGoalTypes: GoalType[] = [\r\n    {\r\n      id: 'type1',\r\n      name: 'weekly_distance',\r\n      display_name: 'Weekly Distance',\r\n      description: 'Run a certain distance per week',\r\n      category: 'distance',\r\n      metric_type: 'total_distance',\r\n      unit: 'km',\r\n      calculation_method: 'sum',\r\n      is_active: true,\r\n      created_at: '2024-01-01',\r\n      updated_at: '2024-01-01'\r\n    },\r\n    {\r\n      id: 'type2',\r\n      name: 'race_preparation',\r\n      display_name: 'Race Preparation',\r\n      description: 'Prepare for an upcoming race',\r\n      category: 'event',\r\n      metric_type: 'event_date',\r\n      calculation_method: 'date_target',\r\n      is_active: true,\r\n      created_at: '2024-01-01',\r\n      updated_at: '2024-01-01'\r\n    }\r\n  ];\r\n\r\n  beforeEach(() => {\r\n    const { useGoalTypes, useCreateGoal } = require('@/hooks/useGoals');\r\n    \r\n    useGoalTypes.mockReturnValue({\r\n      data: mockGoalTypes,\r\n      isLoading: false,\r\n    });\r\n    \r\n    useCreateGoal.mockReturnValue({\r\n      mutateAsync: jest.fn().mockResolvedValue({}),\r\n      isPending: false,\r\n    });\r\n  });\r\n\r\n  it('renders goal type selection initially', () => {\r\n    renderWithQueryClient(\r\n      <AddGoalModal open={true} onOpenChange={jest.fn()} />\r\n    );\r\n\r\n    expect(screen.getByText('Choose Your Goal Type')).toBeInTheDocument();\r\n    expect(screen.getByText('Weekly Distance')).toBeInTheDocument();\r\n    expect(screen.getByText('Race Preparation')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows goal configuration after selecting a type', async () => {\r\n    renderWithQueryClient(\r\n      <AddGoalModal open={true} onOpenChange={jest.fn()} />\r\n    );\r\n\r\n    // Click on a distance goal type\r\n    const distanceGoal = screen.getByText('Weekly Distance');\r\n    fireEvent.click(distanceGoal);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Target Kilometers *')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('shows date input for event goals', async () => {\r\n    renderWithQueryClient(\r\n      <AddGoalModal open={true} onOpenChange={jest.fn()} />\r\n    );\r\n\r\n    // Click on an event goal type\r\n    const eventGoal = screen.getByText('Race Preparation');\r\n    fireEvent.click(eventGoal);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Race Date *')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('validates required fields before submission', async () => {\r\n    const { useCreateGoal } = require('@/hooks/useGoals');\r\n    const mockMutateAsync = jest.fn();\r\n    useCreateGoal.mockReturnValue({\r\n      mutateAsync: mockMutateAsync,\r\n      isPending: false,\r\n    });\r\n\r\n    renderWithQueryClient(\r\n      <AddGoalModal open={true} onOpenChange={jest.fn()} />\r\n    );\r\n\r\n    // Click on a distance goal type\r\n    const distanceGoal = screen.getByText('Weekly Distance');\r\n    fireEvent.click(distanceGoal);\r\n\r\n    await waitFor(() => {\r\n      const createButton = screen.getByText('Create Goal');\r\n      fireEvent.click(createButton);\r\n    });\r\n\r\n    // Should show validation error\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Please enter a target value for distance goals.')).toBeInTheDocument();\r\n    });\r\n\r\n    expect(mockMutateAsync).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('submits form with correct data', async () => {\r\n    const { useCreateGoal } = require('@/hooks/useGoals');\r\n    const mockMutateAsync = jest.fn().mockResolvedValue({});\r\n    useCreateGoal.mockReturnValue({\r\n      mutateAsync: mockMutateAsync,\r\n      isPending: false,\r\n    });\r\n\r\n    const mockOnOpenChange = jest.fn();\r\n\r\n    renderWithQueryClient(\r\n      <AddGoalModal open={true} onOpenChange={mockOnOpenChange} />\r\n    );\r\n\r\n    // Select goal type\r\n    const distanceGoal = screen.getByText('Weekly Distance');\r\n    fireEvent.click(distanceGoal);\r\n\r\n    // Fill in target value\r\n    await waitFor(() => {\r\n      const targetInput = screen.getByLabelText('Target Kilometers *');\r\n      fireEvent.change(targetInput, { target: { value: '50' } });\r\n    });\r\n\r\n    // Submit form\r\n    const createButton = screen.getByText('Create Goal');\r\n    fireEvent.click(createButton);\r\n\r\n    await waitFor(() => {\r\n      expect(mockMutateAsync).toHaveBeenCalledWith({\r\n        goal_type_id: 'type1',\r\n        target_value: 50,\r\n        target_unit: 'km',\r\n        target_date: undefined,\r\n        goal_data: { notes: '' },\r\n        priority: 1,\r\n      });\r\n    });\r\n\r\n    expect(mockOnOpenChange).toHaveBeenCalledWith(false);\r\n  });\r\n});\r\n\r\ndescribe('Goals Page Integration', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock all hooks properly\r\n    const mockHooks = require('@/hooks/useGoals');\r\n    mockHooks.useUserGoals = jest.fn();\r\n    mockHooks.useGoalTypes = jest.fn();\r\n    mockHooks.useCreateGoal = jest.fn();\r\n  });\r\n\r\n  it('handles empty state correctly', () => {\r\n    const mockHooks = require('@/hooks/useGoals');\r\n    \r\n    mockHooks.useUserGoals.mockReturnValue({\r\n      data: { goals: [], onboarding: null },\r\n      isLoading: false,\r\n      error: null,\r\n    });\r\n\r\n    // This would be testing the actual goals page component\r\n    // We'd need to import and test the full page here\r\n  });\r\n\r\n  it('handles loading state correctly', () => {\r\n    const mockHooks = require('@/hooks/useGoals');\r\n    \r\n    mockHooks.useUserGoals.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: true,\r\n      error: null,\r\n    });\r\n\r\n    // Test loading skeleton display\r\n  });\r\n\r\n  it('handles error state correctly', () => {\r\n    const mockHooks = require('@/hooks/useGoals');\r\n    \r\n    mockHooks.useUserGoals.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: false,\r\n      error: new Error('Failed to fetch goals'),\r\n    });\r\n\r\n    // Test error message display\r\n  });\r\n}); "],"names":["jest","mock","useGoalTypes","fn","useCreateGoal","useUpdateGoal","useDeleteGoal","global","fetch","createQueryClient","QueryClient","defaultOptions","queries","retry","mutations","renderWithQueryClient","component","queryClient","render","QueryClientProvider","client","describe","mockGoal","id","user_id","goal_type_id","target_value","target_unit","time_period","current_progress","streak_count","is_active","is_completed","priority","created_at","updated_at","goal_type","name","display_name","description","category","metric_type","unit","target_guidance","calculation_method","it","mockOnEdit","GoalCard","goal","onEdit","expect","screen","getByText","toBeInTheDocument","completedGoal","showCompleted","buttons","getAllByRole","menuTrigger","find","button","classList","contains","Error","fireEvent","click","waitFor","editButton","toHaveBeenCalled","mockGoalTypes","beforeEach","require","mockReturnValue","data","isLoading","mutateAsync","mockResolvedValue","isPending","AddGoalModal","open","onOpenChange","distanceGoal","eventGoal","mockMutateAsync","createButton","not","mockOnOpenChange","targetInput","getByLabelText","change","target","value","toHaveBeenCalledWith","target_date","undefined","goal_data","notes","clearAllMocks","mockHooks","useUserGoals","goals","onboarding","error"],"mappings":"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"}