6ddce6e70cec55c84fc3a489c1dad26c
"use strict";
// Mock the hooks
jest.mock('@/hooks/useUnitPreferences');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _SmartTargetRecommendations = require("../../../components/goals/SmartTargetRecommendations");
const _useUnitPreferences = require("../../../hooks/useUnitPreferences");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseUnitPreferences = _useUnitPreferences.useUnitPreferences;
describe('SmartTargetRecommendations Component', ()=>{
    const mockGoalType = {
        id: 'weekly-distance',
        name: 'Weekly Distance Goal',
        description: 'Track your weekly running distance',
        category: 'distance',
        metric_type: 'total_distance',
        unit: 'km',
        target_guidance: 'Aim for 20-50km per week depending on your experience',
        display_name: 'Weekly Distance Goal',
        calculation_method: 'sum',
        is_active: true,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
    };
    const mockOnSelectTarget = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('displays performance data with kilometers when set to km', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockUserPerformance = {
            weeklyDistance: 25,
            monthlyDistance: 100,
            averagePace: 300,
            runFrequency: 4,
            longestRun: 15,
            totalRunningExperience: 12,
            recentInjuries: false
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SmartTargetRecommendations.SmartTargetRecommendations, {
            goalType: mockGoalType,
            userPerformance: mockUserPerformance,
            onSelectTarget: mockOnSelectTarget
        }));
        // Check that distances are displayed in kilometers
        expect(_react1.screen.getByText('25.0 km')).toBeInTheDocument();
        expect(_react1.screen.getByText('15.0 km')).toBeInTheDocument();
        // Check that pace is displayed in min/km
        expect(_react1.screen.getByText('5:00/km')).toBeInTheDocument();
    });
    it('displays performance data with miles when set to miles', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'miles',
                pace: 'min/mile'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockUserPerformance = {
            weeklyDistance: 25,
            monthlyDistance: 100,
            averagePace: 300,
            runFrequency: 4,
            longestRun: 15,
            totalRunningExperience: 12,
            recentInjuries: false
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SmartTargetRecommendations.SmartTargetRecommendations, {
            goalType: mockGoalType,
            userPerformance: mockUserPerformance,
            onSelectTarget: mockOnSelectTarget
        }));
        // Check that distances are displayed in miles
        expect(_react1.screen.getByText('15.5 mi')).toBeInTheDocument();
        expect(_react1.screen.getByText('9.3 mi')).toBeInTheDocument();
        // Check that pace is displayed in min/mile
        expect(_react1.screen.getByText('8:02/mi')).toBeInTheDocument();
    });
    it('displays recommendations with appropriate targets', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockUserPerformance = {
            weeklyDistance: 25,
            monthlyDistance: 100,
            averagePace: 300,
            runFrequency: 4,
            longestRun: 15,
            totalRunningExperience: 12,
            recentInjuries: false
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SmartTargetRecommendations.SmartTargetRecommendations, {
            goalType: mockGoalType,
            userPerformance: mockUserPerformance,
            onSelectTarget: mockOnSelectTarget
        }));
        // Check for different difficulty levels
        expect(_react1.screen.getByText('Safe Progress')).toBeInTheDocument();
        expect(_react1.screen.getByText('Balanced Challenge')).toBeInTheDocument();
        expect(_react1.screen.getByText('Push Your Limits')).toBeInTheDocument();
        // Check for success rates  
        expect(_react1.screen.getByText('95% Success Rate')).toBeInTheDocument();
        expect(_react1.screen.getByText('80% Success Rate')).toBeInTheDocument();
        expect(_react1.screen.getByText('60% Success Rate')).toBeInTheDocument();
    });
    it('allows selecting different difficulty levels', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockUserPerformance = {
            weeklyDistance: 25,
            monthlyDistance: 100,
            averagePace: 300,
            runFrequency: 4,
            longestRun: 15,
            totalRunningExperience: 12,
            recentInjuries: false
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SmartTargetRecommendations.SmartTargetRecommendations, {
            goalType: mockGoalType,
            userPerformance: mockUserPerformance,
            onSelectTarget: mockOnSelectTarget
        }));
        // Click on the ambitious target
        const ambitiousTarget = _react1.screen.getByText('Push Your Limits').closest('.p-4');
        _react1.fireEvent.click(ambitiousTarget);
        // Check that it's selected (border should change to blue)
        expect(ambitiousTarget).toHaveClass('border-blue-500');
    });
    it('shows custom target input and allows setting custom values', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SmartTargetRecommendations.SmartTargetRecommendations, {
            goalType: mockGoalType,
            onSelectTarget: mockOnSelectTarget
        }));
        // Find custom target input
        const customInput = _react1.screen.getByPlaceholderText('Enter target in km');
        expect(customInput).toBeInTheDocument();
        // Enter a custom value
        _react1.fireEvent.change(customInput, {
            target: {
                value: '35'
            }
        });
        // The Use Custom button should be enabled now
        const useCustomButton = _react1.screen.getByText('Use Custom');
        expect(useCustomButton).not.toBeDisabled();
        // Click the custom button
        _react1.fireEvent.click(useCustomButton);
        // Should call onSelectTarget with the custom value
        expect(mockOnSelectTarget).toHaveBeenCalledWith(35, 'custom');
    });
    it('displays goal tips for the selected difficulty', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SmartTargetRecommendations.SmartTargetRecommendations, {
            goalType: mockGoalType,
            onSelectTarget: mockOnSelectTarget
        }));
        // Check for goal tips section
        expect(_react1.screen.getByText('Goal Achievement Tips')).toBeInTheDocument();
        // Check for some typical distance goal tips
        expect(_react1.screen.getByText(/Increase distance gradually/)).toBeInTheDocument();
        expect(_react1.screen.getByText(/Include one long run per week/)).toBeInTheDocument();
    });
    it('works without user performance data', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SmartTargetRecommendations.SmartTargetRecommendations, {
            goalType: mockGoalType,
            onSelectTarget: mockOnSelectTarget
        }));
        // Should still show recommendations (default ones)
        expect(_react1.screen.getByText('Beginner Friendly')).toBeInTheDocument();
        expect(_react1.screen.getByText('Balanced Target')).toBeInTheDocument();
        expect(_react1.screen.getByText('Challenge Mode')).toBeInTheDocument();
        // Should not show performance analysis section
        expect(_react1.screen.queryByText('Your Current Performance')).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,