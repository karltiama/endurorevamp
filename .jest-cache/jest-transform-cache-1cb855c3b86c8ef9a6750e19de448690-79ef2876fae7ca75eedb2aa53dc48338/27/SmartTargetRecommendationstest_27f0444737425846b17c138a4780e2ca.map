{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\goals\\SmartTargetRecommendations.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\nimport { SmartTargetRecommendations } from '@/components/goals/SmartTargetRecommendations';\r\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences';\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/useUnitPreferences');\r\n\r\nconst mockUseUnitPreferences = useUnitPreferences as jest.MockedFunction<typeof useUnitPreferences>;\r\n\r\ndescribe('SmartTargetRecommendations Component', () => {\r\n  const mockGoalType = {\r\n    id: 'weekly-distance',\r\n    name: 'Weekly Distance Goal',\r\n    description: 'Track your weekly running distance',\r\n    category: 'distance' as const,\r\n    metric_type: 'total_distance',\r\n    unit: 'km',\r\n    target_guidance: 'Aim for 20-50km per week depending on your experience',\r\n    display_name: 'Weekly Distance Goal',\r\n    calculation_method: 'sum',\r\n    is_active: true,\r\n    created_at: '2024-01-01T00:00:00Z',\r\n    updated_at: '2024-01-01T00:00:00Z'\r\n  };\r\n\r\n  const mockOnSelectTarget = jest.fn();\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('displays performance data with kilometers when set to km', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    const mockUserPerformance = {\r\n      weeklyDistance: 25, // km\r\n      monthlyDistance: 100,\r\n      averagePace: 300, // 5:00 per km\r\n      runFrequency: 4,\r\n      longestRun: 15, // km\r\n      totalRunningExperience: 12,\r\n      recentInjuries: false\r\n    };\r\n\r\n    render(\r\n      <SmartTargetRecommendations\r\n        goalType={mockGoalType}\r\n        userPerformance={mockUserPerformance}\r\n        onSelectTarget={mockOnSelectTarget}\r\n      />\r\n    );\r\n\r\n    // Check that distances are displayed in kilometers\r\n    expect(screen.getByText('25.0 km')).toBeInTheDocument();\r\n    expect(screen.getByText('15.0 km')).toBeInTheDocument();\r\n    \r\n    // Check that pace is displayed in min/km\r\n    expect(screen.getByText('5:00/km')).toBeInTheDocument();\r\n  });\r\n\r\n  it('displays performance data with miles when set to miles', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'miles', pace: 'min/mile' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    const mockUserPerformance = {\r\n      weeklyDistance: 25, // km, should be converted to ~15.5 miles\r\n      monthlyDistance: 100,\r\n      averagePace: 300, // 5:00 per km, should be converted to ~8:02 per mile\r\n      runFrequency: 4,\r\n      longestRun: 15, // km, should be converted to ~9.3 miles\r\n      totalRunningExperience: 12,\r\n      recentInjuries: false\r\n    };\r\n\r\n    render(\r\n      <SmartTargetRecommendations\r\n        goalType={mockGoalType}\r\n        userPerformance={mockUserPerformance}\r\n        onSelectTarget={mockOnSelectTarget}\r\n      />\r\n    );\r\n\r\n    // Check that distances are displayed in miles\r\n    expect(screen.getByText('15.5 mi')).toBeInTheDocument();\r\n    expect(screen.getByText('9.3 mi')).toBeInTheDocument();\r\n    \r\n    // Check that pace is displayed in min/mile\r\n    expect(screen.getByText('8:02/mi')).toBeInTheDocument();\r\n  });\r\n\r\n  it('displays recommendations with appropriate targets', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    const mockUserPerformance = {\r\n      weeklyDistance: 25,\r\n      monthlyDistance: 100,\r\n      averagePace: 300,\r\n      runFrequency: 4,\r\n      longestRun: 15,\r\n      totalRunningExperience: 12,\r\n      recentInjuries: false\r\n    };\r\n\r\n    render(\r\n      <SmartTargetRecommendations\r\n        goalType={mockGoalType}\r\n        userPerformance={mockUserPerformance}\r\n        onSelectTarget={mockOnSelectTarget}\r\n      />\r\n    );\r\n\r\n    // Check for different difficulty levels\r\n    expect(screen.getByText('Safe Progress')).toBeInTheDocument();\r\n    expect(screen.getByText('Balanced Challenge')).toBeInTheDocument();\r\n    expect(screen.getByText('Push Your Limits')).toBeInTheDocument();\r\n    \r\n    // Check for success rates  \r\n    expect(screen.getByText('95% Success Rate')).toBeInTheDocument();\r\n    expect(screen.getByText('80% Success Rate')).toBeInTheDocument();\r\n    expect(screen.getByText('60% Success Rate')).toBeInTheDocument();\r\n  });\r\n\r\n  it('allows selecting different difficulty levels', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    const mockUserPerformance = {\r\n      weeklyDistance: 25,\r\n      monthlyDistance: 100,\r\n      averagePace: 300,\r\n      runFrequency: 4,\r\n      longestRun: 15,\r\n      totalRunningExperience: 12,\r\n      recentInjuries: false\r\n    };\r\n\r\n    render(\r\n      <SmartTargetRecommendations\r\n        goalType={mockGoalType}\r\n        userPerformance={mockUserPerformance}\r\n        onSelectTarget={mockOnSelectTarget}\r\n      />\r\n    );\r\n\r\n    // Click on the ambitious target\r\n    const ambitiousTarget = screen.getByText('Push Your Limits').closest('.p-4');\r\n    fireEvent.click(ambitiousTarget!);\r\n\r\n    // Check that it's selected (border should change to blue)\r\n    expect(ambitiousTarget).toHaveClass('border-blue-500');\r\n  });\r\n\r\n  it('shows custom target input and allows setting custom values', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    render(\r\n      <SmartTargetRecommendations\r\n        goalType={mockGoalType}\r\n        onSelectTarget={mockOnSelectTarget}\r\n      />\r\n    );\r\n\r\n    // Find custom target input\r\n    const customInput = screen.getByPlaceholderText('Enter target in km');\r\n    expect(customInput).toBeInTheDocument();\r\n\r\n    // Enter a custom value\r\n    fireEvent.change(customInput, { target: { value: '35' } });\r\n    \r\n    // The Use Custom button should be enabled now\r\n    const useCustomButton = screen.getByText('Use Custom');\r\n    expect(useCustomButton).not.toBeDisabled();\r\n    \r\n    // Click the custom button\r\n    fireEvent.click(useCustomButton);\r\n    \r\n    // Should call onSelectTarget with the custom value\r\n    expect(mockOnSelectTarget).toHaveBeenCalledWith(35, 'custom');\r\n  });\r\n\r\n  it('displays goal tips for the selected difficulty', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    render(\r\n      <SmartTargetRecommendations\r\n        goalType={mockGoalType}\r\n        onSelectTarget={mockOnSelectTarget}\r\n      />\r\n    );\r\n\r\n    // Check for goal tips section\r\n    expect(screen.getByText('Goal Achievement Tips')).toBeInTheDocument();\r\n    \r\n    // Check for some typical distance goal tips\r\n    expect(screen.getByText(/Increase distance gradually/)).toBeInTheDocument();\r\n    expect(screen.getByText(/Include one long run per week/)).toBeInTheDocument();\r\n  });\r\n\r\n  it('works without user performance data', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    render(\r\n      <SmartTargetRecommendations\r\n        goalType={mockGoalType}\r\n        onSelectTarget={mockOnSelectTarget}\r\n      />\r\n    );\r\n\r\n    // Should still show recommendations (default ones)\r\n    expect(screen.getByText('Beginner Friendly')).toBeInTheDocument();\r\n    expect(screen.getByText('Balanced Target')).toBeInTheDocument();\r\n    expect(screen.getByText('Challenge Mode')).toBeInTheDocument();\r\n    \r\n    // Should not show performance analysis section\r\n    expect(screen.queryByText('Your Current Performance')).not.toBeInTheDocument();\r\n  });\r\n}); "],"names":["jest","mock","mockUseUnitPreferences","useUnitPreferences","describe","mockGoalType","id","name","description","category","metric_type","unit","target_guidance","display_name","calculation_method","is_active","created_at","updated_at","mockOnSelectTarget","fn","beforeEach","clearAllMocks","it","mockReturnValue","preferences","distance","pace","isLoading","updatePreferences","setDistanceUnit","toggleUnits","mockUserPerformance","weeklyDistance","monthlyDistance","averagePace","runFrequency","longestRun","totalRunningExperience","recentInjuries","render","SmartTargetRecommendations","goalType","userPerformance","onSelectTarget","expect","screen","getByText","toBeInTheDocument","ambitiousTarget","closest","fireEvent","click","toHaveClass","customInput","getByPlaceholderText","change","target","value","useCustomButton","not","toBeDisabled","toHaveBeenCalledWith","queryByText"],"mappings":"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"}