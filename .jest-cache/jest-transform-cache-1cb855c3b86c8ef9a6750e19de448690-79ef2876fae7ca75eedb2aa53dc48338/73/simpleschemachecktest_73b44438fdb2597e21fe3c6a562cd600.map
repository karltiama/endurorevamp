{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\database\\simple-schema-check.test.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\ndescribe('Simple Schema Check', () => {\r\n  let supabase: any\r\n  \r\n  beforeAll(() => {\r\n    // Check if we have real environment variables\r\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || \r\n        !process.env.SUPABASE_SERVICE_ROLE_KEY ||\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL.includes('test.supabase.co')) {\r\n      console.log('⚠️  No real database credentials - skipping all tests')\r\n      return\r\n    }\r\n    \r\n    console.log('✅ Using real database for schema validation')\r\n    supabase = createClient(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n    )\r\n  })\r\n\r\n  const requiredTables = [\r\n    'activities',\r\n    'strava_tokens', \r\n    'sync_state',\r\n    'goal_types',\r\n    'user_goals',\r\n    'goal_progress',\r\n    'user_onboarding'\r\n  ]\r\n\r\n  test('all required tables should exist', async () => {\r\n    if (!supabase) {\r\n      console.log('Skipping - no database connection')\r\n      return\r\n    }\r\n\r\n    for (const table of requiredTables) {\r\n      const { error } = await supabase\r\n        .from(table)\r\n        .select('*')\r\n        .limit(1)\r\n      \r\n      if (error) {\r\n        console.error(`❌ Table '${table}' error:`, error.message)\r\n      } else {\r\n        console.log(`✅ Table '${table}' accessible`)\r\n      }\r\n      \r\n      expect(error).toBeNull()\r\n    }\r\n  })\r\n\r\n  test('goal relationships should work', async () => {\r\n    if (!supabase) {\r\n      console.log('Skipping - no database connection')\r\n      return\r\n    }\r\n\r\n    // Test the basic goal relationship query\r\n    const { data, error } = await supabase\r\n      .from('user_goals')\r\n      .select(`\r\n        id,\r\n        target_value,\r\n        goal_types (\r\n          display_name,\r\n          category\r\n        )\r\n      `)\r\n      .limit(1)\r\n\r\n    if (error) {\r\n      console.error('❌ Goal relationship error:', error.message)\r\n    } else {\r\n      console.log('✅ Goal relationships work')\r\n      if (data && data.length > 0) {\r\n        console.log('Sample goal data:', data[0])\r\n      }\r\n    }\r\n\r\n    expect(error).toBeNull()\r\n  })\r\n\r\n  test('dashboard goals feature readiness', async () => {\r\n    if (!supabase) {\r\n      console.log('Skipping - no database connection')\r\n      return\r\n    }\r\n\r\n    // Check if goal_data field supports dashboard preferences\r\n    const { data, error } = await supabase\r\n      .from('user_goals')\r\n      .select('goal_data')\r\n      .not('goal_data', 'is', null)\r\n      .limit(1)\r\n\r\n    expect(error).toBeNull()\r\n\r\n    if (data && data.length > 0) {\r\n      const goalData = data[0].goal_data\r\n      console.log('✅ Goal data structure:', goalData)\r\n      \r\n      // The structure should support our dashboard fields\r\n      expect(typeof goalData).toBe('object')\r\n    } else {\r\n      console.log('ℹ️  No goals with data found - this is okay for new databases')\r\n    }\r\n  })\r\n})\r\n\r\n// Utility function to run a quick schema health check\r\nexport async function quickSchemaCheck() {\r\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || \r\n      !process.env.SUPABASE_SERVICE_ROLE_KEY ||\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL.includes('test.supabase.co')) {\r\n    console.log('⚠️  No real database credentials available')\r\n    return false\r\n  }\r\n\r\n  const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n  )\r\n\r\n  const tables = ['goal_types', 'user_goals', 'activities']\r\n  const results = []\r\n\r\n  for (const table of tables) {\r\n    try {\r\n      const { count, error } = await supabase\r\n        .from(table)\r\n        .select('*', { count: 'exact', head: true })\r\n      \r\n      results.push({ \r\n        table, \r\n        accessible: !error, \r\n        recordCount: count || 0,\r\n        error: error?.message \r\n      })\r\n    } catch (e) {\r\n      results.push({ \r\n        table, \r\n        accessible: false, \r\n        error: e instanceof Error ? e.message : 'Unknown error'\r\n      })\r\n    }\r\n  }\r\n\r\n  console.log('Schema Health Check:')\r\n  results.forEach(result => {\r\n    const status = result.accessible ? '✅' : '❌'\r\n    console.log(`${status} ${result.table}: ${result.recordCount} records`)\r\n    if (result.error) {\r\n      console.log(`   Error: ${result.error}`)\r\n    }\r\n  })\r\n\r\n  return results.every(r => r.accessible)\r\n} "],"names":["quickSchemaCheck","describe","supabase","beforeAll","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","includes","console","log","createClient","requiredTables","test","table","error","from","select","limit","message","expect","toBeNull","data","length","not","goalData","goal_data","toBe","tables","results","count","head","push","accessible","recordCount","e","Error","forEach","result","status","every","r"],"mappings":"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"}