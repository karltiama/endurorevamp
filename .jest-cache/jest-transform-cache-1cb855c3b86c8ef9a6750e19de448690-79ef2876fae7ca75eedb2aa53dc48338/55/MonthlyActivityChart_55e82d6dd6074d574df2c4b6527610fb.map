{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\components\\dashboard\\MonthlyActivityChart.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { useUserActivities } from '@/hooks/use-user-activities'\r\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences'\r\nimport { Activity } from '@/lib/strava/types'\r\nimport { useMemo } from 'react'\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  ResponsiveContainer,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  CartesianGrid,\r\n} from 'recharts'\r\nimport { convertDistance, getDistanceUnit } from '@/lib/utils'\r\n\r\ninterface MonthlyActivityChartProps {\r\n  userId: string\r\n}\r\n\r\nexport function MonthlyActivityChart({ userId }: MonthlyActivityChartProps) {\r\n  const { data: activities, isLoading, error } = useUserActivities(userId)\r\n  const { preferences } = useUnitPreferences()\r\n\r\n  const monthlyData = useMemo(() => {\r\n    if (!activities) return []\r\n\r\n    const currentYear = new Date().getFullYear()\r\n    const monthlyTotals = new Array(12).fill(0)\r\n    const monthlyCounts = new Array(12).fill(0)\r\n\r\n    activities.forEach((activity: Activity) => {\r\n      const date = new Date(activity.start_date)\r\n      if (date.getFullYear() === currentYear) {\r\n        const month = date.getMonth()\r\n        monthlyTotals[month] += activity.distance\r\n        monthlyCounts[month]++\r\n      }\r\n    })\r\n\r\n    return monthlyTotals.map((distance, index) => ({\r\n      month: new Date(2024, index, 1).toLocaleString('default', { month: 'short' }),\r\n      distance: Math.round(convertDistance(distance, preferences.distance)), // Convert based on user preference\r\n      count: monthlyCounts[index]\r\n    }))\r\n  }, [activities, preferences.distance])\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Monthly Activity</CardTitle>\r\n          <CardDescription>Loading activity data...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"h-[300px] animate-pulse bg-gray-100 rounded-lg\" />\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Monthly Activity</CardTitle>\r\n          <CardDescription>Error loading activity data</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-red-500\">\r\n            {error instanceof Error ? error.message : 'Failed to load activity data'}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Monthly Activity</CardTitle>\r\n        <CardDescription>Your activity distance by month this year</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"h-[300px]\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart data={monthlyData}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n              <XAxis \r\n                dataKey=\"month\" \r\n                stroke=\"#888888\"\r\n                fontSize={12}\r\n                tickLine={false}\r\n                axisLine={false}\r\n              />\r\n              <YAxis\r\n                stroke=\"#888888\"\r\n                fontSize={12}\r\n                tickLine={false}\r\n                axisLine={false}\r\n                tickFormatter={(value) => `${value}${getDistanceUnit(preferences.distance)}`}\r\n              />\r\n              <Tooltip\r\n                content={({ active, payload }) => {\r\n                  if (active && payload && payload.length) {\r\n                    return (\r\n                      <div className=\"rounded-lg border bg-background p-2 shadow-sm\">\r\n                        <div className=\"grid grid-cols-2 gap-2\">\r\n                          <div className=\"flex flex-col\">\r\n                            <span className=\"text-[0.70rem] uppercase text-muted-foreground\">\r\n                              Distance\r\n                            </span>\r\n                            <span className=\"font-bold text-muted-foreground\">\r\n                              {payload[0].value}{getDistanceUnit(preferences.distance)}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex flex-col\">\r\n                            <span className=\"text-[0.70rem] uppercase text-muted-foreground\">\r\n                              Activities\r\n                            </span>\r\n                            <span className=\"font-bold text-muted-foreground\">\r\n                              {payload[0].payload.count}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  }\r\n                  return null\r\n                }}\r\n              />\r\n              <Bar\r\n                dataKey=\"distance\"\r\n                fill=\"hsl(var(--primary))\"\r\n                radius={[4, 4, 0, 0]}\r\n                className=\"fill-primary\"\r\n              />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n} "],"names":["MonthlyActivityChart","userId","data","activities","isLoading","error","useUserActivities","preferences","useUnitPreferences","monthlyData","useMemo","currentYear","Date","getFullYear","monthlyTotals","Array","fill","monthlyCounts","forEach","activity","date","start_date","month","getMonth","distance","map","index","toLocaleString","Math","round","convertDistance","count","Card","CardHeader","CardTitle","CardDescription","CardContent","div","className","Error","message","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","stroke","fontSize","tickLine","axisLine","YAxis","tickFormatter","value","getDistanceUnit","Tooltip","content","active","payload","length","span","Bar","radius"],"mappings":"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"}