{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\lib\\training\\training-load.ts"],"sourcesContent":["import { Activity } from '@/lib/strava/types'\r\n\r\n// Training Load interfaces\r\nexport interface TrainingLoadPoint {\r\n  date: string\r\n  trimp: number\r\n  tss: number\r\n  normalizedLoad: number\r\n  activity?: {\r\n    name: string\r\n    sport_type: string\r\n    duration: number\r\n    avgHR?: number\r\n    avgPower?: number\r\n  }\r\n}\r\n\r\nexport interface TrainingLoadMetrics {\r\n  acute: number        // 7-day average (ATL)\r\n  chronic: number      // 42-day average (CTL) \r\n  balance: number      // TSB = CTL - ATL\r\n  rampRate: number     // Weekly CTL change\r\n  status: 'peak' | 'maintain' | 'build' | 'recover'\r\n  recommendation: string\r\n}\r\n\r\nexport interface AthleteThresholds {\r\n  maxHeartRate: number\r\n  restingHeartRate: number\r\n  functionalThresholdPower?: number\r\n  lactateThreshold?: number\r\n  weight?: number\r\n}\r\n\r\n// Sport-specific multipliers for TRIMP calculation\r\nconst SPORT_MULTIPLIERS = {\r\n  'Run': 1.0,\r\n  'Ride': 0.85,        // Cycling typically lower intensity for same HR\r\n  'VirtualRide': 0.85,\r\n  'Swim': 1.1,         // Swimming often higher intensity\r\n  'Hike': 0.7,\r\n  'Walk': 0.5,\r\n  'Workout': 0.9,\r\n  'WeightTraining': 0.8,\r\n  'Yoga': 0.6,\r\n  'CrossCountrySkiing': 1.0,\r\n  'AlpineSki': 0.8,\r\n  'Snowboard': 0.8,\r\n  'IceSkate': 0.9,\r\n  'InlineSkate': 0.9,\r\n  'Rowing': 1.0,\r\n  'Kayaking': 0.9,\r\n  'Canoeing': 0.9,\r\n  'StandUpPaddling': 0.8,\r\n  'Surfing': 0.7,\r\n  'Kitesurf': 0.8,\r\n  'Windsurf': 0.8,\r\n  'Soccer': 1.0,\r\n  'Tennis': 0.9,\r\n  'Basketball': 0.95,\r\n  'Badminton': 0.9,\r\n  'Golf': 0.4,\r\n  'RockClimbing': 0.9,\r\n  'Default': 0.8\r\n}\r\n\r\nexport class TrainingLoadCalculator {\r\n  private athleteThresholds: AthleteThresholds\r\n\r\n  constructor(athleteThresholds: AthleteThresholds) {\r\n    this.athleteThresholds = athleteThresholds\r\n  }\r\n\r\n  /**\r\n   * Calculate TRIMP (Training Impulse) for an activity\r\n   * Uses Banister's TRIMP formula with exponential heart rate weighting\r\n   */\r\n  calculateTRIMP(activity: Activity): number {\r\n    // Require heart rate data for TRIMP\r\n    if (!activity.has_heartrate || !activity.average_heartrate || !activity.moving_time) {\r\n      return 0\r\n    }\r\n\r\n    const duration = activity.moving_time / 60 // Convert to minutes\r\n    const avgHR = activity.average_heartrate\r\n    const maxHR = this.athleteThresholds.maxHeartRate\r\n    const restHR = this.athleteThresholds.restingHeartRate\r\n\r\n    // Calculate heart rate reserve ratio\r\n    const hrReserve = (avgHR - restHR) / (maxHR - restHR)\r\n    const hrRatio = Math.max(0, Math.min(1, hrReserve)) // Clamp between 0-1\r\n\r\n    // Exponential weighting factor based on gender (using 1.92 as general coefficient)\r\n    const exponentialFactor = 1.92\r\n    const intensityFactor = hrRatio * exponentialFactor\r\n\r\n    // Base TRIMP calculation\r\n    let trimp = duration * hrRatio * (0.64 * Math.exp(intensityFactor))\r\n\r\n    // Apply sport-specific multiplier\r\n    const sportMultiplier = SPORT_MULTIPLIERS[activity.sport_type as keyof typeof SPORT_MULTIPLIERS] || SPORT_MULTIPLIERS.Default\r\n    trimp *= sportMultiplier\r\n\r\n    return Math.round(trimp)\r\n  }\r\n\r\n  /**\r\n   * Calculate TSS (Training Stress Score) for an activity\r\n   * Power-based when available, HR-based otherwise\r\n   */\r\n  calculateTSS(activity: Activity): number {\r\n    const duration = activity.moving_time / 3600 // Convert to hours\r\n\r\n    // Power-based TSS (preferred when available)\r\n    if (activity.average_watts && this.athleteThresholds.functionalThresholdPower) {\r\n      const avgPower = activity.average_watts\r\n      const ftp = this.athleteThresholds.functionalThresholdPower\r\n      const intensityFactor = avgPower / ftp\r\n      const normalizedPower = avgPower * this.calculateVariabilityIndex(activity)\r\n      \r\n      // TSS = (seconds * NP * IF) / (FTP * 3600) * 100\r\n      const tss = (activity.moving_time * normalizedPower * intensityFactor) / (ftp * 3600) * 100\r\n      return Math.round(Math.max(0, tss))\r\n    }\r\n\r\n    // Heart rate-based TSS (fallback)\r\n    if (activity.has_heartrate && activity.average_heartrate) {\r\n      const avgHR = activity.average_heartrate\r\n      const maxHR = this.athleteThresholds.maxHeartRate\r\n      const lthr = this.athleteThresholds.lactateThreshold || maxHR * 0.85 // Estimate if not provided\r\n\r\n      const hrRatio = avgHR / lthr\r\n      const intensityFactor = Math.max(0.5, Math.min(1.15, hrRatio)) // Clamp reasonable IF range\r\n\r\n      // HR-based TSS approximation\r\n      const tss = duration * intensityFactor * intensityFactor * 100\r\n\r\n      // Apply sport-specific multiplier\r\n      const sportMultiplier = SPORT_MULTIPLIERS[activity.sport_type as keyof typeof SPORT_MULTIPLIERS] || SPORT_MULTIPLIERS.Default\r\n      return Math.round(Math.max(0, tss * sportMultiplier))\r\n    }\r\n\r\n    // Fallback: duration-based estimation\r\n    return Math.round(duration * 50) // Rough estimate: 50 TSS per hour\r\n  }\r\n\r\n  /**\r\n   * Calculate normalized training load (0-100 scale)\r\n   * Combines TRIMP and TSS with activity context\r\n   */\r\n  calculateNormalizedLoad(activity: Activity): number {\r\n    const trimp = this.calculateTRIMP(activity)\r\n    const tss = this.calculateTSS(activity)\r\n    const duration = activity.moving_time / 3600 // hours\r\n\r\n    // Base score using the higher of TRIMP or TSS (normalized)\r\n    let baseScore = 0\r\n    \r\n    if (trimp > 0 && tss > 0) {\r\n      // When both available, use weighted average\r\n      baseScore = (trimp * 0.6 + tss * 0.4) / 2\r\n    } else if (tss > 0) {\r\n      baseScore = tss\r\n    } else if (trimp > 0) {\r\n      baseScore = trimp * 1.2 // Slight boost when only HR available\r\n    } else {\r\n      // Duration-based fallback\r\n      baseScore = duration * 30\r\n    }\r\n\r\n    // Apply intensity multipliers\r\n    const intensityMultiplier = this.getIntensityMultiplier(activity)\r\n    const sportMultiplier = SPORT_MULTIPLIERS[activity.sport_type as keyof typeof SPORT_MULTIPLIERS] || SPORT_MULTIPLIERS.Default\r\n\r\n    let normalizedScore = baseScore * intensityMultiplier * sportMultiplier\r\n\r\n    // Normalize to 0-100 scale\r\n    normalizedScore = Math.min(100, Math.max(0, normalizedScore / 2))\r\n\r\n    return Math.round(normalizedScore)\r\n  }\r\n\r\n  /**\r\n   * Calculate training load metrics over time\r\n   */\r\n  calculateLoadMetrics(loadPoints: TrainingLoadPoint[]): TrainingLoadMetrics {\r\n    if (loadPoints.length === 0) {\r\n      return {\r\n        acute: 0,\r\n        chronic: 0,\r\n        balance: 0,\r\n        rampRate: 0,\r\n        status: 'recover',\r\n        recommendation: 'Start building your training load gradually'\r\n      }\r\n    }\r\n\r\n    // Sort by date\r\n    const sortedPoints = loadPoints.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\r\n    \r\n    // Calculate CTL (Chronic Training Load) - exponentially weighted 42-day average\r\n    const ctl = this.calculateExponentialAverage(sortedPoints.map(p => p.normalizedLoad), 42)\r\n    \r\n    // Calculate ATL (Acute Training Load) - exponentially weighted 7-day average\r\n    const atl = this.calculateExponentialAverage(sortedPoints.slice(-7).map(p => p.normalizedLoad), 7)\r\n    \r\n    // Calculate TSB (Training Stress Balance)\r\n    const tsb = ctl - atl\r\n    \r\n    // Calculate ramp rate (CTL change per week)\r\n    const rampRate = this.calculateRampRate(sortedPoints)\r\n    \r\n    // Determine training status\r\n    const status = this.determineTrainingStatus(ctl, atl, tsb, rampRate)\r\n    \r\n    // Generate recommendation\r\n    const recommendation = this.generateRecommendation(status)\r\n\r\n    return {\r\n      acute: Math.round(atl),\r\n      chronic: Math.round(ctl),\r\n      balance: Math.round(tsb),\r\n      rampRate: Math.round(rampRate * 10) / 10,\r\n      status,\r\n      recommendation\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process activities into training load points\r\n   */\r\n  processActivities(activities: Activity[]): TrainingLoadPoint[] {\r\n    return activities\r\n      .filter(activity => activity.moving_time > 300) // At least 5 minutes\r\n      .map(activity => ({\r\n        date: activity.start_date_local,\r\n        trimp: this.calculateTRIMP(activity),\r\n        tss: this.calculateTSS(activity),\r\n        normalizedLoad: this.calculateNormalizedLoad(activity),\r\n        activity: {\r\n          name: activity.name,\r\n          sport_type: activity.sport_type,\r\n          duration: activity.moving_time,\r\n          avgHR: activity.average_heartrate || undefined,\r\n          avgPower: activity.average_watts || undefined\r\n        }\r\n      }))\r\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\r\n  }\r\n\r\n  // Private helper methods\r\n\r\n  private calculateVariabilityIndex(activity: Activity): number {\r\n    // Simplified VI calculation - in reality this requires power data stream\r\n    // Using sport-based estimates\r\n    const sportVI = {\r\n      'Run': 1.02,\r\n      'Ride': 1.05,\r\n      'VirtualRide': 1.02,\r\n      'Default': 1.03\r\n    }\r\n    return sportVI[activity.sport_type as keyof typeof sportVI] || sportVI.Default\r\n  }\r\n\r\n  private getIntensityMultiplier(activity: Activity): number {\r\n    // Calculate intensity based on available metrics\r\n    let intensityFactor = 1.0\r\n\r\n    if (activity.average_heartrate && this.athleteThresholds.maxHeartRate) {\r\n      const hrRatio = activity.average_heartrate / this.athleteThresholds.maxHeartRate\r\n      intensityFactor = Math.max(0.5, Math.min(1.2, hrRatio))\r\n    } else if (activity.average_watts && this.athleteThresholds.functionalThresholdPower) {\r\n      const powerRatio = activity.average_watts / this.athleteThresholds.functionalThresholdPower\r\n      intensityFactor = Math.max(0.5, Math.min(1.3, powerRatio))\r\n    }\r\n\r\n    return intensityFactor\r\n  }\r\n\r\n  private calculateExponentialAverage(values: number[], timeConstant: number): number {\r\n    if (values.length === 0) return 0\r\n    \r\n    const alpha = 1 / timeConstant\r\n    let ema = values[0]\r\n    \r\n    for (let i = 1; i < values.length; i++) {\r\n      ema = alpha * values[i] + (1 - alpha) * ema\r\n    }\r\n    \r\n    return ema\r\n  }\r\n\r\n  private calculateRampRate(loadPoints: TrainingLoadPoint[]): number {\r\n    if (loadPoints.length < 14) return 0\r\n    \r\n    const recent = loadPoints.slice(-14) // Last 2 weeks\r\n    const firstWeek = recent.slice(0, 7)\r\n    const secondWeek = recent.slice(7, 14)\r\n    \r\n    const firstWeekAvg = firstWeek.reduce((sum, p) => sum + p.normalizedLoad, 0) / 7\r\n    const secondWeekAvg = secondWeek.reduce((sum, p) => sum + p.normalizedLoad, 0) / 7\r\n    \r\n    return secondWeekAvg - firstWeekAvg\r\n  }\r\n\r\n  private determineTrainingStatus(ctl: number, atl: number, tsb: number, rampRate: number): TrainingLoadMetrics['status'] {\r\n    if (tsb < -10 && rampRate > 5) return 'peak'\r\n    if (tsb > 5) return 'recover'\r\n    if (rampRate > 3) return 'build'\r\n    return 'maintain'\r\n  }\r\n\r\n  private generateRecommendation(status: TrainingLoadMetrics['status']): string {\r\n    switch (status) {\r\n      case 'peak':\r\n        return 'High training stress detected. Consider reducing intensity and incorporating recovery.'\r\n      case 'build':\r\n        return 'Good building phase. Maintain current training progression while monitoring recovery.'\r\n      case 'maintain':\r\n        return 'Steady training load. Consider varying intensity or adding progressive overload.'\r\n      case 'recover':\r\n        return 'Low training stress. Good time for recovery or gradually increasing training load.'\r\n      default:\r\n        return 'Continue monitoring your training load and adjust based on how you feel.'\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to estimate athlete thresholds from activity data\r\n */\r\nexport function estimateAthleteThresholds(activities: Activity[]): AthleteThresholds {\r\n  const activitiesWithHR = activities.filter(a => a.has_heartrate && a.average_heartrate)\r\n  const activitiesWithPower = activities.filter(a => a.average_watts)\r\n\r\n  // Estimate max heart rate (95th percentile of max HRs)\r\n  const maxHRs = activitiesWithHR\r\n    .map(a => a.max_heartrate || a.average_heartrate)\r\n    .filter((hr): hr is number => hr !== undefined && hr > 0)\r\n    .sort((a, b) => b - a)\r\n  \r\n  const maxHeartRate = maxHRs.length > 0 ? maxHRs[Math.floor(maxHRs.length * 0.05)] || 190 : 190\r\n\r\n  // Estimate resting heart rate (5th percentile of average HRs)\r\n  const avgHRs = activitiesWithHR\r\n    .map(a => a.average_heartrate)\r\n    .filter((hr): hr is number => hr !== undefined && hr > 0)\r\n    .sort((a, b) => a - b)\r\n  \r\n  const restingHeartRate = avgHRs.length > 0 ? avgHRs[Math.floor(avgHRs.length * 0.05)] || 60 : 60\r\n\r\n  // Estimate FTP (95th percentile of weighted average watts for efforts > 20 minutes)\r\n  const powerActivities = activitiesWithPower.filter(a => a.moving_time > 1200) // > 20 minutes\r\n  const powerValues = powerActivities\r\n    .map(a => a.weighted_average_watts || a.average_watts)\r\n    .filter((p): p is number => p !== undefined && p > 0)\r\n    .sort((a, b) => b - a)\r\n  \r\n  const functionalThresholdPower = powerValues.length > 0 \r\n    ? powerValues[Math.floor(powerValues.length * 0.1)] // 90th percentile for FTP estimate\r\n    : undefined\r\n\r\n  return {\r\n    maxHeartRate,\r\n    restingHeartRate,\r\n    functionalThresholdPower,\r\n    lactateThreshold: maxHeartRate * 0.85, // Rough estimate\r\n  }\r\n} "],"names":["TrainingLoadCalculator","estimateAthleteThresholds","SPORT_MULTIPLIERS","constructor","athleteThresholds","calculateTRIMP","activity","has_heartrate","average_heartrate","moving_time","duration","avgHR","maxHR","maxHeartRate","restHR","restingHeartRate","hrReserve","hrRatio","Math","max","min","exponentialFactor","intensityFactor","trimp","exp","sportMultiplier","sport_type","Default","round","calculateTSS","average_watts","functionalThresholdPower","avgPower","ftp","normalizedPower","calculateVariabilityIndex","tss","lthr","lactateThreshold","calculateNormalizedLoad","baseScore","intensityMultiplier","getIntensityMultiplier","normalizedScore","calculateLoadMetrics","loadPoints","length","acute","chronic","balance","rampRate","status","recommendation","sortedPoints","sort","a","b","Date","date","getTime","ctl","calculateExponentialAverage","map","p","normalizedLoad","atl","slice","tsb","calculateRampRate","determineTrainingStatus","generateRecommendation","processActivities","activities","filter","start_date_local","name","undefined","sportVI","powerRatio","values","timeConstant","alpha","ema","i","recent","firstWeek","secondWeek","firstWeekAvg","reduce","sum","secondWeekAvg","activitiesWithHR","activitiesWithPower","maxHRs","max_heartrate","hr","floor","avgHRs","powerActivities","powerValues","weighted_average_watts"],"mappings":"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"}