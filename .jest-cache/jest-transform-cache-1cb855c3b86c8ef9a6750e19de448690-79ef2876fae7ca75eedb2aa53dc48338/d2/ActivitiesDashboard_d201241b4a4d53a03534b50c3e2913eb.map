{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\components\\strava\\ActivitiesDashboard.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Alert, AlertDescription } from '@/components/ui/alert'\r\nimport { \r\n  Loader2, \r\n  Calendar, \r\n  Timer, \r\n  Activity as ActivityIcon, \r\n  MapPin, \r\n  Heart, \r\n  Zap,\r\n  AlertCircle,\r\n  RefreshCw\r\n} from 'lucide-react'\r\nimport { useUserActivities } from '@/hooks/use-user-activities'\r\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences'\r\nimport { formatDistance } from '@/lib/utils'\r\nimport { Activity } from '@/lib/strava/types'\r\nimport { Button } from '@/components/ui/button'\r\n\r\ninterface ActivitiesDashboardProps {\r\n  userId: string // Changed from accessToken to userId for database queries\r\n}\r\n\r\nexport function ActivitiesDashboard({ userId }: ActivitiesDashboardProps) {\r\n  // Use database instead of API - much faster and no rate limits!\r\n  const { \r\n    data: allActivities, \r\n    isLoading, \r\n    error,\r\n    refetch,\r\n    isRefetching \r\n  } = useUserActivities(userId)\r\n\r\n  // Client-side filtering to get recent activities (last 10)\r\n  const activities = allActivities?.slice(0, 10) || []\r\n\r\n  // Format duration from seconds to readable format\r\n  const formatDuration = (seconds: number): string => {\r\n    const hours = Math.floor(seconds / 3600)\r\n    const minutes = Math.floor((seconds % 3600) / 60)\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`\r\n    }\r\n    return `${minutes}m`\r\n  }\r\n\r\n  const { preferences } = useUnitPreferences()\r\n  \r\n  // Format distance from meters to km/miles\r\n  const formatDistanceWithUnits = (meters: number): string => {\r\n    return formatDistance(meters, preferences.distance)\r\n  }\r\n\r\n  // Format speed from m/s to km/h or mph\r\n  const formatSpeed = (metersPerSecond: number): string => {\r\n    const kmh = metersPerSecond * 3.6\r\n    if (preferences.distance === 'miles') {\r\n      const mph = kmh * 0.621371\r\n      return `${mph.toFixed(1)} mph`\r\n    }\r\n    return `${kmh.toFixed(1)} km/h`\r\n  }\r\n\r\n  // Format date to readable format\r\n  const formatDate = (dateString: string): string => {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    })\r\n  }\r\n\r\n  // Get activity type color - handle both sport_type and activity_type\r\n  const getActivityTypeColor = (activity: Activity): string => {\r\n    const type = (activity.sport_type || activity.activity_type || '').toLowerCase()\r\n    switch (type) {\r\n      case 'ride':\r\n      case 'virtualride':\r\n        return 'bg-blue-100 text-blue-800'\r\n      case 'run':\r\n        return 'bg-green-100 text-green-800'\r\n      case 'swim':\r\n        return 'bg-cyan-100 text-cyan-800'\r\n      case 'hike':\r\n        return 'bg-orange-100 text-orange-800'\r\n      case 'walk':\r\n        return 'bg-yellow-100 text-yellow-800'\r\n      default:\r\n        return 'bg-gray-100 text-gray-800'\r\n    }\r\n  }\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Loader2 className=\"h-5 w-5 animate-spin\" />\r\n            Recent Activities\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Loading your latest activities from database...\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"animate-pulse\">\r\n                <div className=\"flex items-center space-x-4 p-4 border rounded-lg\">\r\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\r\n                  <div className=\"flex-1 space-y-2\">\r\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\r\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <AlertCircle className=\"h-5 w-5 text-red-500\" />\r\n            Recent Activities\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Unable to load your activities from database\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Alert variant=\"destructive\">\r\n            <AlertCircle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              {error instanceof Error ? error.message : 'Failed to load activities from database'}\r\n            </AlertDescription>\r\n          </Alert>\r\n          <div className=\"mt-4 space-y-2\">\r\n            <Button \r\n              variant=\"outline\" \r\n              onClick={() => refetch()}\r\n              disabled={isRefetching}\r\n            >\r\n              {isRefetching ? (\r\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n              ) : (\r\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n              )}\r\n              Try Again\r\n            </Button>\r\n            <p className=\"text-sm text-blue-600\">\r\n              💡 Try syncing your Strava data to populate the database.\r\n            </p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  // Empty state\r\n  if (!activities || activities.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <ActivityIcon className=\"h-5 w-5\" />\r\n            Recent Activities\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Your latest activities from database\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-center py-8\">\r\n            <ActivityIcon className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No activities found</h3>\r\n            <div className=\"space-y-2\">\r\n              <p className=\"text-gray-500\">\r\n                No activities found in your database.\r\n              </p>\r\n              <p className=\"text-sm text-blue-600\">\r\n                💡 Click &quot;Sync Strava Data&quot; to load your activities from Strava.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  // Success state with activities\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <ActivityIcon className=\"h-5 w-5\" />\r\n              Recent Activities\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Your latest {activities.length} activities from database\r\n            </CardDescription>\r\n            <div className=\"text-xs text-green-600 mt-1\">\r\n              📊 Database source ({allActivities?.length || 0} total activities)\r\n            </div>\r\n          </div>\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            onClick={() => refetch()}\r\n            disabled={isRefetching}\r\n          >\r\n            {isRefetching ? (\r\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n            ) : (\r\n              <RefreshCw className=\"h-4 w-4\" />\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {activities.map((activity) => {\r\n            const activityType = activity.sport_type || activity.activity_type || 'Activity'\r\n            \r\n            return (\r\n              <div key={activity.strava_activity_id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                      <Badge variant=\"secondary\" className={getActivityTypeColor(activity)}>\r\n                        {activityType}\r\n                      </Badge>\r\n                      <h3 className=\"font-semibold text-lg truncate\">{activity.name}</h3>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                      {/* Distance */}\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <MapPin className=\"h-4 w-4 text-gray-500\" />\r\n                        <span>{formatDistanceWithUnits(activity.distance)}</span>\r\n                      </div>\r\n                      \r\n                      {/* Duration */}\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Timer className=\"h-4 w-4 text-gray-500\" />\r\n                        <span>{formatDuration(activity.moving_time)}</span>\r\n                      </div>\r\n                      \r\n                      {/* Heart Rate */}\r\n                      {activity.average_heartrate && (\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Heart className=\"h-4 w-4 text-red-500\" />\r\n                          <span>{Math.round(activity.average_heartrate)} bpm</span>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {/* Power */}\r\n                      {activity.average_watts && (\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Zap className=\"h-4 w-4 text-yellow-500\" />\r\n                          <span>{Math.round(activity.average_watts)}w</span>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {/* Speed */}\r\n                      {activity.average_speed && (\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <ActivityIcon className=\"h-4 w-4 text-blue-500\" />\r\n                          <span>{formatSpeed(activity.average_speed)}</span>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {/* Elevation */}\r\n                      {activity.total_elevation_gain && activity.total_elevation_gain > 0 && (\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <span className=\"text-gray-500\">↗</span>\r\n                          <span>{activity.total_elevation_gain}m</span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-right text-sm text-gray-500 ml-4\">\r\n                    <div className=\"flex items-center gap-1 mb-1\">\r\n                      <Calendar className=\"h-4 w-4\" />\r\n                      <span>{formatDate(activity.start_date_local)}</span>\r\n                    </div>\r\n                    {activity.kudos_count && activity.kudos_count > 0 && (\r\n                      <div className=\"text-xs\">❤️ {activity.kudos_count}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n} "],"names":["ActivitiesDashboard","userId","data","allActivities","isLoading","error","refetch","isRefetching","useUserActivities","activities","slice","formatDuration","seconds","hours","Math","floor","minutes","preferences","useUnitPreferences","formatDistanceWithUnits","meters","formatDistance","distance","formatSpeed","metersPerSecond","kmh","mph","toFixed","formatDate","dateString","date","Date","toLocaleDateString","month","day","hour","minute","getActivityTypeColor","activity","type","sport_type","activity_type","toLowerCase","Card","CardHeader","CardTitle","className","Loader2","CardDescription","CardContent","div","Array","map","_","i","AlertCircle","Alert","variant","AlertDescription","Error","message","Button","onClick","disabled","RefreshCw","p","length","ActivityIcon","h3","size","activityType","Badge","name","MapPin","span","Timer","moving_time","average_heartrate","Heart","round","average_watts","Zap","average_speed","total_elevation_gain","Calendar","start_date_local","kudos_count","strava_activity_id"],"mappings":"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"}