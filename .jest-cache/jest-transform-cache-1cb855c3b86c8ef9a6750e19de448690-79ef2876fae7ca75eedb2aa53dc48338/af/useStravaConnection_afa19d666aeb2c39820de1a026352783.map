{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\hooks\\strava\\useStravaConnection.ts"],"sourcesContent":["import { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useCallback } from 'react';\r\nimport { useAuth } from '@/providers/AuthProvider';\r\nimport { StravaAuth } from '@/lib/strava/auth';\r\n\r\nexport interface StravaConnectionStatus {\r\n  connected: boolean;\r\n  athlete?: {\r\n    id: number;\r\n    firstname?: string;\r\n    lastname?: string;\r\n    profile?: string;\r\n  };\r\n  expiresAt?: string;\r\n}\r\n\r\nexport interface UseStravaConnectionReturn {\r\n  connectionStatus: StravaConnectionStatus | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  refreshStatus: () => Promise<void>;\r\n  disconnect: () => Promise<void>;\r\n}\r\n\r\nconst STRAVA_CONNECTION_QUERY_KEY = 'strava-connection';\r\n\r\n/**\r\n * Hook to manage Strava connection status\r\n * Uses React Query for better caching and state management\r\n */\r\nexport function useStravaConnection(): UseStravaConnectionReturn {\r\n  const { user } = useAuth();\r\n  const queryClient = useQueryClient();\r\n\r\n  const {\r\n    data: connectionStatus,\r\n    isLoading,\r\n    error: queryError,\r\n    refetch,\r\n  } = useQuery({\r\n    queryKey: [STRAVA_CONNECTION_QUERY_KEY, user?.id],\r\n    queryFn: async () => {\r\n      if (!user) return null;\r\n      \r\n      const stravaAuth = new StravaAuth(false);\r\n      return await stravaAuth.getConnectionStatus(user.id);\r\n    },\r\n    enabled: !!user,\r\n    staleTime: 2 * 60 * 1000, // 2 minutes - longer to prevent frequent checks\r\n    gcTime: 15 * 60 * 1000, // 15 minutes - longer cache retention\r\n    refetchOnWindowFocus: false, // Prevent refetch on window focus which might cause disconnected flash\r\n    refetchOnReconnect: false, // Prevent unnecessary refetch on network reconnect\r\n  });\r\n\r\n  const refreshStatus = useCallback(async () => {\r\n    await queryClient.invalidateQueries({ \r\n      queryKey: [STRAVA_CONNECTION_QUERY_KEY, user?.id] \r\n    });\r\n    await refetch();\r\n  }, [queryClient, user?.id, refetch]);\r\n\r\n  const disconnect = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const stravaAuth = new StravaAuth(false);\r\n      await stravaAuth.disconnectUser(user.id);\r\n      \r\n      // Immediately update the cache to reflect disconnection\r\n      queryClient.setQueryData(\r\n        [STRAVA_CONNECTION_QUERY_KEY, user.id], \r\n        { connected: false }\r\n      );\r\n      \r\n      // Also invalidate to force a fresh fetch\r\n      await queryClient.invalidateQueries({ \r\n        queryKey: [STRAVA_CONNECTION_QUERY_KEY, user.id] \r\n      });\r\n    } catch (err) {\r\n      const errorMsg = err instanceof Error ? err.message : 'Failed to disconnect';\r\n      console.error('Error disconnecting from Strava:', err);\r\n      throw new Error(errorMsg);\r\n    }\r\n  }, [user, queryClient]);\r\n\r\n  const error = queryError ? \r\n    (queryError instanceof Error ? queryError.message : 'Failed to check connection status') : \r\n    null;\r\n\r\n  return {\r\n    connectionStatus: connectionStatus || null,\r\n    isLoading,\r\n    error,\r\n    refreshStatus,\r\n    disconnect,\r\n  };\r\n}\r\n\r\n// Export the query key for use in other hooks\r\nexport { STRAVA_CONNECTION_QUERY_KEY }; "],"names":["STRAVA_CONNECTION_QUERY_KEY","useStravaConnection","user","useAuth","queryClient","useQueryClient","data","connectionStatus","isLoading","error","queryError","refetch","useQuery","queryKey","id","queryFn","stravaAuth","StravaAuth","getConnectionStatus","enabled","staleTime","gcTime","refetchOnWindowFocus","refetchOnReconnect","refreshStatus","useCallback","invalidateQueries","disconnect","disconnectUser","setQueryData","connected","err","errorMsg","Error","message","console"],"mappings":";;;;;;;;;;;IAmGSA,2BAA2B;eAA3BA;;IArEOC,mBAAmB;eAAnBA;;;4BA9ByB;uBACb;8BACJ;sBACG;AAqB3B,MAAMD,8BAA8B;AAM7B,SAASC;IACd,MAAM,EAAEC,IAAI,EAAE,GAAGC,IAAAA,qBAAO;IACxB,MAAMC,cAAcC,IAAAA,0BAAc;IAElC,MAAM,EACJC,MAAMC,gBAAgB,EACtBC,SAAS,EACTC,OAAOC,UAAU,EACjBC,OAAO,EACR,GAAGC,IAAAA,oBAAQ,EAAC;QACXC,UAAU;YAACb;YAA6BE,MAAMY;SAAG;QACjDC,SAAS;YACP,IAAI,CAACb,MAAM,OAAO;YAElB,MAAMc,aAAa,IAAIC,gBAAU,CAAC;YAClC,OAAO,MAAMD,WAAWE,mBAAmB,CAAChB,KAAKY,EAAE;QACrD;QACAK,SAAS,CAAC,CAACjB;QACXkB,WAAW,IAAI,KAAK;QACpBC,QAAQ,KAAK,KAAK;QAClBC,sBAAsB;QACtBC,oBAAoB;IACtB;IAEA,MAAMC,gBAAgBC,IAAAA,kBAAW,EAAC;QAChC,MAAMrB,YAAYsB,iBAAiB,CAAC;YAClCb,UAAU;gBAACb;gBAA6BE,MAAMY;aAAG;QACnD;QACA,MAAMH;IACR,GAAG;QAACP;QAAaF,MAAMY;QAAIH;KAAQ;IAEnC,MAAMgB,aAAaF,IAAAA,kBAAW,EAAC;QAC7B,IAAI,CAACvB,MAAM;QAEX,IAAI;YACF,MAAMc,aAAa,IAAIC,gBAAU,CAAC;YAClC,MAAMD,WAAWY,cAAc,CAAC1B,KAAKY,EAAE;YAEvC,wDAAwD;YACxDV,YAAYyB,YAAY,CACtB;gBAAC7B;gBAA6BE,KAAKY,EAAE;aAAC,EACtC;gBAAEgB,WAAW;YAAM;YAGrB,yCAAyC;YACzC,MAAM1B,YAAYsB,iBAAiB,CAAC;gBAClCb,UAAU;oBAACb;oBAA6BE,KAAKY,EAAE;iBAAC;YAClD;QACF,EAAE,OAAOiB,KAAK;YACZ,MAAMC,WAAWD,eAAeE,QAAQF,IAAIG,OAAO,GAAG;YACtDC,QAAQ1B,KAAK,CAAC,oCAAoCsB;YAClD,MAAM,IAAIE,MAAMD;QAClB;IACF,GAAG;QAAC9B;QAAME;KAAY;IAEtB,MAAMK,QAAQC,aACXA,sBAAsBuB,QAAQvB,WAAWwB,OAAO,GAAG,sCACpD;IAEF,OAAO;QACL3B,kBAAkBA,oBAAoB;QACtCC;QACAC;QACAe;QACAG;IACF;AACF"}