8d541bc346728bd4f952bac34c8bac06
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    STRAVA_CONNECTION_QUERY_KEY: function() {
        return STRAVA_CONNECTION_QUERY_KEY;
    },
    useStravaConnection: function() {
        return useStravaConnection;
    }
});
const _reactquery = require("@tanstack/react-query");
const _react = require("react");
const _AuthProvider = require("../../providers/AuthProvider");
const _auth = require("../../lib/strava/auth");
const STRAVA_CONNECTION_QUERY_KEY = 'strava-connection';
function useStravaConnection() {
    const { user } = (0, _AuthProvider.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const { data: connectionStatus, isLoading, error: queryError, refetch } = (0, _reactquery.useQuery)({
        queryKey: [
            STRAVA_CONNECTION_QUERY_KEY,
            user?.id
        ],
        queryFn: async ()=>{
            if (!user) return null;
            const stravaAuth = new _auth.StravaAuth(false);
            return await stravaAuth.getConnectionStatus(user.id);
        },
        enabled: !!user,
        staleTime: 2 * 60 * 1000,
        gcTime: 15 * 60 * 1000,
        refetchOnWindowFocus: false,
        refetchOnReconnect: false
    });
    const refreshStatus = (0, _react.useCallback)(async ()=>{
        await queryClient.invalidateQueries({
            queryKey: [
                STRAVA_CONNECTION_QUERY_KEY,
                user?.id
            ]
        });
        await refetch();
    }, [
        queryClient,
        user?.id,
        refetch
    ]);
    const disconnect = (0, _react.useCallback)(async ()=>{
        if (!user) return;
        try {
            const stravaAuth = new _auth.StravaAuth(false);
            await stravaAuth.disconnectUser(user.id);
            // Immediately update the cache to reflect disconnection
            queryClient.setQueryData([
                STRAVA_CONNECTION_QUERY_KEY,
                user.id
            ], {
                connected: false
            });
            // Also invalidate to force a fresh fetch
            await queryClient.invalidateQueries({
                queryKey: [
                    STRAVA_CONNECTION_QUERY_KEY,
                    user.id
                ]
            });
        } catch (err) {
            const errorMsg = err instanceof Error ? err.message : 'Failed to disconnect';
            console.error('Error disconnecting from Strava:', err);
            throw new Error(errorMsg);
        }
    }, [
        user,
        queryClient
    ]);
    const error = queryError ? queryError instanceof Error ? queryError.message : 'Failed to check connection status' : null;
    return {
        connectionStatus: connectionStatus || null,
        isLoading,
        error,
        refreshStatus,
        disconnect
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcdGlhbWFcXERlc2t0b3BcXENvZGluZ1xcZW5kdXJvcmV2YW1wXFxob29rc1xcc3RyYXZhXFx1c2VTdHJhdmFDb25uZWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVF1ZXJ5LCB1c2VRdWVyeUNsaWVudCB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnQC9wcm92aWRlcnMvQXV0aFByb3ZpZGVyJztcclxuaW1wb3J0IHsgU3RyYXZhQXV0aCB9IGZyb20gJ0AvbGliL3N0cmF2YS9hdXRoJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyYXZhQ29ubmVjdGlvblN0YXR1cyB7XHJcbiAgY29ubmVjdGVkOiBib29sZWFuO1xyXG4gIGF0aGxldGU/OiB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgZmlyc3RuYW1lPzogc3RyaW5nO1xyXG4gICAgbGFzdG5hbWU/OiBzdHJpbmc7XHJcbiAgICBwcm9maWxlPzogc3RyaW5nO1xyXG4gIH07XHJcbiAgZXhwaXJlc0F0Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVN0cmF2YUNvbm5lY3Rpb25SZXR1cm4ge1xyXG4gIGNvbm5lY3Rpb25TdGF0dXM6IFN0cmF2YUNvbm5lY3Rpb25TdGF0dXMgfCBudWxsO1xyXG4gIGlzTG9hZGluZzogYm9vbGVhbjtcclxuICBlcnJvcjogc3RyaW5nIHwgbnVsbDtcclxuICByZWZyZXNoU3RhdHVzOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIGRpc2Nvbm5lY3Q6ICgpID0+IFByb21pc2U8dm9pZD47XHJcbn1cclxuXHJcbmNvbnN0IFNUUkFWQV9DT05ORUNUSU9OX1FVRVJZX0tFWSA9ICdzdHJhdmEtY29ubmVjdGlvbic7XHJcblxyXG4vKipcclxuICogSG9vayB0byBtYW5hZ2UgU3RyYXZhIGNvbm5lY3Rpb24gc3RhdHVzXHJcbiAqIFVzZXMgUmVhY3QgUXVlcnkgZm9yIGJldHRlciBjYWNoaW5nIGFuZCBzdGF0ZSBtYW5hZ2VtZW50XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RyYXZhQ29ubmVjdGlvbigpOiBVc2VTdHJhdmFDb25uZWN0aW9uUmV0dXJuIHtcclxuICBjb25zdCB7IHVzZXIgfSA9IHVzZUF1dGgoKTtcclxuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGRhdGE6IGNvbm5lY3Rpb25TdGF0dXMsXHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgICBlcnJvcjogcXVlcnlFcnJvcixcclxuICAgIHJlZmV0Y2gsXHJcbiAgfSA9IHVzZVF1ZXJ5KHtcclxuICAgIHF1ZXJ5S2V5OiBbU1RSQVZBX0NPTk5FQ1RJT05fUVVFUllfS0VZLCB1c2VyPy5pZF0sXHJcbiAgICBxdWVyeUZuOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGlmICghdXNlcikgcmV0dXJuIG51bGw7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBzdHJhdmFBdXRoID0gbmV3IFN0cmF2YUF1dGgoZmFsc2UpO1xyXG4gICAgICByZXR1cm4gYXdhaXQgc3RyYXZhQXV0aC5nZXRDb25uZWN0aW9uU3RhdHVzKHVzZXIuaWQpO1xyXG4gICAgfSxcclxuICAgIGVuYWJsZWQ6ICEhdXNlcixcclxuICAgIHN0YWxlVGltZTogMiAqIDYwICogMTAwMCwgLy8gMiBtaW51dGVzIC0gbG9uZ2VyIHRvIHByZXZlbnQgZnJlcXVlbnQgY2hlY2tzXHJcbiAgICBnY1RpbWU6IDE1ICogNjAgKiAxMDAwLCAvLyAxNSBtaW51dGVzIC0gbG9uZ2VyIGNhY2hlIHJldGVudGlvblxyXG4gICAgcmVmZXRjaE9uV2luZG93Rm9jdXM6IGZhbHNlLCAvLyBQcmV2ZW50IHJlZmV0Y2ggb24gd2luZG93IGZvY3VzIHdoaWNoIG1pZ2h0IGNhdXNlIGRpc2Nvbm5lY3RlZCBmbGFzaFxyXG4gICAgcmVmZXRjaE9uUmVjb25uZWN0OiBmYWxzZSwgLy8gUHJldmVudCB1bm5lY2Vzc2FyeSByZWZldGNoIG9uIG5ldHdvcmsgcmVjb25uZWN0XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHJlZnJlc2hTdGF0dXMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IFxyXG4gICAgICBxdWVyeUtleTogW1NUUkFWQV9DT05ORUNUSU9OX1FVRVJZX0tFWSwgdXNlcj8uaWRdIFxyXG4gICAgfSk7XHJcbiAgICBhd2FpdCByZWZldGNoKCk7XHJcbiAgfSwgW3F1ZXJ5Q2xpZW50LCB1c2VyPy5pZCwgcmVmZXRjaF0pO1xyXG5cclxuICBjb25zdCBkaXNjb25uZWN0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKCF1c2VyKSByZXR1cm47XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RyYXZhQXV0aCA9IG5ldyBTdHJhdmFBdXRoKGZhbHNlKTtcclxuICAgICAgYXdhaXQgc3RyYXZhQXV0aC5kaXNjb25uZWN0VXNlcih1c2VyLmlkKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEltbWVkaWF0ZWx5IHVwZGF0ZSB0aGUgY2FjaGUgdG8gcmVmbGVjdCBkaXNjb25uZWN0aW9uXHJcbiAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShcclxuICAgICAgICBbU1RSQVZBX0NPTk5FQ1RJT05fUVVFUllfS0VZLCB1c2VyLmlkXSwgXHJcbiAgICAgICAgeyBjb25uZWN0ZWQ6IGZhbHNlIH1cclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEFsc28gaW52YWxpZGF0ZSB0byBmb3JjZSBhIGZyZXNoIGZldGNoXHJcbiAgICAgIGF3YWl0IHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHsgXHJcbiAgICAgICAgcXVlcnlLZXk6IFtTVFJBVkFfQ09OTkVDVElPTl9RVUVSWV9LRVksIHVzZXIuaWRdIFxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zdCBlcnJvck1zZyA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGRpc2Nvbm5lY3QnO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkaXNjb25uZWN0aW5nIGZyb20gU3RyYXZhOicsIGVycik7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XHJcbiAgICB9XHJcbiAgfSwgW3VzZXIsIHF1ZXJ5Q2xpZW50XSk7XHJcblxyXG4gIGNvbnN0IGVycm9yID0gcXVlcnlFcnJvciA/IFxyXG4gICAgKHF1ZXJ5RXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHF1ZXJ5RXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gY2hlY2sgY29ubmVjdGlvbiBzdGF0dXMnKSA6IFxyXG4gICAgbnVsbDtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNvbm5lY3Rpb25TdGF0dXM6IGNvbm5lY3Rpb25TdGF0dXMgfHwgbnVsbCxcclxuICAgIGlzTG9hZGluZyxcclxuICAgIGVycm9yLFxyXG4gICAgcmVmcmVzaFN0YXR1cyxcclxuICAgIGRpc2Nvbm5lY3QsXHJcbiAgfTtcclxufVxyXG5cclxuLy8gRXhwb3J0IHRoZSBxdWVyeSBrZXkgZm9yIHVzZSBpbiBvdGhlciBob29rc1xyXG5leHBvcnQgeyBTVFJBVkFfQ09OTkVDVElPTl9RVUVSWV9LRVkgfTsgIl0sIm5hbWVzIjpbIlNUUkFWQV9DT05ORUNUSU9OX1FVRVJZX0tFWSIsInVzZVN0cmF2YUNvbm5lY3Rpb24iLCJ1c2VyIiwidXNlQXV0aCIsInF1ZXJ5Q2xpZW50IiwidXNlUXVlcnlDbGllbnQiLCJkYXRhIiwiY29ubmVjdGlvblN0YXR1cyIsImlzTG9hZGluZyIsImVycm9yIiwicXVlcnlFcnJvciIsInJlZmV0Y2giLCJ1c2VRdWVyeSIsInF1ZXJ5S2V5IiwiaWQiLCJxdWVyeUZuIiwic3RyYXZhQXV0aCIsIlN0cmF2YUF1dGgiLCJnZXRDb25uZWN0aW9uU3RhdHVzIiwiZW5hYmxlZCIsInN0YWxlVGltZSIsImdjVGltZSIsInJlZmV0Y2hPbldpbmRvd0ZvY3VzIiwicmVmZXRjaE9uUmVjb25uZWN0IiwicmVmcmVzaFN0YXR1cyIsInVzZUNhbGxiYWNrIiwiaW52YWxpZGF0ZVF1ZXJpZXMiLCJkaXNjb25uZWN0IiwiZGlzY29ubmVjdFVzZXIiLCJzZXRRdWVyeURhdGEiLCJjb25uZWN0ZWQiLCJlcnIiLCJlcnJvck1zZyIsIkVycm9yIiwibWVzc2FnZSIsImNvbnNvbGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBbUdTQSwyQkFBMkI7ZUFBM0JBOztJQXJFT0MsbUJBQW1CO2VBQW5CQTs7OzRCQTlCeUI7dUJBQ2I7OEJBQ0o7c0JBQ0c7QUFxQjNCLE1BQU1ELDhCQUE4QjtBQU03QixTQUFTQztJQUNkLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdDLElBQUFBLHFCQUFPO0lBQ3hCLE1BQU1DLGNBQWNDLElBQUFBLDBCQUFjO0lBRWxDLE1BQU0sRUFDSkMsTUFBTUMsZ0JBQWdCLEVBQ3RCQyxTQUFTLEVBQ1RDLE9BQU9DLFVBQVUsRUFDakJDLE9BQU8sRUFDUixHQUFHQyxJQUFBQSxvQkFBUSxFQUFDO1FBQ1hDLFVBQVU7WUFBQ2I7WUFBNkJFLE1BQU1ZO1NBQUc7UUFDakRDLFNBQVM7WUFDUCxJQUFJLENBQUNiLE1BQU0sT0FBTztZQUVsQixNQUFNYyxhQUFhLElBQUlDLGdCQUFVLENBQUM7WUFDbEMsT0FBTyxNQUFNRCxXQUFXRSxtQkFBbUIsQ0FBQ2hCLEtBQUtZLEVBQUU7UUFDckQ7UUFDQUssU0FBUyxDQUFDLENBQUNqQjtRQUNYa0IsV0FBVyxJQUFJLEtBQUs7UUFDcEJDLFFBQVEsS0FBSyxLQUFLO1FBQ2xCQyxzQkFBc0I7UUFDdEJDLG9CQUFvQjtJQUN0QjtJQUVBLE1BQU1DLGdCQUFnQkMsSUFBQUEsa0JBQVcsRUFBQztRQUNoQyxNQUFNckIsWUFBWXNCLGlCQUFpQixDQUFDO1lBQ2xDYixVQUFVO2dCQUFDYjtnQkFBNkJFLE1BQU1ZO2FBQUc7UUFDbkQ7UUFDQSxNQUFNSDtJQUNSLEdBQUc7UUFBQ1A7UUFBYUYsTUFBTVk7UUFBSUg7S0FBUTtJQUVuQyxNQUFNZ0IsYUFBYUYsSUFBQUEsa0JBQVcsRUFBQztRQUM3QixJQUFJLENBQUN2QixNQUFNO1FBRVgsSUFBSTtZQUNGLE1BQU1jLGFBQWEsSUFBSUMsZ0JBQVUsQ0FBQztZQUNsQyxNQUFNRCxXQUFXWSxjQUFjLENBQUMxQixLQUFLWSxFQUFFO1lBRXZDLHdEQUF3RDtZQUN4RFYsWUFBWXlCLFlBQVksQ0FDdEI7Z0JBQUM3QjtnQkFBNkJFLEtBQUtZLEVBQUU7YUFBQyxFQUN0QztnQkFBRWdCLFdBQVc7WUFBTTtZQUdyQix5Q0FBeUM7WUFDekMsTUFBTTFCLFlBQVlzQixpQkFBaUIsQ0FBQztnQkFDbENiLFVBQVU7b0JBQUNiO29CQUE2QkUsS0FBS1ksRUFBRTtpQkFBQztZQUNsRDtRQUNGLEVBQUUsT0FBT2lCLEtBQUs7WUFDWixNQUFNQyxXQUFXRCxlQUFlRSxRQUFRRixJQUFJRyxPQUFPLEdBQUc7WUFDdERDLFFBQVExQixLQUFLLENBQUMsb0NBQW9Dc0I7WUFDbEQsTUFBTSxJQUFJRSxNQUFNRDtRQUNsQjtJQUNGLEdBQUc7UUFBQzlCO1FBQU1FO0tBQVk7SUFFdEIsTUFBTUssUUFBUUMsYUFDWEEsc0JBQXNCdUIsUUFBUXZCLFdBQVd3QixPQUFPLEdBQUcsc0NBQ3BEO0lBRUYsT0FBTztRQUNMM0Isa0JBQWtCQSxvQkFBb0I7UUFDdENDO1FBQ0FDO1FBQ0FlO1FBQ0FHO0lBQ0Y7QUFDRiJ9