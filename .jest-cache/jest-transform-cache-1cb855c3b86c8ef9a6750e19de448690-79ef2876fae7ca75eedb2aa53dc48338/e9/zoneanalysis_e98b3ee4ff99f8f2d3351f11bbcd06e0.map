{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\lib\\training\\zone-analysis.ts"],"sourcesContent":["import { createClient } from '@/lib/supabase/server'\r\n\r\nexport interface HeartRateStats {\r\n  maxHeartRate: number | null\r\n  averageHeartRate: number | null\r\n  restingHeartRate: number | null // Can be estimated from lowest recorded\r\n  activitiesWithHR: number\r\n  totalActivities: number\r\n  hrDataQuality: 'excellent' | 'good' | 'fair' | 'poor' | 'none'\r\n  percentiles: {\r\n    p50: number | null // Median\r\n    p75: number | null\r\n    p85: number | null\r\n    p90: number | null\r\n    p95: number | null\r\n    p99: number | null\r\n  }\r\n}\r\n\r\nexport interface TrainingZone {\r\n  number: number\r\n  name: string\r\n  description: string\r\n  minHR: number\r\n  maxHR: number\r\n  minPercent: number\r\n  maxPercent: number\r\n  color: string\r\n}\r\n\r\nexport interface ZoneModel {\r\n  name: string\r\n  description: string\r\n  zones: TrainingZone[]\r\n}\r\n\r\nexport interface SportSpecificAnalysis {\r\n  sport: string\r\n  maxHR: number | null\r\n  avgHR: number | null\r\n  activityCount: number\r\n  suggestedZones: TrainingZone[]\r\n}\r\n\r\nexport interface ZoneAnalysisResult {\r\n  overall: HeartRateStats\r\n  sportSpecific: SportSpecificAnalysis[]\r\n  suggestedZoneModel: ZoneModel\r\n  alternativeModels: ZoneModel[]\r\n  recommendations: string[]\r\n  confidence: 'high' | 'medium' | 'low'\r\n  needsMoreData: boolean\r\n}\r\n\r\nexport class TrainingZoneAnalysis {\r\n  private supabase\r\n\r\n  constructor() {\r\n    this.supabase = createClient()\r\n  }\r\n\r\n  /**\r\n   * Main analysis function - analyzes user's activities and suggests training zones\r\n   */\r\n  async analyzeUserZones(userId: string): Promise<ZoneAnalysisResult> {\r\n    console.log(`üîç Starting zone analysis for user: ${userId}`)\r\n\r\n    try {\r\n      // 1. Get heart rate statistics from activities\r\n      const hrStats = await this.getHeartRateStatistics(userId)\r\n      console.log(`üìä HR Stats:`, hrStats)\r\n\r\n      // 2. Get sport-specific analysis\r\n      const sportAnalysis = await this.getSportSpecificAnalysis(userId)\r\n      console.log(`üèÉ‚Äç‚ôÇÔ∏è Sport analysis:`, sportAnalysis)\r\n\r\n      // 3. Generate zone recommendations\r\n      const recommendations = this.generateRecommendations(hrStats, sportAnalysis)\r\n      \r\n      // 4. Create zone models\r\n      const zoneModels = this.createZoneModels(hrStats.maxHeartRate)\r\n      \r\n      // 5. Select best zone model\r\n      const suggestedModel = this.selectBestZoneModel(zoneModels)\r\n\r\n      // 6. Determine confidence level\r\n      const confidence = this.calculateConfidence(hrStats)\r\n\r\n      return {\r\n        overall: hrStats,\r\n        sportSpecific: sportAnalysis,\r\n        suggestedZoneModel: suggestedModel,\r\n        alternativeModels: zoneModels.filter(m => m.name !== suggestedModel.name),\r\n        recommendations,\r\n        confidence,\r\n        needsMoreData: hrStats.hrDataQuality === 'poor' || hrStats.hrDataQuality === 'none'\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Zone analysis failed:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze heart rate data from user's activities\r\n   */\r\n  private async getHeartRateStatistics(userId: string): Promise<HeartRateStats> {\r\n    const supabase = await this.supabase\r\n\r\n    // Get all activities with heart rate data\r\n    const { data: activities, error } = await supabase\r\n      .from('activities')\r\n      .select('average_heartrate, max_heartrate, has_heartrate, sport_type')\r\n      .eq('user_id', userId)\r\n      .order('start_date_local', { ascending: false })\r\n\r\n    if (error) {\r\n      throw error\r\n    }\r\n\r\n    if (!activities || activities.length === 0) {\r\n      return this.getEmptyHeartRateStats()\r\n    }\r\n\r\n    // Filter activities with heart rate data\r\n    const hrActivities = activities.filter(a => a.has_heartrate && a.average_heartrate)\r\n    const totalActivities = activities.length\r\n    const activitiesWithHR = hrActivities.length\r\n\r\n    if (hrActivities.length === 0) {\r\n      return {\r\n        ...this.getEmptyHeartRateStats(),\r\n        totalActivities,\r\n        activitiesWithHR: 0\r\n      }\r\n    }\r\n\r\n    // Calculate statistics\r\n    const maxHeartRate = Math.max(...hrActivities.map(a => a.max_heartrate || a.average_heartrate))\r\n    const avgHeartRates = hrActivities.map(a => a.average_heartrate).filter(hr => hr > 0)\r\n    const averageHeartRate = avgHeartRates.reduce((sum, hr) => sum + hr, 0) / avgHeartRates.length\r\n\r\n    // Estimate resting HR (lowest 5th percentile of average HRs)\r\n    const sortedAvgHR = avgHeartRates.sort((a, b) => a - b)\r\n    const restingHeartRate = sortedAvgHR[Math.floor(sortedAvgHR.length * 0.05)] || null\r\n\r\n    // Calculate percentiles of max heart rates\r\n    const maxHRs = hrActivities.map(a => a.max_heartrate || a.average_heartrate).sort((a, b) => a - b)\r\n    const percentiles = {\r\n      p50: this.getPercentile(maxHRs, 50),\r\n      p75: this.getPercentile(maxHRs, 75),\r\n      p85: this.getPercentile(maxHRs, 85),\r\n      p90: this.getPercentile(maxHRs, 90),\r\n      p95: this.getPercentile(maxHRs, 95),\r\n      p99: this.getPercentile(maxHRs, 99)\r\n    }\r\n\r\n    // Determine data quality\r\n    const hrDataQuality = this.assessDataQuality(activitiesWithHR, totalActivities)\r\n\r\n    return {\r\n      maxHeartRate,\r\n      averageHeartRate: Math.round(averageHeartRate),\r\n      restingHeartRate: restingHeartRate ? Math.round(restingHeartRate) : null,\r\n      activitiesWithHR,\r\n      totalActivities,\r\n      hrDataQuality,\r\n      percentiles\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze heart rate patterns by sport type\r\n   */\r\n  private async getSportSpecificAnalysis(userId: string): Promise<SportSpecificAnalysis[]> {\r\n    const supabase = await this.supabase\r\n\r\n    const { data: sportData, error } = await supabase\r\n      .from('activities')\r\n      .select('sport_type, average_heartrate, max_heartrate, has_heartrate')\r\n      .eq('user_id', userId)\r\n      .eq('has_heartrate', true)\r\n      .not('average_heartrate', 'is', null)\r\n\r\n    if (error || !sportData) {\r\n      return []\r\n    }\r\n\r\n    // Group by sport type\r\n    const sportGroups = sportData.reduce((groups, activity) => {\r\n      const sport = this.normalizeSportType(activity.sport_type)\r\n      if (!groups[sport]) groups[sport] = []\r\n      groups[sport].push(activity)\r\n      return groups\r\n    }, {} as Record<string, Array<{ sport_type: string; max_heartrate?: number; average_heartrate?: number }>>)\r\n\r\n    // Analyze each sport\r\n    return Object.entries(sportGroups)\r\n      .filter(([, activities]) => activities.length >= 3) // Minimum 3 activities for analysis\r\n      .map(([sport, activities]) => {\r\n        const heartRates = activities\r\n          .map(a => a.max_heartrate || a.average_heartrate)\r\n          .filter((hr): hr is number => hr !== undefined && hr > 0)\r\n        const maxHR = heartRates.length > 0 ? Math.max(...heartRates) : 0\r\n        \r\n        const avgHRs = activities\r\n          .map(a => a.average_heartrate)\r\n          .filter((hr): hr is number => hr !== undefined && hr > 0)\r\n        const avgHR = avgHRs.length > 0 ? Math.round(avgHRs.reduce((sum, hr) => sum + hr, 0) / avgHRs.length) : 0\r\n        \r\n        return {\r\n          sport,\r\n          maxHR,\r\n          avgHR,\r\n          activityCount: activities.length,\r\n          suggestedZones: this.createZoneModels(maxHR)[0].zones // Use 5-zone model\r\n        }\r\n      })\r\n      .sort((a, b) => b.activityCount - a.activityCount) // Sort by activity count\r\n  }\r\n\r\n  /**\r\n   * Create different zone models based on max heart rate\r\n   */\r\n  public createZoneModels(maxHR: number | null): ZoneModel[] {\r\n    if (!maxHR || maxHR < 120) {\r\n      // Use age-based estimation if no valid max HR\r\n      const estimatedMaxHR = 220 - 30 // Assume 30 years old as default\r\n      maxHR = estimatedMaxHR\r\n    }\r\n\r\n    return [\r\n      this.createFiveZoneModel(maxHR),\r\n      this.createThreeZoneModel(maxHR),\r\n      this.createCoganModel(maxHR)\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * 5-Zone Heart Rate Model (Most common)\r\n   */\r\n  private createFiveZoneModel(maxHR: number): ZoneModel {\r\n    const zones: TrainingZone[] = [\r\n      {\r\n        number: 1,\r\n        name: 'Recovery',\r\n        description: 'Active recovery, very easy effort',\r\n        minPercent: 50,\r\n        maxPercent: 60,\r\n        minHR: Math.round(maxHR * 0.50),\r\n        maxHR: Math.round(maxHR * 0.60),\r\n        color: '#22c55e' // green\r\n      },\r\n      {\r\n        number: 2,\r\n        name: 'Base/Aerobic',\r\n        description: 'Comfortable, conversational pace',\r\n        minPercent: 60,\r\n        maxPercent: 70,\r\n        minHR: Math.round(maxHR * 0.60),\r\n        maxHR: Math.round(maxHR * 0.70),\r\n        color: '#3b82f6' // blue\r\n      },\r\n      {\r\n        number: 3,\r\n        name: 'Tempo',\r\n        description: 'Comfortably hard, moderate effort',\r\n        minPercent: 70,\r\n        maxPercent: 80,\r\n        minHR: Math.round(maxHR * 0.70),\r\n        maxHR: Math.round(maxHR * 0.80),\r\n        color: '#f59e0b' // yellow\r\n      },\r\n      {\r\n        number: 4,\r\n        name: 'Threshold',\r\n        description: 'Hard effort, lactate threshold',\r\n        minPercent: 80,\r\n        maxPercent: 90,\r\n        minHR: Math.round(maxHR * 0.80),\r\n        maxHR: Math.round(maxHR * 0.90),\r\n        color: '#f97316' // orange\r\n      },\r\n      {\r\n        number: 5,\r\n        name: 'VO2 Max',\r\n        description: 'Very hard, maximum effort',\r\n        minPercent: 90,\r\n        maxPercent: 100,\r\n        minHR: Math.round(maxHR * 0.90),\r\n        maxHR: maxHR,\r\n        color: '#ef4444' // red\r\n      }\r\n    ]\r\n\r\n    return {\r\n      name: '5-Zone Model',\r\n      description: 'Classic 5-zone heart rate training model',\r\n      zones\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 3-Zone Simplified Model\r\n   */\r\n  private createThreeZoneModel(maxHR: number): ZoneModel {\r\n    const zones: TrainingZone[] = [\r\n      {\r\n        number: 1,\r\n        name: 'Easy',\r\n        description: 'Easy, aerobic base building',\r\n        minPercent: 50,\r\n        maxPercent: 70,\r\n        minHR: Math.round(maxHR * 0.50),\r\n        maxHR: Math.round(maxHR * 0.70),\r\n        color: '#22c55e'\r\n      },\r\n      {\r\n        number: 2,\r\n        name: 'Moderate',\r\n        description: 'Moderate, tempo efforts',\r\n        minPercent: 70,\r\n        maxPercent: 85,\r\n        minHR: Math.round(maxHR * 0.70),\r\n        maxHR: Math.round(maxHR * 0.85),\r\n        color: '#f59e0b'\r\n      },\r\n      {\r\n        number: 3,\r\n        name: 'Hard',\r\n        description: 'Hard, threshold and VO2 max',\r\n        minPercent: 85,\r\n        maxPercent: 100,\r\n        minHR: Math.round(maxHR * 0.85),\r\n        maxHR: maxHR,\r\n        color: '#ef4444'\r\n      }\r\n    ]\r\n\r\n    return {\r\n      name: '3-Zone Model',\r\n      description: 'Simplified 3-zone model for beginners',\r\n      zones\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Coggan Power-Based Zones Adapted for HR\r\n   */\r\n  private createCoganModel(maxHR: number): ZoneModel {\r\n    const zones: TrainingZone[] = [\r\n      {\r\n        number: 1,\r\n        name: 'Active Recovery',\r\n        description: 'Active recovery, < 68% max HR',\r\n        minPercent: 50,\r\n        maxPercent: 68,\r\n        minHR: Math.round(maxHR * 0.50),\r\n        maxHR: Math.round(maxHR * 0.68),\r\n        color: '#22c55e'\r\n      },\r\n      {\r\n        number: 2,\r\n        name: 'Endurance',\r\n        description: 'Endurance, 69-83% max HR',\r\n        minPercent: 69,\r\n        maxPercent: 83,\r\n        minHR: Math.round(maxHR * 0.69),\r\n        maxHR: Math.round(maxHR * 0.83),\r\n        color: '#3b82f6'\r\n      },\r\n      {\r\n        number: 3,\r\n        name: 'Tempo',\r\n        description: 'Tempo, 84-94% max HR',\r\n        minPercent: 84,\r\n        maxPercent: 94,\r\n        minHR: Math.round(maxHR * 0.84),\r\n        maxHR: Math.round(maxHR * 0.94),\r\n        color: '#f59e0b'\r\n      },\r\n      {\r\n        number: 4,\r\n        name: 'Threshold',\r\n        description: 'Lactate threshold, 95-105% max HR',\r\n        minPercent: 95,\r\n        maxPercent: 105,\r\n        minHR: Math.round(maxHR * 0.95),\r\n        maxHR: Math.min(Math.round(maxHR * 1.05), maxHR),\r\n        color: '#f97316'\r\n      },\r\n      {\r\n        number: 5,\r\n        name: 'VO2 Max',\r\n        description: 'VO2 max, 106%+ max HR',\r\n        minPercent: 106,\r\n        maxPercent: 120,\r\n        minHR: Math.round(maxHR * 1.06),\r\n        maxHR: Math.round(maxHR * 1.20),\r\n        color: '#ef4444'\r\n      }\r\n    ]\r\n\r\n    return {\r\n      name: 'Coggan Model',\r\n      description: 'Coggan-style zones adapted for heart rate',\r\n      zones\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper functions\r\n   */\r\n  private getEmptyHeartRateStats(): HeartRateStats {\r\n    return {\r\n      maxHeartRate: null,\r\n      averageHeartRate: null,\r\n      restingHeartRate: null,\r\n      activitiesWithHR: 0,\r\n      totalActivities: 0,\r\n      hrDataQuality: 'none',\r\n      percentiles: {\r\n        p50: null,\r\n        p75: null,\r\n        p85: null,\r\n        p90: null,\r\n        p95: null,\r\n        p99: null\r\n      }\r\n    }\r\n  }\r\n\r\n  private getPercentile(sortedArray: number[], percentile: number): number | null {\r\n    if (sortedArray.length === 0) return null\r\n    \r\n    // Use linear interpolation method (R-6/Excel method)\r\n    const n = sortedArray.length\r\n    const rank = (percentile / 100) * (n + 1)\r\n    \r\n    if (rank <= 1) return sortedArray[0]\r\n    if (rank >= n) return sortedArray[n - 1]\r\n    \r\n    const lowerIndex = Math.floor(rank) - 1\r\n    const upperIndex = Math.ceil(rank) - 1\r\n    const weight = rank - Math.floor(rank)\r\n    \r\n    return sortedArray[lowerIndex] + weight * (sortedArray[upperIndex] - sortedArray[lowerIndex])\r\n  }\r\n\r\n  private assessDataQuality(hrActivities: number, totalActivities: number): HeartRateStats['hrDataQuality'] {\r\n    const hrPercentage = totalActivities > 0 ? (hrActivities / totalActivities) * 100 : 0\r\n\r\n    if (hrPercentage === 0) return 'none'\r\n    if (hrPercentage < 20 || hrActivities < 5) return 'poor'\r\n    if (hrPercentage < 50 || hrActivities < 10) return 'fair'\r\n    if (hrPercentage < 80 || hrActivities < 20) return 'good'\r\n    return 'excellent'\r\n  }\r\n\r\n  private normalizeSportType(sportType: string): string {\r\n    const sport = sportType.toLowerCase()\r\n    if (sport.includes('run')) return 'Running'\r\n    if (sport.includes('ride') || sport.includes('bike') || sport.includes('cycling')) return 'Cycling'\r\n    if (sport.includes('swim')) return 'Swimming'\r\n    if (sport.includes('walk') || sport.includes('hike')) return 'Walking'\r\n    return sportType\r\n  }\r\n\r\n  private selectBestZoneModel(models: ZoneModel[]): ZoneModel {\r\n    // For now, default to 5-zone model\r\n    // Could be more intelligent based on user data in the future\r\n    return models.find(m => m.name === '5-Zone Model') || models[0]\r\n  }\r\n\r\n  private calculateConfidence(stats: HeartRateStats): 'high' | 'medium' | 'low' {\r\n    if (stats.hrDataQuality === 'excellent' && stats.activitiesWithHR >= 20) return 'high'\r\n    if (stats.hrDataQuality === 'good' && stats.activitiesWithHR >= 10) return 'medium'\r\n    return 'low'\r\n  }\r\n\r\n  private generateRecommendations(stats: HeartRateStats, sportAnalysis: SportSpecificAnalysis[]): string[] {\r\n    const recommendations: string[] = []\r\n\r\n    if (stats.hrDataQuality === 'poor' || stats.hrDataQuality === 'none') {\r\n      recommendations.push('Consider using a heart rate monitor for more activities to improve zone accuracy')\r\n    }\r\n\r\n    if (stats.activitiesWithHR < 10) {\r\n      recommendations.push('More heart rate data will improve zone recommendations')\r\n    }\r\n\r\n    if (sportAnalysis.length > 1) {\r\n      recommendations.push('Consider sport-specific zones as your heart rate patterns vary between activities')\r\n    }\r\n\r\n    if (stats.maxHeartRate && stats.maxHeartRate < 160) {\r\n      recommendations.push('Your max heart rate seems low - consider a max HR test for better accuracy')\r\n    }\r\n\r\n    return recommendations\r\n  }\r\n} "],"names":["TrainingZoneAnalysis","constructor","supabase","createClient","analyzeUserZones","userId","console","log","hrStats","getHeartRateStatistics","sportAnalysis","getSportSpecificAnalysis","recommendations","generateRecommendations","zoneModels","createZoneModels","maxHeartRate","suggestedModel","selectBestZoneModel","confidence","calculateConfidence","overall","sportSpecific","suggestedZoneModel","alternativeModels","filter","m","name","needsMoreData","hrDataQuality","error","data","activities","from","select","eq","order","ascending","length","getEmptyHeartRateStats","hrActivities","a","has_heartrate","average_heartrate","totalActivities","activitiesWithHR","Math","max","map","max_heartrate","avgHeartRates","hr","averageHeartRate","reduce","sum","sortedAvgHR","sort","b","restingHeartRate","floor","maxHRs","percentiles","p50","getPercentile","p75","p85","p90","p95","p99","assessDataQuality","round","sportData","not","sportGroups","groups","activity","sport","normalizeSportType","sport_type","push","Object","entries","heartRates","undefined","maxHR","avgHRs","avgHR","activityCount","suggestedZones","zones","estimatedMaxHR","createFiveZoneModel","createThreeZoneModel","createCoganModel","number","description","minPercent","maxPercent","minHR","color","min","sortedArray","percentile","n","rank","lowerIndex","upperIndex","ceil","weight","hrPercentage","sportType","toLowerCase","includes","models","find","stats"],"mappings":"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"}