{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\lib\\dashboard\\metrics.ts"],"sourcesContent":["import type { Activity } from '@/lib/strava/types'\r\n\r\nexport function calculateWeeklyDistance(activities: Activity[]): { current: number; previous: number; change: number } {\r\n  const now = new Date()\r\n  const currentWeekStart = new Date(now)\r\n  currentWeekStart.setDate(now.getDate() - now.getDay()) // Start of current week (Sunday)\r\n  currentWeekStart.setHours(0, 0, 0, 0)\r\n\r\n  const previousWeekStart = new Date(currentWeekStart)\r\n  previousWeekStart.setDate(currentWeekStart.getDate() - 7)\r\n\r\n  const previousWeekEnd = new Date(currentWeekStart)\r\n\r\n  // Calculate current week distance\r\n  const currentWeekActivities = activities.filter(activity => {\r\n    const activityDate = new Date(activity.start_date)\r\n    return activityDate >= currentWeekStart\r\n  })\r\n\r\n  // Calculate previous week distance\r\n  const previousWeekActivities = activities.filter(activity => {\r\n    const activityDate = new Date(activity.start_date)\r\n    return activityDate >= previousWeekStart && activityDate < previousWeekEnd\r\n  })\r\n\r\n  const currentDistance = currentWeekActivities.reduce((sum, activity) => sum + (activity.distance || 0), 0)\r\n  const previousDistance = previousWeekActivities.reduce((sum, activity) => sum + (activity.distance || 0), 0)\r\n\r\n  // Calculate percentage change\r\n  let change = 0\r\n  if (previousDistance > 0) {\r\n    change = ((currentDistance - previousDistance) / previousDistance) * 100\r\n    change = Math.round(change * 10) / 10 // Round to 1 decimal place\r\n  } else if (currentDistance > 0) {\r\n    change = 100 // If no previous week data but current week has data\r\n  }\r\n\r\n  return {\r\n    current: currentDistance,\r\n    previous: previousDistance,\r\n    change\r\n  }\r\n}\r\n\r\nexport function calculateActivityStreak(activities: Activity[]): { current: number; longest: number; consistency: number } {\r\n  if (activities.length === 0) {\r\n    return { current: 0, longest: 0, consistency: 0 }\r\n  }\r\n\r\n  // Sort activities by start date (most recent first)\r\n  const sortedActivities = [...activities].sort((a, b) => \r\n    new Date(b.start_date).getTime() - new Date(a.start_date).getTime()\r\n  )\r\n\r\n  // Get unique activity dates (ignore multiple activities on same day)\r\n  const activityDates = Array.from(new Set(\r\n    sortedActivities.map(activity => \r\n      new Date(activity.start_date).toDateString()\r\n    )\r\n  )).map(dateString => new Date(dateString))\r\n\r\n  // Calculate current streak\r\n  let currentStreak = 0\r\n  const today = new Date()\r\n  today.setHours(0, 0, 0, 0)\r\n\r\n  for (let i = 0; i < activityDates.length; i++) {\r\n    const expectedDate = new Date(today)\r\n    expectedDate.setDate(today.getDate() - i)\r\n    \r\n    const activityDate = new Date(activityDates[i])\r\n    activityDate.setHours(0, 0, 0, 0)\r\n\r\n    if (activityDate.getTime() === expectedDate.getTime()) {\r\n      currentStreak++\r\n    } else if (i === 0 && activityDate.getTime() === new Date(today.getTime() - 24 * 60 * 60 * 1000).getTime()) {\r\n      // Allow for yesterday if no activity today\r\n      currentStreak++\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n\r\n  // Calculate longest streak\r\n  let longestStreak = 0\r\n  let tempStreak = 0\r\n  let lastDate: Date | null = null\r\n\r\n  for (const currentDate of activityDates) {\r\n    if (lastDate === null) {\r\n      tempStreak = 1\r\n    } else {\r\n      const daysDiff = Math.floor((lastDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24))\r\n      if (daysDiff === 1) {\r\n        tempStreak++\r\n      } else {\r\n        longestStreak = Math.max(longestStreak, tempStreak)\r\n        tempStreak = 1\r\n      }\r\n    }\r\n    lastDate = currentDate\r\n  }\r\n  longestStreak = Math.max(longestStreak, tempStreak)\r\n\r\n  // Calculate consistency (percentage of days with activities in last 30 days)\r\n  const thirtyDaysAgo = new Date(today)\r\n  thirtyDaysAgo.setDate(today.getDate() - 30)\r\n\r\n  const recentActivityDates = activityDates.filter(date => date >= thirtyDaysAgo)\r\n  const consistency = Math.round((recentActivityDates.length / 30) * 100)\r\n\r\n  return {\r\n    current: currentStreak,\r\n    longest: longestStreak,\r\n    consistency: Math.min(consistency, 100) // Cap at 100%\r\n  }\r\n}\r\n\r\nexport function getLastActivity(activities: Activity[]): Activity | null {\r\n  if (activities.length === 0) {\r\n    return null\r\n  }\r\n\r\n  // Return the most recent activity (activities should already be sorted by start_date desc)\r\n  return activities[0] || null\r\n}\r\n\r\nexport function calculateMonthlyProgress(activities: Activity[]): { \r\n  current: number; \r\n  target: number; \r\n  progress: number; \r\n  daysLeft: number;\r\n  onTrack: boolean;\r\n  projectedTotal: number;\r\n} {\r\n  const now = new Date()\r\n  const monthStart = new Date(now.getFullYear(), now.getMonth(), 1)\r\n  const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0)\r\n  \r\n  // Calculate current month's distance\r\n  const monthActivities = activities.filter(activity => {\r\n    const activityDate = new Date(activity.start_date)\r\n    return activityDate >= monthStart && activityDate <= now\r\n  })\r\n  \r\n  const currentDistance = monthActivities.reduce((sum, activity) => sum + (activity.distance || 0), 0)\r\n  \r\n  // Set a reasonable monthly target based on user's average\r\n  // If user has less than 30 days of data, use a default target\r\n  const hasEnoughData = activities.length >= 10\r\n  let monthlyTarget: number\r\n  \r\n  if (hasEnoughData) {\r\n    // Calculate average monthly distance from historical data\r\n    const totalDistance = activities.reduce((sum, activity) => sum + (activity.distance || 0), 0)\r\n    const oldestActivity = activities[activities.length - 1]\r\n    const daysSinceStart = Math.max(1, Math.floor((now.getTime() - new Date(oldestActivity.start_date).getTime()) / (1000 * 60 * 60 * 24)))\r\n    const avgDailyDistance = totalDistance / daysSinceStart\r\n    monthlyTarget = avgDailyDistance * 30 // 30-day target\r\n  } else {\r\n    // Default target for new users (100km/month for mixed activities)\r\n    monthlyTarget = 100000 // 100km in meters\r\n  }\r\n  \r\n  // Calculate progress percentage\r\n  const progress = Math.min(100, (currentDistance / monthlyTarget) * 100)\r\n  \r\n  // Calculate days left in month\r\n  const daysLeft = monthEnd.getDate() - now.getDate()\r\n  \r\n  // Calculate if user is on track\r\n  const daysInMonth = monthEnd.getDate()\r\n  const daysPassed = now.getDate()\r\n  const expectedProgress = (daysPassed / daysInMonth) * 100\r\n  const onTrack = progress >= expectedProgress * 0.8 // Allow 20% buffer\r\n  \r\n  // Project total for the month based on current pace\r\n  const dailyAverage = currentDistance / Math.max(1, daysPassed)\r\n  const projectedTotal = dailyAverage * daysInMonth\r\n  \r\n  return {\r\n    current: currentDistance,\r\n    target: monthlyTarget,\r\n    progress: Math.round(progress * 10) / 10, // Round to 1 decimal\r\n    daysLeft,\r\n    onTrack,\r\n    projectedTotal\r\n  }\r\n} "],"names":["calculateActivityStreak","calculateMonthlyProgress","calculateWeeklyDistance","getLastActivity","activities","now","Date","currentWeekStart","setDate","getDate","getDay","setHours","previousWeekStart","previousWeekEnd","currentWeekActivities","filter","activity","activityDate","start_date","previousWeekActivities","currentDistance","reduce","sum","distance","previousDistance","change","Math","round","current","previous","length","longest","consistency","sortedActivities","sort","a","b","getTime","activityDates","Array","from","Set","map","toDateString","dateString","currentStreak","today","i","expectedDate","longestStreak","tempStreak","lastDate","currentDate","daysDiff","floor","max","thirtyDaysAgo","recentActivityDates","date","min","monthStart","getFullYear","getMonth","monthEnd","monthActivities","hasEnoughData","monthlyTarget","totalDistance","oldestActivity","daysSinceStart","avgDailyDistance","progress","daysLeft","daysInMonth","daysPassed","expectedProgress","onTrack","dailyAverage","projectedTotal","target"],"mappings":"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"}