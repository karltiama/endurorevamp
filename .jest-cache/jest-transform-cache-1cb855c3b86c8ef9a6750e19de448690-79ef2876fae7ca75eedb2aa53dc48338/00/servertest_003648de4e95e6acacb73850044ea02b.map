{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\lib\\auth\\server.test.ts"],"sourcesContent":["import { getUser, requireAuth, redirectIfAuthenticated } from '@/lib/auth/server'\r\nimport { createClient } from '@/lib/supabase/server'\r\n\r\n// Mock dependencies\r\njest.mock('@/lib/supabase/server')\r\njest.mock('next/navigation', () => ({\r\n  redirect: jest.fn(),\r\n}))\r\n\r\nconst mockCreateClient = createClient as jest.MockedFunction<typeof createClient>\r\nconst mockRedirect = require('next/navigation').redirect\r\n\r\ndescribe('Auth Server Helpers', () => {\r\n  const mockSupabase = {\r\n    auth: {\r\n      getUser: jest.fn(),\r\n    },\r\n  }\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n    mockCreateClient.mockResolvedValue(mockSupabase as any)\r\n  })\r\n\r\n  describe('getUser', () => {\r\n    it('should return user when authenticated', async () => {\r\n      const mockUser = {\r\n        id: 'user-123',\r\n        email: 'test@example.com',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n      }\r\n\r\n      mockSupabase.auth.getUser.mockResolvedValue({\r\n        data: { user: mockUser },\r\n        error: null,\r\n      })\r\n\r\n      const result = await getUser()\r\n\r\n      expect(result).toEqual(mockUser)\r\n      expect(mockSupabase.auth.getUser).toHaveBeenCalledTimes(1)\r\n    })\r\n\r\n    it('should return null when not authenticated', async () => {\r\n      mockSupabase.auth.getUser.mockResolvedValue({\r\n        data: { user: null },\r\n        error: null,\r\n      })\r\n\r\n      const result = await getUser()\r\n\r\n      expect(result).toBeNull()\r\n      expect(mockSupabase.auth.getUser).toHaveBeenCalledTimes(1)\r\n    })\r\n\r\n    it('should return null when there is an error', async () => {\r\n      mockSupabase.auth.getUser.mockResolvedValue({\r\n        data: { user: null },\r\n        error: { message: 'Auth error' },\r\n      })\r\n\r\n      const result = await getUser()\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n  })\r\n\r\n  describe('requireAuth', () => {\r\n    it('should return user when authenticated', async () => {\r\n      const mockUser = {\r\n        id: 'user-123',\r\n        email: 'test@example.com',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n      }\r\n\r\n      mockSupabase.auth.getUser.mockResolvedValue({\r\n        data: { user: mockUser },\r\n        error: null,\r\n      })\r\n\r\n      const result = await requireAuth()\r\n\r\n      expect(result).toEqual(mockUser)\r\n      expect(mockRedirect).not.toHaveBeenCalled()\r\n    })\r\n\r\n    it('should redirect to login when not authenticated', async () => {\r\n      mockSupabase.auth.getUser.mockResolvedValue({\r\n        data: { user: null },\r\n        error: null,\r\n      })\r\n\r\n      // requireAuth calls redirect, which throws to prevent further execution\r\n      mockRedirect.mockImplementation(() => {\r\n        throw new Error('NEXT_REDIRECT')\r\n      })\r\n\r\n      await expect(requireAuth()).rejects.toThrow('NEXT_REDIRECT')\r\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/login')\r\n    })\r\n  })\r\n\r\n  describe('redirectIfAuthenticated', () => {\r\n    it('should redirect to dashboard when authenticated', async () => {\r\n      const mockUser = {\r\n        id: 'user-123',\r\n        email: 'test@example.com',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n      }\r\n\r\n      mockSupabase.auth.getUser.mockResolvedValue({\r\n        data: { user: mockUser },\r\n        error: null,\r\n      })\r\n\r\n      mockRedirect.mockImplementation(() => {\r\n        throw new Error('NEXT_REDIRECT')\r\n      })\r\n\r\n      await expect(redirectIfAuthenticated()).rejects.toThrow('NEXT_REDIRECT')\r\n      expect(mockRedirect).toHaveBeenCalledWith('/dashboard')\r\n    })\r\n\r\n    it('should not redirect when not authenticated', async () => {\r\n      mockSupabase.auth.getUser.mockResolvedValue({\r\n        data: { user: null },\r\n        error: null,\r\n      })\r\n\r\n      await redirectIfAuthenticated()\r\n\r\n      expect(mockRedirect).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n}) "],"names":["jest","mock","redirect","fn","mockCreateClient","createClient","mockRedirect","require","describe","mockSupabase","auth","getUser","beforeEach","clearAllMocks","mockResolvedValue","it","mockUser","id","email","created_at","data","user","error","result","expect","toEqual","toHaveBeenCalledTimes","toBeNull","message","requireAuth","not","toHaveBeenCalled","mockImplementation","Error","rejects","toThrow","toHaveBeenCalledWith","redirectIfAuthenticated"],"mappings":"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"}