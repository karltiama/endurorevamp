1d488334e1a3c16131d78fdc9b69754e
"use strict";
// Mock dependencies
jest.mock('@/lib/supabase/server');
jest.mock('next/navigation', ()=>({
        redirect: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("../../../lib/auth/server");
const _server1 = require("../../../lib/supabase/server");
const mockCreateClient = _server1.createClient;
const mockRedirect = require('next/navigation').redirect;
describe('Auth Server Helpers', ()=>{
    const mockSupabase = {
        auth: {
            getUser: jest.fn()
        }
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        mockCreateClient.mockResolvedValue(mockSupabase);
    });
    describe('getUser', ()=>{
        it('should return user when authenticated', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                created_at: '2024-01-01T00:00:00Z'
            };
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            const result = await (0, _server.getUser)();
            expect(result).toEqual(mockUser);
            expect(mockSupabase.auth.getUser).toHaveBeenCalledTimes(1);
        });
        it('should return null when not authenticated', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            const result = await (0, _server.getUser)();
            expect(result).toBeNull();
            expect(mockSupabase.auth.getUser).toHaveBeenCalledTimes(1);
        });
        it('should return null when there is an error', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: {
                    message: 'Auth error'
                }
            });
            const result = await (0, _server.getUser)();
            expect(result).toBeNull();
        });
    });
    describe('requireAuth', ()=>{
        it('should return user when authenticated', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                created_at: '2024-01-01T00:00:00Z'
            };
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            const result = await (0, _server.requireAuth)();
            expect(result).toEqual(mockUser);
            expect(mockRedirect).not.toHaveBeenCalled();
        });
        it('should redirect to login when not authenticated', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            // requireAuth calls redirect, which throws to prevent further execution
            mockRedirect.mockImplementation(()=>{
                throw new Error('NEXT_REDIRECT');
            });
            await expect((0, _server.requireAuth)()).rejects.toThrow('NEXT_REDIRECT');
            expect(mockRedirect).toHaveBeenCalledWith('/auth/login');
        });
    });
    describe('redirectIfAuthenticated', ()=>{
        it('should redirect to dashboard when authenticated', async ()=>{
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                created_at: '2024-01-01T00:00:00Z'
            };
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            mockRedirect.mockImplementation(()=>{
                throw new Error('NEXT_REDIRECT');
            });
            await expect((0, _server.redirectIfAuthenticated)()).rejects.toThrow('NEXT_REDIRECT');
            expect(mockRedirect).toHaveBeenCalledWith('/dashboard');
        });
        it('should not redirect when not authenticated', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            await (0, _server.redirectIfAuthenticated)();
            expect(mockRedirect).not.toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,