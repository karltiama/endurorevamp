3713744cd5e4b7a962aafd439357b166
"use strict";
// Mock the hooks
jest.mock('@/hooks/useGoals', ()=>({
        useUserGoals: jest.fn(),
        useUpdateGoal: jest.fn(),
        useGoalTypes: jest.fn(),
        useCreateGoal: jest.fn(),
        useDeleteGoal: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _DashboardGoalSelector = require("../../../components/dashboard/DashboardGoalSelector");
const _useGoals = require("../../../hooks/useGoals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseUserGoals = _useGoals.useUserGoals;
const mockUseUpdateGoal = _useGoals.useUpdateGoal;
const mockUseGoalTypes = _useGoals.useGoalTypes;
// Test wrapper component
const TestWrapper = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
// Mock goal data
const mockGoals = [
    {
        id: '1',
        user_id: 'user-1',
        goal_type_id: 'weekly-distance',
        target_value: 50,
        target_unit: 'km',
        current_progress: 25,
        is_active: true,
        is_completed: false,
        priority: 1,
        time_period: 'weekly',
        streak_count: 0,
        created_at: '2024-01-01',
        updated_at: '2024-01-01',
        goal_type: {
            id: 'weekly-distance',
            name: 'weekly_distance',
            display_name: 'Weekly Distance',
            description: 'Track your weekly running distance',
            category: 'distance',
            metric_type: 'total_distance',
            unit: 'km',
            calculation_method: 'sum',
            is_active: true,
            created_at: '2024-01-01',
            updated_at: '2024-01-01'
        },
        goal_data: {
            show_on_dashboard: false
        }
    },
    {
        id: '2',
        user_id: 'user-1',
        goal_type_id: 'monthly-runs',
        target_value: 20,
        target_unit: 'runs',
        current_progress: 12,
        is_active: true,
        is_completed: false,
        priority: 2,
        time_period: 'monthly',
        streak_count: 0,
        created_at: '2024-01-01',
        updated_at: '2024-01-01',
        goal_type: {
            id: 'monthly-runs',
            name: 'monthly_runs',
            display_name: 'Monthly Runs',
            description: 'Complete a certain number of runs each month',
            category: 'frequency',
            metric_type: 'run_count',
            unit: 'runs',
            calculation_method: 'count',
            is_active: true,
            created_at: '2024-01-01',
            updated_at: '2024-01-01'
        },
        goal_data: {
            show_on_dashboard: true,
            dashboard_priority: 1
        }
    },
    {
        id: '3',
        user_id: 'user-1',
        goal_type_id: '5k-pace',
        target_value: 300,
        target_unit: 'min/km',
        current_progress: 320,
        is_active: true,
        is_completed: false,
        priority: 3,
        time_period: 'ongoing',
        streak_count: 0,
        created_at: '2024-01-01',
        updated_at: '2024-01-01',
        goal_type: {
            id: '5k-pace',
            name: '5k_pace',
            display_name: '5K Pace',
            description: 'Improve your 5K running pace',
            category: 'pace',
            metric_type: 'average_pace',
            unit: 'min/km',
            calculation_method: 'average',
            is_active: true,
            created_at: '2024-01-01',
            updated_at: '2024-01-01'
        },
        goal_data: {
            show_on_dashboard: false
        }
    }
];
describe('DashboardGoalSelector', ()=>{
    const mockUpdateGoal = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        mockUseUserGoals.mockReturnValue({
            data: {
                goals: mockGoals,
                onboarding: null
            },
            isLoading: false,
            error: null,
            refetch: jest.fn(),
            isRefetching: false,
            isError: false,
            isSuccess: true
        });
        mockUseUpdateGoal.mockReturnValue({
            mutateAsync: mockUpdateGoal,
            isPending: false,
            isError: false,
            error: null
        });
        mockUseGoalTypes.mockReturnValue({
            data: [],
            isLoading: false,
            error: null,
            refetch: jest.fn(),
            isRefetching: false,
            isError: false,
            isSuccess: true
        });
    });
    it('renders correctly when open', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        expect(_react1.screen.getByText('Choose Dashboard Goals')).toBeInTheDocument();
        expect(_react1.screen.getByText(/Select up to 3 goals to track as key metrics on your dashboard/)).toBeInTheDocument();
    });
    it('shows loading state', ()=>{
        mockUseUserGoals.mockReturnValue({
            data: null,
            isLoading: true,
            error: null,
            refetch: jest.fn(),
            isRefetching: false,
            isError: false,
            isSuccess: false
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        expect(_react1.screen.getByText('Loading your goals...')).toBeInTheDocument();
    });
    it('displays active goals', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        expect(_react1.screen.getByText('Weekly Distance')).toBeInTheDocument();
        expect(_react1.screen.getByText('Monthly Runs')).toBeInTheDocument();
        expect(_react1.screen.getByText('5K Pace')).toBeInTheDocument();
    });
    it('shows current dashboard goals as selected', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        // Monthly Runs should be selected as it has show_on_dashboard: true
        expect(_react1.screen.getByText('#1 on Dashboard')).toBeInTheDocument();
    });
    it('allows selecting goals up to limit of 3', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        // Click on Weekly Distance goal
        const weeklyGoal = _react1.screen.getByText('Weekly Distance').closest('.cursor-pointer');
        if (weeklyGoal) {
            _react1.fireEvent.click(weeklyGoal);
        }
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('2/3 goals selected for your dashboard')).toBeInTheDocument();
        });
    });
    it('prevents selecting more than 3 goals', async ()=>{
        // Mock 4 goals with none selected initially
        const extendedMockGoals = [
            ...mockGoals.map((goal)=>({
                    ...goal,
                    goal_data: {
                        show_on_dashboard: false
                    }
                })),
            {
                id: '4',
                user_id: 'user-1',
                goal_type_id: 'elevation',
                target_value: 1000,
                target_unit: 'm',
                current_progress: 500,
                is_active: true,
                is_completed: false,
                priority: 4,
                time_period: 'monthly',
                streak_count: 0,
                created_at: '2024-01-01',
                updated_at: '2024-01-01',
                goal_type: {
                    id: 'elevation',
                    name: 'elevation',
                    display_name: 'Monthly Elevation',
                    description: 'Climb elevation each month',
                    category: 'elevation',
                    metric_type: 'total_elevation',
                    unit: 'm',
                    calculation_method: 'sum',
                    is_active: true,
                    created_at: '2024-01-01',
                    updated_at: '2024-01-01'
                },
                goal_data: {
                    show_on_dashboard: false
                }
            }
        ];
        mockUseUserGoals.mockReturnValue({
            data: {
                goals: extendedMockGoals,
                onboarding: null
            },
            isLoading: false,
            error: null,
            refetch: jest.fn(),
            isRefetching: false,
            isError: false,
            isSuccess: true
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        // Select first three goals  
        const goalCards = _react1.screen.getAllByText(/Weekly Distance|Monthly Runs|5K Pace|Monthly Elevation/).map((text)=>text.closest('.cursor-pointer')).filter(Boolean);
        // Click first 3 goals
        for(let i = 0; i < Math.min(3, goalCards.length); i++){
            const goalCard = goalCards[i];
            if (goalCard) {
                _react1.fireEvent.click(goalCard);
            }
        }
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('3/3 goals selected for your dashboard')).toBeInTheDocument();
        });
        // Fourth goal should be disabled
        const fourthGoal = goalCards[3];
        if (fourthGoal) {
            expect(fourthGoal).toHaveClass('opacity-60', 'cursor-not-allowed');
        }
    });
    it('saves dashboard goals correctly', async ()=>{
        const mockOnOpenChange = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: mockOnOpenChange
            })
        }));
        // Select a goal
        const weeklyGoal = _react1.screen.getByText('Weekly Distance').closest('.cursor-pointer');
        if (weeklyGoal) {
            _react1.fireEvent.click(weeklyGoal);
        }
        // Click save button
        const saveButton = _react1.screen.getByRole('button', {
            name: /Save Dashboard Goals/
        });
        _react1.fireEvent.click(saveButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockUpdateGoal).toHaveBeenCalled();
            expect(mockOnOpenChange).toHaveBeenCalledWith(false);
        });
    });
    it('shows "Add New Goal" modal when no goals exist', ()=>{
        mockUseUserGoals.mockReturnValue({
            data: {
                goals: [],
                onboarding: null
            },
            isLoading: false,
            error: null,
            refetch: jest.fn(),
            isRefetching: false,
            isError: false,
            isSuccess: true
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        expect(_react1.screen.getByText('No Active Goals')).toBeInTheDocument();
        expect(_react1.screen.getByText('Create Your First Goal')).toBeInTheDocument();
    });
    it('handles errors gracefully', async ()=>{
        mockUpdateGoal.mockRejectedValueOnce(new Error('Failed to update'));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: true,
                onOpenChange: jest.fn()
            })
        }));
        // Select a goal and try to save
        const weeklyGoal = _react1.screen.getByText('Weekly Distance').closest('.cursor-pointer');
        if (weeklyGoal) {
            _react1.fireEvent.click(weeklyGoal);
        }
        const saveButton = _react1.screen.getByRole('button', {
            name: /Save Dashboard Goals/
        });
        _react1.fireEvent.click(saveButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Failed to update')).toBeInTheDocument();
        });
    });
    it('does not render when closed', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardGoalSelector.DashboardGoalSelector, {
                open: false,
                onOpenChange: jest.fn()
            })
        }));
        expect(_react1.screen.queryByText('Choose Dashboard Goals')).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,