{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\dashboard\\DashboardGoalSelector.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { DashboardGoalSelector } from '@/components/dashboard/DashboardGoalSelector';\r\nimport { useUserGoals, useUpdateGoal, useGoalTypes } from '@/hooks/useGoals';\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/useGoals', () => ({\r\n  useUserGoals: jest.fn(),\r\n  useUpdateGoal: jest.fn(),\r\n  useGoalTypes: jest.fn(),\r\n  useCreateGoal: jest.fn(),\r\n  useDeleteGoal: jest.fn(),\r\n}));\r\n\r\nconst mockUseUserGoals = useUserGoals as jest.MockedFunction<typeof useUserGoals>;\r\nconst mockUseUpdateGoal = useUpdateGoal as jest.MockedFunction<typeof useUpdateGoal>;\r\nconst mockUseGoalTypes = useGoalTypes as jest.MockedFunction<typeof useGoalTypes>;\r\n\r\n// Test wrapper component\r\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: { retry: false },\r\n      mutations: { retry: false },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\n// Mock goal data\r\nconst mockGoals = [\r\n  {\r\n    id: '1',\r\n    user_id: 'user-1',\r\n    goal_type_id: 'weekly-distance',\r\n    target_value: 50,\r\n    target_unit: 'km',\r\n    current_progress: 25,\r\n    is_active: true,\r\n    is_completed: false,\r\n    priority: 1,\r\n    time_period: 'weekly' as const,\r\n    streak_count: 0,\r\n    created_at: '2024-01-01',\r\n    updated_at: '2024-01-01',\r\n    goal_type: {\r\n      id: 'weekly-distance',\r\n      name: 'weekly_distance',\r\n      display_name: 'Weekly Distance',\r\n      description: 'Track your weekly running distance',\r\n      category: 'distance' as const,\r\n      metric_type: 'total_distance',\r\n      unit: 'km',\r\n      calculation_method: 'sum',\r\n      is_active: true,\r\n      created_at: '2024-01-01',\r\n      updated_at: '2024-01-01'\r\n    },\r\n    goal_data: {\r\n      show_on_dashboard: false\r\n    }\r\n  },\r\n  {\r\n    id: '2',\r\n    user_id: 'user-1',\r\n    goal_type_id: 'monthly-runs',\r\n    target_value: 20,\r\n    target_unit: 'runs',\r\n    current_progress: 12,\r\n    is_active: true,\r\n    is_completed: false,\r\n    priority: 2,\r\n    time_period: 'monthly' as const,\r\n    streak_count: 0,\r\n    created_at: '2024-01-01',\r\n    updated_at: '2024-01-01',\r\n    goal_type: {\r\n      id: 'monthly-runs',\r\n      name: 'monthly_runs',\r\n      display_name: 'Monthly Runs',\r\n      description: 'Complete a certain number of runs each month',\r\n      category: 'frequency' as const,\r\n      metric_type: 'run_count',\r\n      unit: 'runs',\r\n      calculation_method: 'count',\r\n      is_active: true,\r\n      created_at: '2024-01-01',\r\n      updated_at: '2024-01-01'\r\n    },\r\n    goal_data: {\r\n      show_on_dashboard: true,\r\n      dashboard_priority: 1\r\n    }\r\n  },\r\n  {\r\n    id: '3',\r\n    user_id: 'user-1',\r\n    goal_type_id: '5k-pace',\r\n    target_value: 300, // 5:00 min/km in seconds\r\n    target_unit: 'min/km',\r\n    current_progress: 320,\r\n    is_active: true,\r\n    is_completed: false,\r\n    priority: 3,\r\n    time_period: 'ongoing' as const,\r\n    streak_count: 0,\r\n    created_at: '2024-01-01',\r\n    updated_at: '2024-01-01',\r\n    goal_type: {\r\n      id: '5k-pace',\r\n      name: '5k_pace',\r\n      display_name: '5K Pace',\r\n      description: 'Improve your 5K running pace',\r\n      category: 'pace' as const,\r\n      metric_type: 'average_pace',\r\n      unit: 'min/km',\r\n      calculation_method: 'average',\r\n      is_active: true,\r\n      created_at: '2024-01-01',\r\n      updated_at: '2024-01-01'\r\n    },\r\n    goal_data: {\r\n      show_on_dashboard: false\r\n    }\r\n  }\r\n];\r\n\r\ndescribe('DashboardGoalSelector', () => {\r\n  const mockUpdateGoal = jest.fn();\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    mockUseUserGoals.mockReturnValue({\r\n      data: { goals: mockGoals, onboarding: null },\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn(),\r\n      isRefetching: false,\r\n      isError: false,\r\n      isSuccess: true\r\n    } as any);\r\n\r\n    mockUseUpdateGoal.mockReturnValue({\r\n      mutateAsync: mockUpdateGoal,\r\n      isPending: false,\r\n      isError: false,\r\n      error: null\r\n    } as any);\r\n\r\n    mockUseGoalTypes.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn(),\r\n      isRefetching: false,\r\n      isError: false,\r\n      isSuccess: true\r\n    } as any);\r\n  });\r\n\r\n  it('renders correctly when open', () => {\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText('Choose Dashboard Goals')).toBeInTheDocument();\r\n    expect(screen.getByText(/Select up to 3 goals to track as key metrics on your dashboard/)).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows loading state', () => {\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: null,\r\n      isLoading: true,\r\n      error: null,\r\n      refetch: jest.fn(),\r\n      isRefetching: false,\r\n      isError: false,\r\n      isSuccess: false\r\n    } as any);\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText('Loading your goals...')).toBeInTheDocument();\r\n  });\r\n\r\n  it('displays active goals', () => {\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText('Weekly Distance')).toBeInTheDocument();\r\n    expect(screen.getByText('Monthly Runs')).toBeInTheDocument();\r\n    expect(screen.getByText('5K Pace')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows current dashboard goals as selected', () => {\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    // Monthly Runs should be selected as it has show_on_dashboard: true\r\n    expect(screen.getByText('#1 on Dashboard')).toBeInTheDocument();\r\n  });\r\n\r\n  it('allows selecting goals up to limit of 3', async () => {\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    // Click on Weekly Distance goal\r\n    const weeklyGoal = screen.getByText('Weekly Distance').closest('.cursor-pointer') as HTMLElement;\r\n    \r\n    if (weeklyGoal) {\r\n      fireEvent.click(weeklyGoal);\r\n    }\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('2/3 goals selected for your dashboard')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('prevents selecting more than 3 goals', async () => {\r\n    // Mock 4 goals with none selected initially\r\n    const extendedMockGoals = [\r\n      ...mockGoals.map(goal => ({\r\n        ...goal,\r\n        goal_data: { show_on_dashboard: false }\r\n      })),\r\n      {\r\n        id: '4',\r\n        user_id: 'user-1',\r\n        goal_type_id: 'elevation',\r\n        target_value: 1000,\r\n        target_unit: 'm',\r\n        current_progress: 500,\r\n        is_active: true,\r\n        is_completed: false,\r\n        priority: 4,\r\n        time_period: 'monthly' as const,\r\n        streak_count: 0,\r\n        created_at: '2024-01-01',\r\n        updated_at: '2024-01-01',\r\n        goal_type: {\r\n          id: 'elevation',\r\n          name: 'elevation',\r\n          display_name: 'Monthly Elevation',\r\n          description: 'Climb elevation each month',\r\n          category: 'elevation' as const,\r\n          metric_type: 'total_elevation',\r\n          unit: 'm',\r\n          calculation_method: 'sum',\r\n          is_active: true,\r\n          created_at: '2024-01-01',\r\n          updated_at: '2024-01-01'\r\n        },\r\n        goal_data: {\r\n          show_on_dashboard: false\r\n        }\r\n      }\r\n    ];\r\n\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: { goals: extendedMockGoals, onboarding: null },\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn(),\r\n      isRefetching: false,\r\n      isError: false,\r\n      isSuccess: true\r\n    } as any);\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    // Select first three goals  \r\n    const goalCards = screen.getAllByText(/Weekly Distance|Monthly Runs|5K Pace|Monthly Elevation/)\r\n      .map(text => text.closest('.cursor-pointer'))\r\n      .filter(Boolean) as HTMLElement[];\r\n\r\n    // Click first 3 goals\r\n    for (let i = 0; i < Math.min(3, goalCards.length); i++) {\r\n      const goalCard = goalCards[i];\r\n      if (goalCard) {\r\n        fireEvent.click(goalCard);\r\n      }\r\n    }\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('3/3 goals selected for your dashboard')).toBeInTheDocument();\r\n    });\r\n\r\n    // Fourth goal should be disabled\r\n    const fourthGoal = goalCards[3];\r\n    if (fourthGoal) {\r\n      expect(fourthGoal).toHaveClass('opacity-60', 'cursor-not-allowed');\r\n    }\r\n  });\r\n\r\n  it('saves dashboard goals correctly', async () => {\r\n    const mockOnOpenChange = jest.fn();\r\n    \r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={mockOnOpenChange} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    // Select a goal\r\n    const weeklyGoal = screen.getByText('Weekly Distance').closest('.cursor-pointer') as HTMLElement;\r\n    if (weeklyGoal) {\r\n      fireEvent.click(weeklyGoal);\r\n    }\r\n\r\n    // Click save button\r\n    const saveButton = screen.getByRole('button', { name: /Save Dashboard Goals/ });\r\n    fireEvent.click(saveButton);\r\n\r\n    await waitFor(() => {\r\n      expect(mockUpdateGoal).toHaveBeenCalled();\r\n      expect(mockOnOpenChange).toHaveBeenCalledWith(false);\r\n    });\r\n  });\r\n\r\n  it('shows \"Add New Goal\" modal when no goals exist', () => {\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: { goals: [], onboarding: null },\r\n      isLoading: false,\r\n      error: null,\r\n      refetch: jest.fn(),\r\n      isRefetching: false,\r\n      isError: false,\r\n      isSuccess: true\r\n    } as any);\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText('No Active Goals')).toBeInTheDocument();\r\n    expect(screen.getByText('Create Your First Goal')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles errors gracefully', async () => {\r\n    mockUpdateGoal.mockRejectedValueOnce(new Error('Failed to update'));\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={true} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    // Select a goal and try to save\r\n    const weeklyGoal = screen.getByText('Weekly Distance').closest('.cursor-pointer');\r\n    if (weeklyGoal) {\r\n      fireEvent.click(weeklyGoal);\r\n    }\r\n\r\n    const saveButton = screen.getByRole('button', { name: /Save Dashboard Goals/ });\r\n    fireEvent.click(saveButton);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Failed to update')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('does not render when closed', () => {\r\n    render(\r\n      <TestWrapper>\r\n        <DashboardGoalSelector open={false} onOpenChange={jest.fn()} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.queryByText('Choose Dashboard Goals')).not.toBeInTheDocument();\r\n  });\r\n}); "],"names":["jest","mock","useUserGoals","fn","useUpdateGoal","useGoalTypes","useCreateGoal","useDeleteGoal","mockUseUserGoals","mockUseUpdateGoal","mockUseGoalTypes","TestWrapper","children","queryClient","QueryClient","defaultOptions","queries","retry","mutations","QueryClientProvider","client","mockGoals","id","user_id","goal_type_id","target_value","target_unit","current_progress","is_active","is_completed","priority","time_period","streak_count","created_at","updated_at","goal_type","name","display_name","description","category","metric_type","unit","calculation_method","goal_data","show_on_dashboard","dashboard_priority","describe","mockUpdateGoal","beforeEach","clearAllMocks","mockReturnValue","data","goals","onboarding","isLoading","error","refetch","isRefetching","isError","isSuccess","mutateAsync","isPending","it","render","DashboardGoalSelector","open","onOpenChange","expect","screen","getByText","toBeInTheDocument","weeklyGoal","closest","fireEvent","click","waitFor","extendedMockGoals","map","goal","goalCards","getAllByText","text","filter","Boolean","i","Math","min","length","goalCard","fourthGoal","toHaveClass","mockOnOpenChange","saveButton","getByRole","toHaveBeenCalled","toHaveBeenCalledWith","mockRejectedValueOnce","Error","queryByText","not"],"mappings":"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"}