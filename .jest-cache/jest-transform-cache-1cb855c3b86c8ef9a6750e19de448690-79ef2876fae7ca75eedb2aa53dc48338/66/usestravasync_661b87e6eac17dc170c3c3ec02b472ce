229856d38bff65c770226abdf1016846
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useStravaSync: function() {
        return useStravaSync;
    },
    useSyncStatusInfo: function() {
        return useSyncStatusInfo;
    }
});
const _reactquery = require("@tanstack/react-query");
// Helper function to format sync status info
function formatSyncStatusInfo(syncStatus) {
    if (!syncStatus) {
        return {
            lastSyncText: 'Never synced',
            canSync: true,
            syncDisabledReason: null,
            activityCount: 0,
            todaySyncs: 0,
            maxSyncs: 5
        };
    }
    const { syncState, activityCount, canSync } = syncStatus;
    // Format last sync time
    let lastSyncText = 'Never synced';
    if (syncState?.last_activity_sync) {
        const lastSync = new Date(syncState.last_activity_sync);
        const now = new Date();
        const diffMs = now.getTime() - lastSync.getTime();
        const diffMins = Math.floor(diffMs / (1000 * 60));
        const diffHours = Math.floor(diffMins / 60);
        const diffDays = Math.floor(diffHours / 24);
        if (diffMins < 1) {
            lastSyncText = 'Just now';
        } else if (diffMins < 60) {
            lastSyncText = `${diffMins} minutes ago`;
        } else if (diffHours < 24) {
            lastSyncText = `${diffHours} hours ago`;
        } else if (diffDays === 1) {
            lastSyncText = 'Yesterday';
        } else {
            lastSyncText = `${diffDays} days ago`;
        }
    }
    // Determine why sync might be disabled
    let syncDisabledReason = null;
    if (!canSync) {
        if (!syncState?.sync_enabled) {
            syncDisabledReason = 'Sync is disabled for your account';
        } else if (syncState?.sync_requests_today >= 5) {
            syncDisabledReason = 'Daily sync limit reached (5/day)';
        } else if (syncState?.last_activity_sync) {
            const lastSync = new Date(syncState.last_activity_sync);
            const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
            if (lastSync > oneHourAgo) {
                syncDisabledReason = 'Please wait 1 hour between syncs';
            }
        }
    }
    return {
        lastSyncText,
        canSync,
        syncDisabledReason,
        activityCount,
        todaySyncs: syncState?.sync_requests_today || 0,
        maxSyncs: 5,
        consecutiveErrors: syncState?.consecutive_errors || 0,
        lastError: syncState?.last_error_message
    };
}
// Trigger activity sync
async function triggerSync(options = {}) {
    const response = await fetch('/api/strava/sync', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(options)
    });
    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Sync failed');
    }
    return response.json();
}
// Get sync status
async function getSyncStatus() {
    const response = await fetch('/api/strava/sync');
    if (!response.ok) {
        throw new Error('Failed to get sync status');
    }
    return response.json();
}
function useStravaSync() {
    const queryClient = (0, _reactquery.useQueryClient)();
    // Query for sync status
    const { data: syncStatus, isLoading: isLoadingStatus, error: statusError, refetch: refetchStatus } = (0, _reactquery.useQuery)({
        queryKey: [
            'strava',
            'sync-status'
        ],
        queryFn: getSyncStatus,
        staleTime: 5 * 60 * 1000,
        gcTime: 30 * 60 * 1000,
        refetchOnWindowFocus: false,
        refetchOnReconnect: false,
        retry: false
    });
    // Mutation for triggering sync
    const { mutate: triggerSyncMutation, isPending: isSyncing, error: syncError, data: syncResult } = (0, _reactquery.useMutation)({
        mutationFn: triggerSync,
        onSuccess: (data)=>{
            console.log('✅ Sync completed:', data);
            // Invalidate related queries - comprehensive cache refresh
            queryClient.invalidateQueries({
                queryKey: [
                    'strava',
                    'sync-status'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'strava',
                    'activities'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'strava',
                    'weekly-metrics'
                ]
            });
            // Invalidate database-based queries for consistent UI updates
            queryClient.invalidateQueries({
                queryKey: [
                    'user',
                    'activities'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'athlete',
                    'profile'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'training',
                    'load'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'zone-analysis'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'dashboard'
                ]
            });
        },
        onError: (error)=>{
            console.error('❌ Sync failed:', error);
        }
    });
    // Helper functions with different sync strategies
    const syncLatest = ()=>{
        triggerSyncMutation({
            maxActivities: 50
        });
    };
    const syncLastWeek = ()=>{
        triggerSyncMutation({
            sinceDays: 7,
            maxActivities: 100
        });
    };
    const syncLastMonth = ()=>{
        triggerSyncMutation({
            sinceDays: 30,
            maxActivities: 200
        });
    };
    const forceFullSync = ()=>{
        triggerSyncMutation({
            forceRefresh: true,
            maxActivities: 200,
            sinceDays: 90 // Last 3 months
        });
    };
    const customSync = (options)=>{
        triggerSyncMutation(options);
    };
    const refreshStatus = ()=>{
        refetchStatus();
    };
    const syncStatusInfo = formatSyncStatusInfo(syncStatus);
    return {
        // Status
        syncStatus,
        isLoadingStatus,
        statusError,
        // Sync controls
        syncLatest,
        syncLastWeek,
        syncLastMonth,
        forceFullSync,
        customSync,
        // Sync state
        isSyncing,
        syncError,
        syncResult,
        // Manual controls
        refetchStatus,
        refreshStatus,
        // Formatted sync info
        syncStatusInfo
    };
}
function useSyncStatusInfo() {
    const { syncStatus } = useStravaSync();
    return formatSyncStatusInfo(syncStatus);
}

//# sourceMappingURL=data:application/json;base64,