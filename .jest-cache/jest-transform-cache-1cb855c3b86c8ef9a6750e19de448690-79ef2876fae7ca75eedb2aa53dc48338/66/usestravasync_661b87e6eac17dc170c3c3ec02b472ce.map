{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\hooks\\use-strava-sync.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\r\n\r\ninterface SyncOptions {\r\n  maxActivities?: number\r\n  sinceDays?: number\r\n  forceRefresh?: boolean\r\n}\r\n\r\ninterface SyncResult {\r\n  success: boolean\r\n  message: string\r\n  data?: {\r\n    activitiesProcessed: number\r\n    newActivities: number\r\n    updatedActivities: number\r\n    syncDuration: number\r\n  }\r\n  errors?: string[]\r\n}\r\n\r\ninterface SyncStatus {\r\n  syncState: any\r\n  activityCount: number\r\n  canSync: boolean\r\n}\r\n\r\n// Helper function to format sync status info\r\nfunction formatSyncStatusInfo(syncStatus: SyncStatus | undefined) {\r\n  if (!syncStatus) {\r\n    return {\r\n      lastSyncText: 'Never synced',\r\n      canSync: true,\r\n      syncDisabledReason: null,\r\n      activityCount: 0,\r\n      todaySyncs: 0,\r\n      maxSyncs: 5\r\n    }\r\n  }\r\n\r\n  const { syncState, activityCount, canSync } = syncStatus\r\n\r\n  // Format last sync time\r\n  let lastSyncText = 'Never synced'\r\n  if (syncState?.last_activity_sync) {\r\n    const lastSync = new Date(syncState.last_activity_sync)\r\n    const now = new Date()\r\n    const diffMs = now.getTime() - lastSync.getTime()\r\n    const diffMins = Math.floor(diffMs / (1000 * 60))\r\n    const diffHours = Math.floor(diffMins / 60)\r\n    const diffDays = Math.floor(diffHours / 24)\r\n\r\n    if (diffMins < 1) {\r\n      lastSyncText = 'Just now'\r\n    } else if (diffMins < 60) {\r\n      lastSyncText = `${diffMins} minutes ago`\r\n    } else if (diffHours < 24) {\r\n      lastSyncText = `${diffHours} hours ago`\r\n    } else if (diffDays === 1) {\r\n      lastSyncText = 'Yesterday'\r\n    } else {\r\n      lastSyncText = `${diffDays} days ago`\r\n    }\r\n  }\r\n\r\n  // Determine why sync might be disabled\r\n  let syncDisabledReason = null\r\n  if (!canSync) {\r\n    if (!syncState?.sync_enabled) {\r\n      syncDisabledReason = 'Sync is disabled for your account'\r\n    } else if (syncState?.sync_requests_today >= 5) {\r\n      syncDisabledReason = 'Daily sync limit reached (5/day)'\r\n    } else if (syncState?.last_activity_sync) {\r\n      const lastSync = new Date(syncState.last_activity_sync)\r\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000)\r\n      if (lastSync > oneHourAgo) {\r\n        syncDisabledReason = 'Please wait 1 hour between syncs'\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    lastSyncText,\r\n    canSync,\r\n    syncDisabledReason,\r\n    activityCount,\r\n    todaySyncs: syncState?.sync_requests_today || 0,\r\n    maxSyncs: 5,\r\n    consecutiveErrors: syncState?.consecutive_errors || 0,\r\n    lastError: syncState?.last_error_message\r\n  }\r\n}\r\n\r\n// Trigger activity sync\r\nasync function triggerSync(options: SyncOptions = {}): Promise<SyncResult> {\r\n  const response = await fetch('/api/strava/sync', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(options),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error.message || 'Sync failed')\r\n  }\r\n\r\n  return response.json()\r\n}\r\n\r\n// Get sync status\r\nasync function getSyncStatus(): Promise<SyncStatus> {\r\n  const response = await fetch('/api/strava/sync')\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to get sync status')\r\n  }\r\n\r\n  return response.json()\r\n}\r\n\r\nexport function useStravaSync() {\r\n  const queryClient = useQueryClient()\r\n\r\n  // Query for sync status\r\n  const {\r\n    data: syncStatus,\r\n    isLoading: isLoadingStatus,\r\n    error: statusError,\r\n    refetch: refetchStatus\r\n  } = useQuery({\r\n    queryKey: ['strava', 'sync-status'],\r\n    queryFn: getSyncStatus,\r\n    staleTime: 5 * 60 * 1000, // Consider fresh for 5 minutes\r\n    gcTime: 30 * 60 * 1000, // Keep in cache for 30 minutes\r\n    refetchOnWindowFocus: false, // Don't refetch when switching tabs\r\n    refetchOnReconnect: false, // Don't refetch on network reconnect\r\n    retry: false, // Don't retry on error in tests\r\n    // No refetchInterval - only fetch when explicitly requested\r\n  })\r\n\r\n  // Mutation for triggering sync\r\n  const {\r\n    mutate: triggerSyncMutation,\r\n    isPending: isSyncing,\r\n    error: syncError,\r\n    data: syncResult\r\n  } = useMutation({\r\n    mutationFn: triggerSync,\r\n    onSuccess: (data) => {\r\n      console.log('✅ Sync completed:', data)\r\n      \r\n      // Invalidate related queries - comprehensive cache refresh\r\n      queryClient.invalidateQueries({ queryKey: ['strava', 'sync-status'] })\r\n      queryClient.invalidateQueries({ queryKey: ['strava', 'activities'] })\r\n      queryClient.invalidateQueries({ queryKey: ['strava', 'weekly-metrics'] })\r\n      \r\n      // Invalidate database-based queries for consistent UI updates\r\n      queryClient.invalidateQueries({ queryKey: ['user', 'activities'] })\r\n      queryClient.invalidateQueries({ queryKey: ['athlete', 'profile'] })\r\n      queryClient.invalidateQueries({ queryKey: ['training', 'load'] })\r\n      queryClient.invalidateQueries({ queryKey: ['zone-analysis'] })\r\n      queryClient.invalidateQueries({ queryKey: ['dashboard'] })\r\n    },\r\n    onError: (error) => {\r\n      console.error('❌ Sync failed:', error)\r\n    }\r\n  })\r\n\r\n  // Helper functions with different sync strategies\r\n  const syncLatest = () => {\r\n    triggerSyncMutation({ maxActivities: 50 })\r\n  }\r\n\r\n  const syncLastWeek = () => {\r\n    triggerSyncMutation({ sinceDays: 7, maxActivities: 100 })\r\n  }\r\n\r\n  const syncLastMonth = () => {\r\n    triggerSyncMutation({ sinceDays: 30, maxActivities: 200 })\r\n  }\r\n\r\n  const forceFullSync = () => {\r\n    triggerSyncMutation({ \r\n      forceRefresh: true, \r\n      maxActivities: 200,\r\n      sinceDays: 90 // Last 3 months\r\n    })\r\n  }\r\n\r\n  const customSync = (options: SyncOptions) => {\r\n    triggerSyncMutation(options)\r\n  }\r\n\r\n  const refreshStatus = () => {\r\n    refetchStatus()\r\n  }\r\n\r\n  const syncStatusInfo = formatSyncStatusInfo(syncStatus)\r\n\r\n  return {\r\n    // Status\r\n    syncStatus,\r\n    isLoadingStatus,\r\n    statusError,\r\n    \r\n    // Sync controls\r\n    syncLatest,\r\n    syncLastWeek,\r\n    syncLastMonth,\r\n    forceFullSync,\r\n    customSync,\r\n    \r\n    // Sync state\r\n    isSyncing,\r\n    syncError,\r\n    syncResult,\r\n    \r\n    // Manual controls\r\n    refetchStatus,\r\n    refreshStatus,\r\n    \r\n    // Formatted sync info\r\n    syncStatusInfo\r\n  }\r\n}\r\n\r\n// Hook for getting formatted sync information\r\nexport function useSyncStatusInfo() {\r\n  const { syncStatus } = useStravaSync()\r\n  return formatSyncStatusInfo(syncStatus)\r\n} "],"names":["useStravaSync","useSyncStatusInfo","formatSyncStatusInfo","syncStatus","lastSyncText","canSync","syncDisabledReason","activityCount","todaySyncs","maxSyncs","syncState","last_activity_sync","lastSync","Date","now","diffMs","getTime","diffMins","Math","floor","diffHours","diffDays","sync_enabled","sync_requests_today","oneHourAgo","consecutiveErrors","consecutive_errors","lastError","last_error_message","triggerSync","options","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","message","getSyncStatus","queryClient","useQueryClient","data","isLoading","isLoadingStatus","statusError","refetch","refetchStatus","useQuery","queryKey","queryFn","staleTime","gcTime","refetchOnWindowFocus","refetchOnReconnect","retry","mutate","triggerSyncMutation","isPending","isSyncing","syncError","syncResult","useMutation","mutationFn","onSuccess","console","log","invalidateQueries","onError","syncLatest","maxActivities","syncLastWeek","sinceDays","syncLastMonth","forceFullSync","forceRefresh","customSync","refreshStatus","syncStatusInfo"],"mappings":"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"}