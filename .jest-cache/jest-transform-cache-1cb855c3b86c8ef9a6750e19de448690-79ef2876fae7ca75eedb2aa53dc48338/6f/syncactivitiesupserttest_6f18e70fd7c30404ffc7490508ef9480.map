{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\lib\\strava\\sync-activities-upsert.test.ts"],"sourcesContent":["import { StravaActivitySync } from '@/lib/strava/sync-activities'\r\nimport { createClient } from '@/lib/supabase/client'\r\n\r\n// Mock the Supabase clients\r\njest.mock('@/lib/supabase/client')\r\njest.mock('@/lib/supabase/server', () => ({\r\n  createClient: jest.fn()\r\n}))\r\n\r\n// Mock AutomaticGoalProgress to prevent server-side calls\r\njest.mock('@/lib/goals/automatic-progress', () => ({\r\n  AutomaticGoalProgress: {\r\n    updateProgressFromActivity: jest.fn().mockResolvedValue({}),\r\n  },\r\n}))\r\n\r\nconst mockUpsert = jest.fn()\r\nconst mockSelect = jest.fn()\r\nconst mockSingle = jest.fn()\r\nconst mockRpc = jest.fn()\r\n\r\n// Create a properly chained mock that captures the actual call sequence\r\nconst mockSupabase = {\r\n  from: jest.fn((table: string) => ({\r\n    upsert: mockUpsert.mockReturnValue({\r\n      select: mockSelect.mockReturnValue({\r\n        single: mockSingle.mockResolvedValue({\r\n          data: { id: 'test-id', created_at: '2023-01-01T10:00:00Z', updated_at: '2023-01-01T10:00:00Z' },\r\n          error: null\r\n        })\r\n      })\r\n    }),\r\n    select: jest.fn(() => ({\r\n      eq: jest.fn(() => ({\r\n        single: jest.fn()\r\n      }))\r\n    }))\r\n  })),\r\n  rpc: mockRpc\r\n}\r\n\r\n;(createClient as jest.Mock).mockReturnValue(mockSupabase)\r\n\r\n// Also mock server-side createClient\r\nconst { createClient: createServerClient } = require('@/lib/supabase/server')\r\n;(createServerClient as jest.Mock).mockReturnValue(mockSupabase)\r\n\r\n// Mock the StravaAuth\r\njest.mock('@/lib/strava/auth', () => ({\r\n  StravaAuth: jest.fn().mockImplementation(() => ({\r\n    getAccessToken: jest.fn().mockResolvedValue('mock-token')\r\n  }))\r\n}))\r\n\r\ndescribe('StravaActivitySync - Upsert Functionality', () => {\r\n  let stravaSync: StravaActivitySync\r\n  const mockUserId = 'test-user-id'\r\n  const mockActivityData = {\r\n    user_id: mockUserId,\r\n    strava_activity_id: 12345,\r\n    name: 'Test Run',\r\n    sport_type: 'Run',\r\n    distance: 5000,\r\n    moving_time: 1800,\r\n    elapsed_time: 1900\r\n  }\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n    stravaSync = new StravaActivitySync()\r\n  })\r\n\r\n  describe('Activity Storage', () => {\r\n    it('should use correct onConflict specification for upsert', async () => {\r\n      // Call the storeActivity method and await the result\r\n      const result = await stravaSync.storeActivity(mockUserId, {\r\n        id: 12345,\r\n        name: 'Test Run',\r\n        sport_type: 'Run',\r\n        distance: 5000,\r\n        moving_time: 1800,\r\n        elapsed_time: 1900,\r\n        start_date: '2023-01-01T10:00:00Z',\r\n        start_date_local: '2023-01-01T10:00:00Z',\r\n        timezone: 'UTC',\r\n        total_elevation_gain: 100,\r\n        average_speed: 2.78,\r\n        max_speed: 4.17,\r\n        trainer: false,\r\n        commute: false,\r\n        manual: false,\r\n        achievement_count: 0,\r\n        kudos_count: 0,\r\n        comment_count: 0,\r\n        has_heartrate: false\r\n      })\r\n\r\n      // Verify that from was called with 'activities' table\r\n      expect(mockSupabase.from).toHaveBeenCalledWith('activities')\r\n      \r\n      // Verify that upsert was called with the correct onConflict specification\r\n      expect(mockUpsert).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          user_id: mockUserId,\r\n          strava_activity_id: 12345\r\n        }),\r\n        expect.objectContaining({\r\n          onConflict: 'user_id,strava_activity_id', // Fixed: Use composite constraint to prevent duplicates per user\r\n          ignoreDuplicates: false\r\n        })\r\n      )\r\n      \r\n      // Verify the method completed successfully\r\n      expect(result.data).toBeDefined()\r\n      expect(result.isNew).toBeDefined()\r\n    })\r\n\r\n    it('should handle duplicate activities correctly', async () => {\r\n      // Mock an updated activity (created_at != updated_at means it was updated)\r\n      const mockData = {\r\n        id: 'test-id',\r\n        created_at: '2023-01-01T10:00:00Z',\r\n        updated_at: '2023-01-01T10:05:00Z' // 5 minutes later = update\r\n      }\r\n\r\n      // Override the single mock to return the updated activity data\r\n      mockSingle.mockResolvedValueOnce({\r\n        data: mockData,\r\n        error: null\r\n      })\r\n\r\n      const result = await stravaSync.storeActivity(mockUserId, {\r\n        id: 12345,\r\n        name: 'Test Run',\r\n        sport_type: 'Run',\r\n        distance: 5000,\r\n        moving_time: 1800,\r\n        elapsed_time: 1900,\r\n        start_date: '2023-01-01T10:00:00Z',\r\n        start_date_local: '2023-01-01T10:00:00Z',\r\n        timezone: 'UTC',\r\n        total_elevation_gain: 100,\r\n        average_speed: 2.78,\r\n        max_speed: 4.17,\r\n        trainer: false,\r\n        commute: false,\r\n        manual: false,\r\n        achievement_count: 0,\r\n        kudos_count: 0,\r\n        comment_count: 0,\r\n        has_heartrate: false\r\n      })\r\n\r\n      // Should detect this as an update, not a new activity\r\n      expect(result.isNew).toBe(false)\r\n      expect(result.data).toEqual(mockData)\r\n    })\r\n  })\r\n\r\n  describe('Data Type Safety', () => {\r\n    it('should handle null and undefined values safely', async () => {\r\n      await stravaSync.storeActivity(mockUserId, {\r\n        id: 12345,\r\n        name: 'Test Run',\r\n        sport_type: 'Run',\r\n        distance: null as any, // Should handle null\r\n        moving_time: undefined as any, // Should handle undefined\r\n        elapsed_time: '' as any, // Should handle empty string\r\n        start_date: '2023-01-01T10:00:00Z',\r\n        start_date_local: '2023-01-01T10:00:00Z',\r\n        timezone: 'UTC',\r\n        total_elevation_gain: 'invalid' as any, // Should handle invalid number\r\n        average_speed: 2.78,\r\n        max_speed: 4.17,\r\n        trainer: false,\r\n        commute: false,\r\n        manual: false,\r\n        achievement_count: 0,\r\n        kudos_count: 0,\r\n        comment_count: 0,\r\n        has_heartrate: false\r\n      })\r\n\r\n      // Access the upsert call arguments directly from the mock\r\n      expect(mockUpsert).toHaveBeenCalledTimes(1)\r\n      const upsertCall = mockUpsert.mock.calls[0][0]\r\n      \r\n      // Verify null/undefined handling\r\n      expect(upsertCall.distance).toBe(0) // safeNumberRequired fallback\r\n      expect(upsertCall.moving_time).toBe(0) // safeNumberRequired fallback  \r\n      expect(upsertCall.elapsed_time).toBe(0) // safeNumberRequired fallback\r\n      expect(upsertCall.total_elevation_gain).toBeNull() // safeNumber allows null\r\n    })\r\n  })\r\n})\r\n\r\ndescribe('Activity Upsert Conflict Resolution', () => {\r\n  let mockUpsertCall: jest.Mock\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n    \r\n    mockUpsertCall = jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        single: jest.fn().mockResolvedValue({\r\n          data: { id: 'test-id', strava_activity_id: 12345 },\r\n          error: null\r\n        })\r\n      }))\r\n    }))\r\n    \r\n    const mockSupabaseInstance = {\r\n      from: jest.fn(() => ({\r\n        upsert: mockUpsertCall,\r\n        select: jest.fn(() => ({\r\n          eq: jest.fn(() => ({\r\n            single: jest.fn().mockResolvedValue({\r\n              data: null,\r\n              error: { code: 'PGRST116' } // Not found\r\n            })\r\n          }))\r\n        }))\r\n      }))\r\n    }\r\n    \r\n    ;(createClient as jest.Mock).mockReturnValue(mockSupabaseInstance)\r\n  })\r\n\r\n  it('should demonstrate the fix for onConflict specification', async () => {\r\n    const testData = {\r\n      user_id: 'test-user-id',\r\n      strava_activity_id: 12345,\r\n      name: 'Test Activity',\r\n      sport_type: 'Run'\r\n    }\r\n\r\n    // Get the mock supabase instance\r\n    const mockSupabaseInstance = (createClient as jest.Mock)()\r\n    \r\n    // Simulate what the fixed code should do\r\n    const { data, error } = await mockSupabaseInstance\r\n      .from('activities')\r\n      .upsert(testData, {\r\n        onConflict: 'user_id,strava_activity_id', // This is the fix\r\n        ignoreDuplicates: false\r\n      })\r\n      .select('*')\r\n      .single()\r\n\r\n    // Verify the upsert was called with correct conflict specification\r\n    expect(mockSupabaseInstance.from).toHaveBeenCalledWith('activities')\r\n    \r\n    expect(mockUpsertCall).toHaveBeenCalledWith(\r\n      testData,\r\n      {\r\n        onConflict: 'user_id,strava_activity_id',\r\n        ignoreDuplicates: false\r\n      }\r\n    )\r\n\r\n    expect(error).toBeNull()\r\n    expect(data).toBeDefined()\r\n  })\r\n\r\n  it('should handle the old broken specification for comparison', async () => {\r\n    const testData = {\r\n      user_id: 'test-user-id',\r\n      strava_activity_id: 12345,\r\n      name: 'Test Activity',\r\n      sport_type: 'Run'\r\n    }\r\n\r\n    // Get the mock supabase instance\r\n    const mockSupabaseInstance = (createClient as jest.Mock)()\r\n\r\n    // Simulate what the old broken code would do\r\n    // This would fail in a real database but passes in mocks\r\n    await mockSupabaseInstance\r\n      .from('activities')\r\n      .upsert(testData, {\r\n        onConflict: 'strava_activity_id', // Old broken way\r\n        ignoreDuplicates: false\r\n      })\r\n      .select('*')\r\n      .single()\r\n\r\n    // The mock will pass, but this demonstrates the difference\r\n    expect(mockUpsertCall).toHaveBeenCalledWith(\r\n      testData,\r\n      {\r\n        onConflict: 'strava_activity_id', // This would cause DB error: 42P10\r\n        ignoreDuplicates: false\r\n      }\r\n    )\r\n  })\r\n\r\n  it('should verify correct constraint exists in migration', () => {\r\n    // This test documents what the migration should create\r\n    const expectedConstraint = {\r\n      name: 'activities_user_strava_unique',\r\n      columns: ['user_id', 'strava_activity_id'],\r\n      type: 'UNIQUE'\r\n    }\r\n\r\n    // This is more of a documentation test showing what we expect\r\n    expect(expectedConstraint.columns).toEqual(['user_id', 'strava_activity_id'])\r\n    expect(expectedConstraint.type).toBe('UNIQUE')\r\n  })\r\n}) "],"names":["jest","mock","createClient","fn","AutomaticGoalProgress","updateProgressFromActivity","mockResolvedValue","StravaAuth","mockImplementation","getAccessToken","mockUpsert","mockSelect","mockSingle","mockRpc","mockSupabase","from","table","upsert","mockReturnValue","select","single","data","id","created_at","updated_at","error","eq","rpc","createServerClient","require","describe","stravaSync","mockUserId","mockActivityData","user_id","strava_activity_id","name","sport_type","distance","moving_time","elapsed_time","beforeEach","clearAllMocks","StravaActivitySync","it","result","storeActivity","start_date","start_date_local","timezone","total_elevation_gain","average_speed","max_speed","trainer","commute","manual","achievement_count","kudos_count","comment_count","has_heartrate","expect","toHaveBeenCalledWith","objectContaining","onConflict","ignoreDuplicates","toBeDefined","isNew","mockData","mockResolvedValueOnce","toBe","toEqual","undefined","toHaveBeenCalledTimes","upsertCall","calls","toBeNull","mockUpsertCall","mockSupabaseInstance","code","testData","expectedConstraint","columns","type"],"mappings":"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"}