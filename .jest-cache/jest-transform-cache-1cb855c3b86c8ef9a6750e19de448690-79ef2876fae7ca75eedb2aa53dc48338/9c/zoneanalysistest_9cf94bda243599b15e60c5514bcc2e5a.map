{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\training\\zone-analysis.test.ts"],"sourcesContent":["import { TrainingZoneAnalysis } from '@/lib/training/zone-analysis'\r\n\r\ndescribe('TrainingZoneAnalysis Zone Models', () => {\r\n  let zoneAnalysis: TrainingZoneAnalysis\r\n\r\n  beforeEach(() => {\r\n    zoneAnalysis = new TrainingZoneAnalysis()\r\n  })\r\n\r\n  describe('zone model creation', () => {\r\n    it('should create 5-zone model with correct percentages', () => {\r\n      const models = (zoneAnalysis as any).createZoneModels(200)\r\n      const fiveZone = models.find((m: any) => m.name === '5-Zone Model')\r\n\r\n      expect(fiveZone).toBeDefined()\r\n      expect(fiveZone.zones).toHaveLength(5)\r\n      expect(fiveZone.zones).toEqual([\r\n        expect.objectContaining({ \r\n          number: 1,\r\n          name: 'Recovery',\r\n          minPercent: 50, \r\n          maxPercent: 60, \r\n          minHR: 100, \r\n          maxHR: 120 \r\n        }),\r\n        expect.objectContaining({ \r\n          number: 2,\r\n          name: 'Base/Aerobic',\r\n          minPercent: 60, \r\n          maxPercent: 70, \r\n          minHR: 120, \r\n          maxHR: 140 \r\n        }),\r\n        expect.objectContaining({ \r\n          number: 3,\r\n          name: 'Tempo',\r\n          minPercent: 70, \r\n          maxPercent: 80, \r\n          minHR: 140, \r\n          maxHR: 160 \r\n        }),\r\n        expect.objectContaining({ \r\n          number: 4,\r\n          name: 'Threshold',\r\n          minPercent: 80, \r\n          maxPercent: 90, \r\n          minHR: 160, \r\n          maxHR: 180 \r\n        }),\r\n        expect.objectContaining({ \r\n          number: 5,\r\n          name: 'VO2 Max',\r\n          minPercent: 90, \r\n          maxPercent: 100, \r\n          minHR: 180, \r\n          maxHR: 200 \r\n        })\r\n      ])\r\n    })\r\n\r\n    it('should create 3-zone model with correct percentages', () => {\r\n      const models = (zoneAnalysis as any).createZoneModels(200)\r\n      const threeZone = models.find((m: any) => m.name === '3-Zone Model')\r\n\r\n      expect(threeZone).toBeDefined()\r\n      expect(threeZone.zones).toHaveLength(3)\r\n      expect(threeZone.zones).toEqual([\r\n        expect.objectContaining({ \r\n          number: 1,\r\n          name: 'Easy',\r\n          minPercent: 50, \r\n          maxPercent: 70, \r\n          minHR: 100, \r\n          maxHR: 140 \r\n        }),\r\n        expect.objectContaining({ \r\n          number: 2,\r\n          name: 'Moderate',\r\n          minPercent: 70, \r\n          maxPercent: 85, \r\n          minHR: 140, \r\n          maxHR: 170 \r\n        }),\r\n        expect.objectContaining({ \r\n          number: 3,\r\n          name: 'Hard',\r\n          minPercent: 85, \r\n          maxPercent: 100, \r\n          minHR: 170, \r\n          maxHR: 200 \r\n        })\r\n      ])\r\n    })\r\n\r\n    it('should create Coggan model with correct percentages', () => {\r\n      const models = (zoneAnalysis as any).createZoneModels(200)\r\n      const cogganModel = models.find((m: any) => m.name === 'Coggan Model')\r\n\r\n      expect(cogganModel).toBeDefined()\r\n      expect(cogganModel.zones).toHaveLength(5)\r\n      expect(cogganModel.zones[0].name).toBe('Active Recovery')\r\n      expect(cogganModel.zones[1].name).toBe('Endurance')\r\n      expect(cogganModel.zones[2].name).toBe('Tempo')\r\n      expect(cogganModel.zones[3].name).toBe('Threshold')\r\n      expect(cogganModel.zones[4].name).toBe('VO2 Max')\r\n    })\r\n\r\n    it('should use estimated max HR when none provided', () => {\r\n      const models = (zoneAnalysis as any).createZoneModels(null)\r\n      \r\n      // Should use age-based estimation (220 - 30 = 190)\r\n      const fiveZone = models.find((m: any) => m.name === '5-Zone Model')\r\n      expect(fiveZone.zones[4].maxHR).toBe(190)\r\n    })\r\n\r\n    it('should use estimated max HR when HR is too low', () => {\r\n      const models = (zoneAnalysis as any).createZoneModels(100) // Unrealistically low\r\n      \r\n      // Should use age-based estimation (220 - 30 = 190)\r\n      const fiveZone = models.find((m: any) => m.name === '5-Zone Model')\r\n      expect(fiveZone.zones[4].maxHR).toBe(190)\r\n    })\r\n  })\r\n\r\n  describe('helper functions', () => {\r\n    it('should normalize sport types correctly', () => {\r\n      expect((zoneAnalysis as any).normalizeSportType('VirtualRun')).toBe('Running')\r\n      expect((zoneAnalysis as any).normalizeSportType('Run')).toBe('Running')\r\n      expect((zoneAnalysis as any).normalizeSportType('Ride')).toBe('Cycling')\r\n      expect((zoneAnalysis as any).normalizeSportType('EBikeRide')).toBe('Cycling')\r\n      expect((zoneAnalysis as any).normalizeSportType('bike')).toBe('Cycling')\r\n      expect((zoneAnalysis as any).normalizeSportType('Swim')).toBe('Swimming')\r\n      expect((zoneAnalysis as any).normalizeSportType('Walk')).toBe('Walking')\r\n      expect((zoneAnalysis as any).normalizeSportType('Hike')).toBe('Walking')\r\n      expect((zoneAnalysis as any).normalizeSportType('Other')).toBe('Other')\r\n    })\r\n\r\n    it('should calculate percentiles correctly', () => {\r\n      const data = [100, 110, 120, 130, 140, 150, 160, 170, 180, 190]\r\n      \r\n      // 50th percentile of 10 values should be average of 5th and 6th values: (140 + 150) / 2 = 145\r\n      expect((zoneAnalysis as any).getPercentile(data, 50)).toBe(145)\r\n      // 90th percentile should be close to the 9th value (index 8): 180\r\n      expect((zoneAnalysis as any).getPercentile(data, 90)).toBe(189)\r\n      // 100th percentile should be the maximum value\r\n      expect((zoneAnalysis as any).getPercentile(data, 100)).toBe(190)\r\n      expect((zoneAnalysis as any).getPercentile([], 50)).toBeNull()\r\n    })\r\n\r\n    it('should assess data quality correctly', () => {\r\n      expect((zoneAnalysis as any).assessDataQuality(0, 10, 180)).toBe('none')\r\n      expect((zoneAnalysis as any).assessDataQuality(2, 20, 180)).toBe('poor')\r\n      expect((zoneAnalysis as any).assessDataQuality(8, 20, 180)).toBe('fair')\r\n      expect((zoneAnalysis as any).assessDataQuality(15, 20, 180)).toBe('good')\r\n      expect((zoneAnalysis as any).assessDataQuality(20, 20, 180)).toBe('excellent')\r\n    })\r\n\r\n    it('should calculate confidence levels correctly', () => {\r\n      const excellentStats = { hrDataQuality: 'excellent', activitiesWithHR: 25 }\r\n      const goodStats = { hrDataQuality: 'good', activitiesWithHR: 15 }\r\n      const poorStats = { hrDataQuality: 'poor', activitiesWithHR: 5 }\r\n      \r\n      expect((zoneAnalysis as any).calculateConfidence(excellentStats, [])).toBe('high')\r\n      expect((zoneAnalysis as any).calculateConfidence(goodStats, [])).toBe('medium')\r\n      expect((zoneAnalysis as any).calculateConfidence(poorStats, [])).toBe('low')\r\n    })\r\n\r\n    it('should generate appropriate recommendations', () => {\r\n      const poorStats = { hrDataQuality: 'poor', activitiesWithHR: 3 }\r\n      const goodStats = { hrDataQuality: 'good', activitiesWithHR: 15 }\r\n      const sportAnalysis = [\r\n        { sport: 'Running', maxHR: 185, avgHR: 155, activityCount: 10, suggestedZones: [] },\r\n        { sport: 'Cycling', maxHR: 175, avgHR: 145, activityCount: 8, suggestedZones: [] }\r\n      ]\r\n\r\n      const poorRecommendations = (zoneAnalysis as any).generateRecommendations(poorStats, [])\r\n      expect(poorRecommendations).toContain('Consider using a heart rate monitor for more activities to improve zone accuracy')\r\n      expect(poorRecommendations).toContain('More heart rate data will improve zone recommendations')\r\n\r\n      const multiSportRecommendations = (zoneAnalysis as any).generateRecommendations(goodStats, sportAnalysis)\r\n      expect(multiSportRecommendations).toContain('Consider sport-specific zones as your heart rate patterns vary between activities')\r\n    })\r\n\r\n    it('should select best zone model appropriately', () => {\r\n      const models = (zoneAnalysis as any).createZoneModels(190)\r\n      const stats = { hrDataQuality: 'good', activitiesWithHR: 15 }\r\n      \r\n      const selected = (zoneAnalysis as any).selectBestZoneModel(models, stats)\r\n      expect(selected.name).toBe('5-Zone Model')\r\n    })\r\n  })\r\n}) "],"names":["describe","zoneAnalysis","beforeEach","TrainingZoneAnalysis","it","models","createZoneModels","fiveZone","find","m","name","expect","toBeDefined","zones","toHaveLength","toEqual","objectContaining","number","minPercent","maxPercent","minHR","maxHR","threeZone","cogganModel","toBe","normalizeSportType","data","getPercentile","toBeNull","assessDataQuality","excellentStats","hrDataQuality","activitiesWithHR","goodStats","poorStats","calculateConfidence","sportAnalysis","sport","avgHR","activityCount","suggestedZones","poorRecommendations","generateRecommendations","toContain","multiSportRecommendations","stats","selected","selectBestZoneModel"],"mappings":"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"}