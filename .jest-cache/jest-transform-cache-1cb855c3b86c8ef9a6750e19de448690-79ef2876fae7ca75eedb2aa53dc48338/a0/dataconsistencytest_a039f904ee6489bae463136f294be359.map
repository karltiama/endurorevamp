{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\architecture\\data-consistency.test.ts"],"sourcesContent":["/**\r\n * Test to verify consistent data architecture\r\n * All components should use database-first hooks, not API-first\r\n */\r\n\r\nimport { readFileSync, readdirSync } from 'fs'\r\nimport { join } from 'path'\r\n\r\ndescribe('Data Architecture Consistency', () => {\r\n  it('should not have components using API-first hooks', () => {\r\n    // Find all component files (simplified for test)\r\n    const componentFiles = ['components/AthleteHeader.tsx']\r\n\r\n    const violations: Array<{ file: string; issue: string; line?: number }> = []\r\n\r\n    for (const file of componentFiles) {\r\n      const content = readFileSync(join(process.cwd(), file), 'utf-8')\r\n      const lines = content.split('\\n')\r\n\r\n      lines.forEach((line, index) => {\r\n        // Check for API-first hooks (these should be avoided)\r\n        if (line.includes('useAthleteData(') && !line.includes('// LEGACY')) {\r\n          violations.push({\r\n            file,\r\n            issue: 'Uses API-first useAthleteData() instead of useAthleteProfile()',\r\n            line: index + 1\r\n          })\r\n        }\r\n\r\n        if (line.includes('useAthleteActivities(') && !line.includes('// LEGACY')) {\r\n          violations.push({\r\n            file,\r\n            issue: 'Uses API-first useAthleteActivities() instead of useUserActivities()',\r\n            line: index + 1\r\n          })\r\n        }\r\n\r\n        // Check for fetch calls to Strava API (should use database)\r\n        if (line.includes(\"fetch('/api/strava/athlete'\") && !line.includes('// LEGACY')) {\r\n          violations.push({\r\n            file,\r\n            issue: 'Direct API call to /api/strava/athlete instead of database',\r\n            line: index + 1\r\n          })\r\n        }\r\n\r\n        if (line.includes(\"fetch('/api/strava/activities'\") && !line.includes('// LEGACY')) {\r\n          violations.push({\r\n            file,\r\n            issue: 'Direct API call to /api/strava/activities instead of database',\r\n            line: index + 1\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    if (violations.length > 0) {\r\n      const violationReport = violations\r\n        .map(v => `${v.file}:${v.line || '?'} - ${v.issue}`)\r\n        .join('\\n')\r\n      \r\n      throw new Error(\r\n        `❌ Data architecture violations found:\\n\\n${violationReport}\\n\\n` +\r\n        `💡 Fix: Use database-first hooks like useUserActivities() and useAthleteProfile()`\r\n      )\r\n    }\r\n  })\r\n\r\n  it('should have consistent query keys for database operations', () => {\r\n    // Check that query keys follow the pattern: ['entity', 'operation', ...params]\r\n    const hookFiles = ['hooks/useAthleteProfile.ts', 'hooks/use-user-activities.ts']\r\n\r\n    const queryKeyPatterns = [\r\n      /queryKey:\\s*\\['user',\\s*'activities'/,  // User activities\r\n      /queryKey:\\s*\\['athlete',\\s*'profile'/,  // Athlete profile\r\n      /queryKey:\\s*\\['training',\\s*'load'/,    // Training load\r\n      /queryKey:\\s*\\['zone-analysis'\\]/,        // Zone analysis\r\n    ]\r\n\r\n    let foundPatterns = 0\r\n\r\n    for (const file of hookFiles) {\r\n      const content = readFileSync(join(process.cwd(), file), 'utf-8')\r\n      \r\n      queryKeyPatterns.forEach(pattern => {\r\n        if (pattern.test(content)) {\r\n          foundPatterns++\r\n        }\r\n      })\r\n    }\r\n\r\n    expect(foundPatterns).toBeGreaterThan(0)\r\n  })\r\n\r\n  it('should properly invalidate all related queries after sync', () => {\r\n    const syncHookFile = readFileSync(\r\n      join(process.cwd(), 'hooks/use-strava-sync.ts'), \r\n      'utf-8'\r\n    )\r\n\r\n    // Check that sync invalidates all the important query types\r\n    const requiredInvalidations = [\r\n      \"queryKey: ['user', 'activities']\",      // Activities from database\r\n      \"queryKey: ['athlete', 'profile']\",      // Athlete profile from database\r\n      \"queryKey: ['training', 'load']\",        // Training load calculations\r\n      \"queryKey: ['zone-analysis']\",           // Zone analysis\r\n    ]\r\n\r\n    requiredInvalidations.forEach(invalidation => {\r\n      expect(syncHookFile).toContain(invalidation)\r\n    })\r\n  })\r\n})\r\n\r\n/**\r\n * Helper to verify a component uses database-first patterns\r\n */\r\nexport function checkComponentConsistency(componentContent: string): {\r\n  isConsistent: boolean\r\n  issues: string[]\r\n} {\r\n  const issues: string[] = []\r\n\r\n  // Check for API-first patterns that should be avoided\r\n  if (componentContent.includes('useAthleteData(') && !componentContent.includes('// LEGACY')) {\r\n    issues.push('Uses useAthleteData() - should use useAthleteProfile()')\r\n  }\r\n\r\n  if (componentContent.includes('useAthleteActivities(') && !componentContent.includes('// LEGACY')) {\r\n    issues.push('Uses useAthleteActivities() - should use useUserActivities()')\r\n  }\r\n\r\n  // Check for direct API calls that should go through database\r\n  if (componentContent.includes('/api/strava/athlete') && !componentContent.includes('// LEGACY')) {\r\n    issues.push('Direct Strava API call - should use database')\r\n  }\r\n\r\n  return {\r\n    isConsistent: issues.length === 0,\r\n    issues\r\n  }\r\n} "],"names":["checkComponentConsistency","describe","it","componentFiles","violations","file","content","readFileSync","join","process","cwd","lines","split","forEach","line","index","includes","push","issue","length","violationReport","map","v","Error","hookFiles","queryKeyPatterns","foundPatterns","pattern","test","expect","toBeGreaterThan","syncHookFile","requiredInvalidations","invalidation","toContain","componentContent","issues","isConsistent"],"mappings":"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"}