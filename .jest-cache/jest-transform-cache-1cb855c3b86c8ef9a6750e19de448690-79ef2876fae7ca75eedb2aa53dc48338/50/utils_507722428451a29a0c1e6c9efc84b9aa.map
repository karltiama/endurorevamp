{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\lib\\utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\n// Unit conversion utilities\r\nexport type DistanceUnit = 'km' | 'miles'\r\nexport type PaceUnit = 'min/km' | 'min/mile'\r\n\r\nexport const CONVERSION_CONSTANTS = {\r\n  KM_TO_MILES: 0.621371,\r\n  MILES_TO_KM: 1.60934,\r\n} as const\r\n\r\nexport function formatDistance(meters: number, unit: DistanceUnit = 'km'): string {\r\n  if (unit === 'miles') {\r\n    const miles = (meters / 1000) * CONVERSION_CONSTANTS.KM_TO_MILES\r\n    return `${miles.toFixed(1)} mi`\r\n  }\r\n  const km = meters / 1000\r\n  return `${km.toFixed(1)} km`\r\n}\r\n\r\nexport function formatPace(secondsPerKm: number, unit: PaceUnit = 'min/km'): string {\r\n  let secondsPerUnit = secondsPerKm\r\n  \r\n  if (unit === 'min/mile') {\r\n    // Convert seconds per km to seconds per mile\r\n    secondsPerUnit = secondsPerKm * CONVERSION_CONSTANTS.MILES_TO_KM\r\n  }\r\n  \r\n  const minutes = Math.floor(secondsPerUnit / 60)\r\n  const seconds = Math.floor(secondsPerUnit % 60)\r\n  const unitSuffix = unit === 'min/mile' ? '/mi' : '/km'\r\n  \r\n  return `${minutes}:${seconds.toString().padStart(2, '0')}${unitSuffix}`\r\n}\r\n\r\nexport function convertDistance(meters: number, toUnit: DistanceUnit): number {\r\n  const km = meters / 1000\r\n  return toUnit === 'miles' ? km * CONVERSION_CONSTANTS.KM_TO_MILES : km\r\n}\r\n\r\nexport function convertPace(secondsPerKm: number, toUnit: PaceUnit): number {\r\n  return toUnit === 'min/mile' ? secondsPerKm * CONVERSION_CONSTANTS.MILES_TO_KM : secondsPerKm\r\n}\r\n\r\nexport function getDistanceUnit(unit: DistanceUnit): string {\r\n  return unit === 'miles' ? 'mi' : 'km'\r\n}\r\n\r\nexport function getPaceUnit(unit: PaceUnit): string {\r\n  return unit === 'min/mile' ? '/mi' : '/km'\r\n}\r\n\r\n// ✨ NEW: Consolidated date formatting functions\r\nexport function formatDate(dateString: string, options?: {\r\n  style?: 'short' | 'medium' | 'long' | 'full';\r\n  includeYear?: boolean;\r\n}): string {\r\n  const date = new Date(dateString);\r\n  \r\n  if (options?.style === 'full') {\r\n    return date.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n  \r\n  if (options?.style === 'long') {\r\n    return date.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n  \r\n  if (options?.style === 'medium') {\r\n    return date.toLocaleDateString('en-US', {\r\n      year: options.includeYear !== false ? 'numeric' : undefined,\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n  \r\n  // Default: short format (existing behavior)\r\n  return date.toLocaleDateString('en-US', {\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n}\r\n\r\n// ✨ NEW: Time duration formatting\r\nexport function formatDuration(seconds: number): string {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  if (hours > 0) {\r\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${Math.floor(remainingSeconds).toString().padStart(2, '0')}`;\r\n  }\r\n  \r\n  return `${minutes}:${Math.floor(remainingSeconds).toString().padStart(2, '0')}`;\r\n}\r\n\r\n// ✨ NEW: Relative time formatting (e.g., \"2 hours ago\")\r\nexport function formatRelativeTime(dateString: string): string {\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffMs = now.getTime() - date.getTime();\r\n  const diffMins = Math.floor(diffMs / (1000 * 60));\r\n  const diffHours = Math.floor(diffMins / 60);\r\n  const diffDays = Math.floor(diffHours / 24);\r\n\r\n  if (diffMins < 1) {\r\n    return 'Just now';\r\n  } else if (diffMins < 60) {\r\n    return `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;\r\n  } else if (diffHours < 24) {\r\n    return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\r\n  } else if (diffDays === 1) {\r\n    return 'Yesterday';\r\n  } else if (diffDays < 7) {\r\n    return `${diffDays} days ago`;\r\n  } else {\r\n    return formatDate(dateString, { style: 'medium' });\r\n  }\r\n}\r\n\r\n// ✨ NEW: Projected completion time formatting\r\nexport function formatProjectedCompletion(daysToComplete: number): string {\r\n  if (daysToComplete <= 0) return 'Already achieved';\r\n  if (daysToComplete < 7) return `${Math.ceil(daysToComplete)} days`;\r\n  if (daysToComplete < 30) return `${Math.ceil(daysToComplete / 7)} weeks`;\r\n  return `${Math.ceil(daysToComplete / 30)} months`;\r\n}\r\n\r\n// ✨ NEW: Percentage formatting\r\nexport function formatPercentage(value: number, options?: {\r\n  decimals?: number;\r\n  showSign?: boolean;\r\n}): string {\r\n  const decimals = options?.decimals ?? 1;\r\n  const showSign = options?.showSign ?? false;\r\n  const formatted = value.toFixed(decimals);\r\n  const sign = showSign && value >= 0 ? '+' : '';\r\n  return `${sign}${formatted}%`;\r\n}\r\n\r\n// ✨ NEW: Number formatting with units\r\nexport function formatNumber(value: number, options?: {\r\n  decimals?: number;\r\n  unit?: string;\r\n  compact?: boolean;\r\n}): string {\r\n  const { decimals = 0, unit = '', compact = false } = options || {};\r\n  \r\n  if (compact && value >= 1000) {\r\n    if (value >= 1000000) {\r\n      return `${(value / 1000000).toFixed(1)}M${unit}`;\r\n    }\r\n    if (value >= 1000) {\r\n      return `${(value / 1000).toFixed(1)}K${unit}`;\r\n    }\r\n  }\r\n  \r\n  return `${value.toFixed(decimals)}${unit}`;\r\n}\r\n\r\n// ✨ NEW: Ordinal number formatting\r\nexport function formatOrdinal(num: number): string {\r\n  const j = num % 10;\r\n  const k = num % 100;\r\n  if (j === 1 && k !== 11) return `${num}st`;\r\n  if (j === 2 && k !== 12) return `${num}nd`;\r\n  if (j === 3 && k !== 13) return `${num}rd`;\r\n  return `${num}th`;\r\n}\r\n"],"names":["CONVERSION_CONSTANTS","cn","convertDistance","convertPace","formatDate","formatDistance","formatDuration","formatNumber","formatOrdinal","formatPace","formatPercentage","formatProjectedCompletion","formatRelativeTime","getDistanceUnit","getPaceUnit","inputs","twMerge","clsx","KM_TO_MILES","MILES_TO_KM","meters","unit","miles","toFixed","km","secondsPerKm","secondsPerUnit","minutes","Math","floor","seconds","unitSuffix","toString","padStart","toUnit","dateString","options","date","Date","style","toLocaleDateString","weekday","year","month","day","includeYear","undefined","hours","remainingSeconds","now","diffMs","getTime","diffMins","diffHours","diffDays","daysToComplete","ceil","value","decimals","showSign","formatted","sign","compact","num","j","k"],"mappings":"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"}