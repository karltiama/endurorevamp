f259a369e46d9fe4cd048bdf9cbb8f12
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CONVERSION_CONSTANTS: function() {
        return CONVERSION_CONSTANTS;
    },
    cn: function() {
        return cn;
    },
    convertDistance: function() {
        return convertDistance;
    },
    convertPace: function() {
        return convertPace;
    },
    formatDate: function() {
        return formatDate;
    },
    formatDistance: function() {
        return formatDistance;
    },
    formatDuration: function() {
        return formatDuration;
    },
    formatNumber: function() {
        return formatNumber;
    },
    formatOrdinal: function() {
        return formatOrdinal;
    },
    formatPace: function() {
        return formatPace;
    },
    formatPercentage: function() {
        return formatPercentage;
    },
    formatProjectedCompletion: function() {
        return formatProjectedCompletion;
    },
    formatRelativeTime: function() {
        return formatRelativeTime;
    },
    getDistanceUnit: function() {
        return getDistanceUnit;
    },
    getPaceUnit: function() {
        return getPaceUnit;
    }
});
const _clsx = require("clsx");
const _tailwindmerge = require("tailwind-merge");
function cn(...inputs) {
    return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
const CONVERSION_CONSTANTS = {
    KM_TO_MILES: 0.621371,
    MILES_TO_KM: 1.60934
};
function formatDistance(meters, unit = 'km') {
    if (unit === 'miles') {
        const miles = meters / 1000 * CONVERSION_CONSTANTS.KM_TO_MILES;
        return `${miles.toFixed(1)} mi`;
    }
    const km = meters / 1000;
    return `${km.toFixed(1)} km`;
}
function formatPace(secondsPerKm, unit = 'min/km') {
    let secondsPerUnit = secondsPerKm;
    if (unit === 'min/mile') {
        // Convert seconds per km to seconds per mile
        secondsPerUnit = secondsPerKm * CONVERSION_CONSTANTS.MILES_TO_KM;
    }
    const minutes = Math.floor(secondsPerUnit / 60);
    const seconds = Math.floor(secondsPerUnit % 60);
    const unitSuffix = unit === 'min/mile' ? '/mi' : '/km';
    return `${minutes}:${seconds.toString().padStart(2, '0')}${unitSuffix}`;
}
function convertDistance(meters, toUnit) {
    const km = meters / 1000;
    return toUnit === 'miles' ? km * CONVERSION_CONSTANTS.KM_TO_MILES : km;
}
function convertPace(secondsPerKm, toUnit) {
    return toUnit === 'min/mile' ? secondsPerKm * CONVERSION_CONSTANTS.MILES_TO_KM : secondsPerKm;
}
function getDistanceUnit(unit) {
    return unit === 'miles' ? 'mi' : 'km';
}
function getPaceUnit(unit) {
    return unit === 'min/mile' ? '/mi' : '/km';
}
function formatDate(dateString, options) {
    const date = new Date(dateString);
    if (options?.style === 'full') {
        return date.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }
    if (options?.style === 'long') {
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }
    if (options?.style === 'medium') {
        return date.toLocaleDateString('en-US', {
            year: options.includeYear !== false ? 'numeric' : undefined,
            month: 'short',
            day: 'numeric'
        });
    }
    // Default: short format (existing behavior)
    return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric'
    });
}
function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor(seconds % 3600 / 60);
    const remainingSeconds = seconds % 60;
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${Math.floor(remainingSeconds).toString().padStart(2, '0')}`;
    }
    return `${minutes}:${Math.floor(remainingSeconds).toString().padStart(2, '0')}`;
}
function formatRelativeTime(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);
    if (diffMins < 1) {
        return 'Just now';
    } else if (diffMins < 60) {
        return `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;
    } else if (diffHours < 24) {
        return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
    } else if (diffDays === 1) {
        return 'Yesterday';
    } else if (diffDays < 7) {
        return `${diffDays} days ago`;
    } else {
        return formatDate(dateString, {
            style: 'medium'
        });
    }
}
function formatProjectedCompletion(daysToComplete) {
    if (daysToComplete <= 0) return 'Already achieved';
    if (daysToComplete < 7) return `${Math.ceil(daysToComplete)} days`;
    if (daysToComplete < 30) return `${Math.ceil(daysToComplete / 7)} weeks`;
    return `${Math.ceil(daysToComplete / 30)} months`;
}
function formatPercentage(value, options) {
    const decimals = options?.decimals ?? 1;
    const showSign = options?.showSign ?? false;
    const formatted = value.toFixed(decimals);
    const sign = showSign && value >= 0 ? '+' : '';
    return `${sign}${formatted}%`;
}
function formatNumber(value, options) {
    const { decimals = 0, unit = '', compact = false } = options || {};
    if (compact && value >= 1000) {
        if (value >= 1000000) {
            return `${(value / 1000000).toFixed(1)}M${unit}`;
        }
        if (value >= 1000) {
            return `${(value / 1000).toFixed(1)}K${unit}`;
        }
    }
    return `${value.toFixed(decimals)}${unit}`;
}
function formatOrdinal(num) {
    const j = num % 10;
    const k = num % 100;
    if (j === 1 && k !== 11) return `${num}st`;
    if (j === 2 && k !== 12) return `${num}nd`;
    if (j === 3 && k !== 13) return `${num}rd`;
    return `${num}th`;
}

//# sourceMappingURL=data:application/json;base64,