{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\hooks\\use-strava-sync.test.tsx"],"sourcesContent":["import { renderHook, waitFor } from '@testing-library/react'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { useStravaSync, useSyncStatusInfo } from '@/hooks/use-strava-sync'\r\nimport { ReactNode } from 'react'\r\n\r\n// Mock fetch globally\r\nglobal.fetch = jest.fn()\r\n\r\nconst mockFetch = fetch as jest.MockedFunction<typeof fetch>\r\n\r\n// Create a wrapper for React Query\r\nconst createWrapper = () => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        retry: false,\r\n      },\r\n      mutations: {\r\n        retry: false,\r\n      },\r\n    },\r\n  })\r\n\r\n  return ({ children }: { children: ReactNode }) => (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n}\r\n\r\ndescribe('useStravaSync', () => {\r\n  beforeEach(() => {\r\n    mockFetch.mockClear()\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('sync status', () => {\r\n    it('should fetch sync status successfully', async () => {\r\n      const mockSyncStatus = {\r\n        syncState: {\r\n          user_id: 'test-user',\r\n          sync_enabled: true,\r\n          sync_requests_today: 2,\r\n          last_activity_sync: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago\r\n          consecutive_errors: 0,\r\n          last_error_message: null\r\n        },\r\n        activityCount: 150,\r\n        canSync: true\r\n      }\r\n\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockSyncStatus,\r\n      } as Response)\r\n\r\n      const { result } = renderHook(() => useStravaSync(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isLoadingStatus).toBe(false)\r\n      }, { timeout: 5000 })\r\n\r\n      expect(result.current.syncStatus).toEqual(mockSyncStatus)\r\n      expect(mockFetch).toHaveBeenCalledWith('/api/strava/sync')\r\n    })\r\n\r\n    it('should handle sync status error', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        status: 500,\r\n      } as Response)\r\n\r\n      const { result } = renderHook(() => useStravaSync(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isLoadingStatus).toBe(false)\r\n      }, { timeout: 5000 })\r\n\r\n      expect(result.current.statusError).toBeTruthy()\r\n    })\r\n  })\r\n\r\n  describe('sync triggers', () => {\r\n    beforeEach(() => {\r\n      // Mock successful sync status\r\n      mockFetch.mockImplementation((url) => {\r\n        if (url === '/api/strava/sync' && typeof url === 'string') {\r\n          return Promise.resolve({\r\n            ok: true,\r\n            json: async () => ({\r\n              syncState: { sync_enabled: true, sync_requests_today: 0 },\r\n              activityCount: 100,\r\n              canSync: true\r\n            }),\r\n          } as Response)\r\n        }\r\n        return Promise.reject(new Error('Unknown URL'))\r\n      })\r\n    })\r\n\r\n    it('should trigger latest sync with correct parameters', async () => {\r\n      const mockSyncResult = {\r\n        success: true,\r\n        message: 'Sync completed successfully',\r\n        data: {\r\n          activitiesProcessed: 15,\r\n          newActivities: 10,\r\n          updatedActivities: 5,\r\n          syncDuration: 2500\r\n        }\r\n      }\r\n\r\n      mockFetch.mockImplementation((url, options) => {\r\n        if (url === '/api/strava/sync' && options?.method === 'POST') {\r\n          const body = JSON.parse(options.body as string)\r\n          expect(body).toEqual({ maxActivities: 50 })\r\n          \r\n          return Promise.resolve({\r\n            ok: true,\r\n            json: async () => mockSyncResult,\r\n          } as Response)\r\n        }\r\n        \r\n        // Default to sync status response\r\n        return Promise.resolve({\r\n          ok: true,\r\n          json: async () => ({\r\n            syncState: { sync_enabled: true },\r\n            activityCount: 100,\r\n            canSync: true\r\n          }),\r\n        } as Response)\r\n      })\r\n\r\n      const { result } = renderHook(() => useStravaSync(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isLoadingStatus).toBe(false)\r\n      }, { timeout: 5000 })\r\n\r\n      // Trigger sync\r\n      result.current.syncLatest()\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isSyncing).toBe(false)\r\n      })\r\n\r\n      expect(result.current.syncResult).toEqual(mockSyncResult)\r\n    })\r\n\r\n    it('should trigger weekly sync with correct parameters', async () => {\r\n      mockFetch.mockImplementation((url, options) => {\r\n        if (url === '/api/strava/sync' && options?.method === 'POST') {\r\n          const body = JSON.parse(options.body as string)\r\n          expect(body).toEqual({ sinceDays: 7, maxActivities: 100 })\r\n          \r\n          return Promise.resolve({\r\n            ok: true,\r\n            json: async () => ({ success: true, message: 'Weekly sync completed' }),\r\n          } as Response)\r\n        }\r\n        \r\n        return Promise.resolve({\r\n          ok: true,\r\n          json: async () => ({ syncState: {}, activityCount: 100, canSync: true }),\r\n        } as Response)\r\n      })\r\n\r\n      const { result } = renderHook(() => useStravaSync(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isLoadingStatus).toBe(false)\r\n      }, { timeout: 5000 })\r\n\r\n      result.current.syncLastWeek()\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isSyncing).toBe(false)\r\n      })\r\n    })\r\n\r\n    it('should trigger full sync with correct parameters', async () => {\r\n      mockFetch.mockImplementation((url, options) => {\r\n        if (url === '/api/strava/sync' && options?.method === 'POST') {\r\n          const body = JSON.parse(options.body as string)\r\n          expect(body).toEqual({ \r\n            forceRefresh: true, \r\n            maxActivities: 200,\r\n            sinceDays: 90 \r\n          })\r\n          \r\n          return Promise.resolve({\r\n            ok: true,\r\n            json: async () => ({ success: true, message: 'Full sync completed' }),\r\n          } as Response)\r\n        }\r\n        \r\n        return Promise.resolve({\r\n          ok: true,\r\n          json: async () => ({ syncState: {}, activityCount: 100, canSync: true }),\r\n        } as Response)\r\n      })\r\n\r\n      const { result } = renderHook(() => useStravaSync(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isLoadingStatus).toBe(false)\r\n      }, { timeout: 5000 })\r\n\r\n      result.current.forceFullSync()\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isSyncing).toBe(false)\r\n      })\r\n    })\r\n\r\n    it('should handle sync errors', async () => {\r\n      mockFetch.mockImplementation((url, options) => {\r\n        if (url === '/api/strava/sync' && options?.method === 'POST') {\r\n          return Promise.resolve({\r\n            ok: false,\r\n            status: 422,\r\n            json: async () => ({ \r\n              success: false, \r\n              message: 'Sync failed', \r\n              errors: ['Token expired'] \r\n            }),\r\n          } as Response)\r\n        }\r\n        \r\n        return Promise.resolve({\r\n          ok: true,\r\n          json: async () => ({ syncState: {}, activityCount: 100, canSync: true }),\r\n        } as Response)\r\n      })\r\n\r\n      const { result } = renderHook(() => useStravaSync(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isLoadingStatus).toBe(false)\r\n      }, { timeout: 5000 })\r\n\r\n      result.current.syncLatest()\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isSyncing).toBe(false)\r\n      })\r\n\r\n      expect(result.current.syncError).toBeTruthy()\r\n    })\r\n  })\r\n\r\n  describe('custom sync', () => {\r\n    it('should trigger custom sync with provided options', async () => {\r\n      const customOptions = {\r\n        sinceDays: 14,\r\n        maxActivities: 75,\r\n        forceRefresh: true\r\n      }\r\n\r\n      mockFetch.mockImplementation((url, options) => {\r\n        if (url === '/api/strava/sync' && options?.method === 'POST') {\r\n          const body = JSON.parse(options.body as string)\r\n          expect(body).toEqual(customOptions)\r\n          \r\n          return Promise.resolve({\r\n            ok: true,\r\n            json: async () => ({ success: true, message: 'Custom sync completed' }),\r\n          } as Response)\r\n        }\r\n        \r\n        return Promise.resolve({\r\n          ok: true,\r\n          json: async () => ({ syncState: {}, activityCount: 100, canSync: true }),\r\n        } as Response)\r\n      })\r\n\r\n      const { result } = renderHook(() => useStravaSync(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isLoadingStatus).toBe(false)\r\n      }, { timeout: 5000 })\r\n\r\n      result.current.customSync(customOptions)\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isSyncing).toBe(false)\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\ndescribe('useSyncStatusInfo', () => {\r\n  beforeEach(() => {\r\n    mockFetch.mockClear()\r\n  })\r\n\r\n  it('should format sync status info correctly', async () => {\r\n    // First verify that useSyncStatusInfo is a function\r\n    expect(typeof useSyncStatusInfo).toBe('function')\r\n    \r\n    const mockSyncStatus = {\r\n      syncState: {\r\n        last_activity_sync: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 minutes ago\r\n        sync_enabled: true,\r\n        sync_requests_today: 3,\r\n        consecutive_errors: 0,\r\n        last_error_message: null\r\n      },\r\n      activityCount: 125,\r\n      canSync: true\r\n    }\r\n\r\n    mockFetch.mockResolvedValue({\r\n      ok: true,\r\n      json: async () => mockSyncStatus,\r\n    } as Response)\r\n\r\n    const { result } = renderHook(() => useSyncStatusInfo(), {\r\n      wrapper: createWrapper(),\r\n    })\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.lastSyncText).toBe('30 minutes ago')\r\n    })\r\n\r\n    expect(result.current.canSync).toBe(true)\r\n    expect(result.current.activityCount).toBe(125)\r\n    expect(result.current.todaySyncs).toBe(3)\r\n    expect(result.current.maxSyncs).toBe(5)\r\n    expect(result.current.consecutiveErrors).toBe(0)\r\n  })\r\n\r\n  it('should handle never synced status', async () => {\r\n    mockFetch.mockResolvedValue({\r\n      ok: true,\r\n      json: async () => ({\r\n        syncState: null,\r\n        activityCount: 0,\r\n        canSync: true\r\n      }),\r\n    } as Response)\r\n\r\n    const { result } = renderHook(() => useSyncStatusInfo(), {\r\n      wrapper: createWrapper(),\r\n    })\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.lastSyncText).toBe('Never synced')\r\n    })\r\n\r\n    expect(result.current.canSync).toBe(true)\r\n    expect(result.current.activityCount).toBe(0)\r\n  })\r\n\r\n  it('should format recent sync times correctly', async () => {\r\n         const testCases = [\r\n       { ago: 30 * 1000, expected: 'Just now' }, // 30 seconds\r\n       { ago: 5 * 60 * 1000, expected: '5 minutes ago' }, // 5 minutes\r\n       { ago: 2 * 60 * 60 * 1000, expected: '2 hours ago' }, // 2 hours\r\n       { ago: 24 * 60 * 60 * 1000, expected: 'Yesterday' }, // 1 day (formatted as Yesterday)\r\n     ]\r\n\r\n    for (const testCase of testCases) {\r\n      const mockSyncStatus = {\r\n        syncState: {\r\n          last_activity_sync: new Date(Date.now() - testCase.ago).toISOString(),\r\n          sync_enabled: true,\r\n          sync_requests_today: 1,\r\n          consecutive_errors: 0\r\n        },\r\n        activityCount: 100,\r\n        canSync: true\r\n      }\r\n\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        json: async () => mockSyncStatus,\r\n      } as Response)\r\n\r\n      const { result } = renderHook(() => useSyncStatusInfo(), {\r\n        wrapper: createWrapper(),\r\n      })\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.lastSyncText).toBe(testCase.expected)\r\n      })\r\n    }\r\n  })\r\n\r\n  it('should identify sync disabled reasons', async () => {\r\n    // Test rate limit exceeded\r\n    const rateLimitStatus = {\r\n      syncState: {\r\n        sync_enabled: true,\r\n        sync_requests_today: 5, // At limit\r\n        last_activity_sync: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()\r\n      },\r\n      activityCount: 100,\r\n      canSync: false\r\n    }\r\n\r\n    mockFetch.mockResolvedValue({\r\n      ok: true,\r\n      json: async () => rateLimitStatus,\r\n    } as Response)\r\n\r\n    const { result } = renderHook(() => useSyncStatusInfo(), {\r\n      wrapper: createWrapper(),\r\n    })\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.syncDisabledReason).toBe('Daily sync limit reached (5/day)')\r\n    })\r\n  })\r\n}) "],"names":["global","fetch","jest","fn","mockFetch","createWrapper","queryClient","QueryClient","defaultOptions","queries","retry","mutations","children","QueryClientProvider","client","describe","beforeEach","mockClear","afterEach","clearAllMocks","it","mockSyncStatus","syncState","user_id","sync_enabled","sync_requests_today","last_activity_sync","Date","now","toISOString","consecutive_errors","last_error_message","activityCount","canSync","mockResolvedValueOnce","ok","json","result","renderHook","useStravaSync","wrapper","waitFor","expect","current","isLoadingStatus","toBe","timeout","syncStatus","toEqual","toHaveBeenCalledWith","status","statusError","toBeTruthy","mockImplementation","url","Promise","resolve","reject","Error","mockSyncResult","success","message","data","activitiesProcessed","newActivities","updatedActivities","syncDuration","options","method","body","JSON","parse","maxActivities","syncLatest","isSyncing","syncResult","sinceDays","syncLastWeek","forceRefresh","forceFullSync","errors","syncError","customOptions","customSync","useSyncStatusInfo","mockResolvedValue","lastSyncText","todaySyncs","maxSyncs","consecutiveErrors","testCases","ago","expected","testCase","rateLimitStatus","syncDisabledReason"],"mappings":"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"}