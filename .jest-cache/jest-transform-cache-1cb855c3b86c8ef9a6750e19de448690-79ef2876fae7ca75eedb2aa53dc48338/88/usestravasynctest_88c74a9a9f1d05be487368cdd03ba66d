39c855f6a2d2fbf42470ec98b5db73f7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _usestravasync = require("../../hooks/use-strava-sync");
// Mock fetch globally
global.fetch = jest.fn();
const mockFetch = fetch;
// Create a wrapper for React Query
const createWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
};
describe('useStravaSync', ()=>{
    beforeEach(()=>{
        mockFetch.mockClear();
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    describe('sync status', ()=>{
        it('should fetch sync status successfully', async ()=>{
            const mockSyncStatus = {
                syncState: {
                    user_id: 'test-user',
                    sync_enabled: true,
                    sync_requests_today: 2,
                    last_activity_sync: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                    consecutive_errors: 0,
                    last_error_message: null
                },
                activityCount: 150,
                canSync: true
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockSyncStatus
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useStravaSync)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoadingStatus).toBe(false);
            }, {
                timeout: 5000
            });
            expect(result.current.syncStatus).toEqual(mockSyncStatus);
            expect(mockFetch).toHaveBeenCalledWith('/api/strava/sync');
        });
        it('should handle sync status error', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useStravaSync)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoadingStatus).toBe(false);
            }, {
                timeout: 5000
            });
            expect(result.current.statusError).toBeTruthy();
        });
    });
    describe('sync triggers', ()=>{
        beforeEach(()=>{
            // Mock successful sync status
            mockFetch.mockImplementation((url)=>{
                if (url === '/api/strava/sync' && typeof url === 'string') {
                    return Promise.resolve({
                        ok: true,
                        json: async ()=>({
                                syncState: {
                                    sync_enabled: true,
                                    sync_requests_today: 0
                                },
                                activityCount: 100,
                                canSync: true
                            })
                    });
                }
                return Promise.reject(new Error('Unknown URL'));
            });
        });
        it('should trigger latest sync with correct parameters', async ()=>{
            const mockSyncResult = {
                success: true,
                message: 'Sync completed successfully',
                data: {
                    activitiesProcessed: 15,
                    newActivities: 10,
                    updatedActivities: 5,
                    syncDuration: 2500
                }
            };
            mockFetch.mockImplementation((url, options)=>{
                if (url === '/api/strava/sync' && options?.method === 'POST') {
                    const body = JSON.parse(options.body);
                    expect(body).toEqual({
                        maxActivities: 50
                    });
                    return Promise.resolve({
                        ok: true,
                        json: async ()=>mockSyncResult
                    });
                }
                // Default to sync status response
                return Promise.resolve({
                    ok: true,
                    json: async ()=>({
                            syncState: {
                                sync_enabled: true
                            },
                            activityCount: 100,
                            canSync: true
                        })
                });
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useStravaSync)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoadingStatus).toBe(false);
            }, {
                timeout: 5000
            });
            // Trigger sync
            result.current.syncLatest();
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSyncing).toBe(false);
            });
            expect(result.current.syncResult).toEqual(mockSyncResult);
        });
        it('should trigger weekly sync with correct parameters', async ()=>{
            mockFetch.mockImplementation((url, options)=>{
                if (url === '/api/strava/sync' && options?.method === 'POST') {
                    const body = JSON.parse(options.body);
                    expect(body).toEqual({
                        sinceDays: 7,
                        maxActivities: 100
                    });
                    return Promise.resolve({
                        ok: true,
                        json: async ()=>({
                                success: true,
                                message: 'Weekly sync completed'
                            })
                    });
                }
                return Promise.resolve({
                    ok: true,
                    json: async ()=>({
                            syncState: {},
                            activityCount: 100,
                            canSync: true
                        })
                });
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useStravaSync)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoadingStatus).toBe(false);
            }, {
                timeout: 5000
            });
            result.current.syncLastWeek();
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSyncing).toBe(false);
            });
        });
        it('should trigger full sync with correct parameters', async ()=>{
            mockFetch.mockImplementation((url, options)=>{
                if (url === '/api/strava/sync' && options?.method === 'POST') {
                    const body = JSON.parse(options.body);
                    expect(body).toEqual({
                        forceRefresh: true,
                        maxActivities: 200,
                        sinceDays: 90
                    });
                    return Promise.resolve({
                        ok: true,
                        json: async ()=>({
                                success: true,
                                message: 'Full sync completed'
                            })
                    });
                }
                return Promise.resolve({
                    ok: true,
                    json: async ()=>({
                            syncState: {},
                            activityCount: 100,
                            canSync: true
                        })
                });
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useStravaSync)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoadingStatus).toBe(false);
            }, {
                timeout: 5000
            });
            result.current.forceFullSync();
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSyncing).toBe(false);
            });
        });
        it('should handle sync errors', async ()=>{
            mockFetch.mockImplementation((url, options)=>{
                if (url === '/api/strava/sync' && options?.method === 'POST') {
                    return Promise.resolve({
                        ok: false,
                        status: 422,
                        json: async ()=>({
                                success: false,
                                message: 'Sync failed',
                                errors: [
                                    'Token expired'
                                ]
                            })
                    });
                }
                return Promise.resolve({
                    ok: true,
                    json: async ()=>({
                            syncState: {},
                            activityCount: 100,
                            canSync: true
                        })
                });
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useStravaSync)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoadingStatus).toBe(false);
            }, {
                timeout: 5000
            });
            result.current.syncLatest();
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSyncing).toBe(false);
            });
            expect(result.current.syncError).toBeTruthy();
        });
    });
    describe('custom sync', ()=>{
        it('should trigger custom sync with provided options', async ()=>{
            const customOptions = {
                sinceDays: 14,
                maxActivities: 75,
                forceRefresh: true
            };
            mockFetch.mockImplementation((url, options)=>{
                if (url === '/api/strava/sync' && options?.method === 'POST') {
                    const body = JSON.parse(options.body);
                    expect(body).toEqual(customOptions);
                    return Promise.resolve({
                        ok: true,
                        json: async ()=>({
                                success: true,
                                message: 'Custom sync completed'
                            })
                    });
                }
                return Promise.resolve({
                    ok: true,
                    json: async ()=>({
                            syncState: {},
                            activityCount: 100,
                            canSync: true
                        })
                });
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useStravaSync)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoadingStatus).toBe(false);
            }, {
                timeout: 5000
            });
            result.current.customSync(customOptions);
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSyncing).toBe(false);
            });
        });
    });
});
describe('useSyncStatusInfo', ()=>{
    beforeEach(()=>{
        mockFetch.mockClear();
    });
    it('should format sync status info correctly', async ()=>{
        // First verify that useSyncStatusInfo is a function
        expect(typeof _usestravasync.useSyncStatusInfo).toBe('function');
        const mockSyncStatus = {
            syncState: {
                last_activity_sync: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
                sync_enabled: true,
                sync_requests_today: 3,
                consecutive_errors: 0,
                last_error_message: null
            },
            activityCount: 125,
            canSync: true
        };
        mockFetch.mockResolvedValue({
            ok: true,
            json: async ()=>mockSyncStatus
        });
        const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useSyncStatusInfo)(), {
            wrapper: createWrapper()
        });
        await (0, _react.waitFor)(()=>{
            expect(result.current.lastSyncText).toBe('30 minutes ago');
        });
        expect(result.current.canSync).toBe(true);
        expect(result.current.activityCount).toBe(125);
        expect(result.current.todaySyncs).toBe(3);
        expect(result.current.maxSyncs).toBe(5);
        expect(result.current.consecutiveErrors).toBe(0);
    });
    it('should handle never synced status', async ()=>{
        mockFetch.mockResolvedValue({
            ok: true,
            json: async ()=>({
                    syncState: null,
                    activityCount: 0,
                    canSync: true
                })
        });
        const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useSyncStatusInfo)(), {
            wrapper: createWrapper()
        });
        await (0, _react.waitFor)(()=>{
            expect(result.current.lastSyncText).toBe('Never synced');
        });
        expect(result.current.canSync).toBe(true);
        expect(result.current.activityCount).toBe(0);
    });
    it('should format recent sync times correctly', async ()=>{
        const testCases = [
            {
                ago: 30 * 1000,
                expected: 'Just now'
            },
            {
                ago: 5 * 60 * 1000,
                expected: '5 minutes ago'
            },
            {
                ago: 2 * 60 * 60 * 1000,
                expected: '2 hours ago'
            },
            {
                ago: 24 * 60 * 60 * 1000,
                expected: 'Yesterday'
            }
        ];
        for (const testCase of testCases){
            const mockSyncStatus = {
                syncState: {
                    last_activity_sync: new Date(Date.now() - testCase.ago).toISOString(),
                    sync_enabled: true,
                    sync_requests_today: 1,
                    consecutive_errors: 0
                },
                activityCount: 100,
                canSync: true
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: async ()=>mockSyncStatus
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useSyncStatusInfo)(), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.lastSyncText).toBe(testCase.expected);
            });
        }
    });
    it('should identify sync disabled reasons', async ()=>{
        // Test rate limit exceeded
        const rateLimitStatus = {
            syncState: {
                sync_enabled: true,
                sync_requests_today: 5,
                last_activity_sync: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
            },
            activityCount: 100,
            canSync: false
        };
        mockFetch.mockResolvedValue({
            ok: true,
            json: async ()=>rateLimitStatus
        });
        const { result } = (0, _react.renderHook)(()=>(0, _usestravasync.useSyncStatusInfo)(), {
            wrapper: createWrapper()
        });
        await (0, _react.waitFor)(()=>{
            expect(result.current.syncDisabledReason).toBe('Daily sync limit reached (5/day)');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,