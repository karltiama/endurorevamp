{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\lib\\error-handling.ts"],"sourcesContent":["export enum ErrorType {\r\n  OAUTH_ERROR = 'OAUTH_ERROR',\r\n  API_ERROR = 'API_ERROR',\r\n  NETWORK_ERROR = 'NETWORK_ERROR',\r\n  TIMEOUT_ERROR = 'TIMEOUT_ERROR',\r\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\r\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\r\n}\r\n\r\nexport interface AppError {\r\n  type: ErrorType;\r\n  message: string;\r\n  details?: unknown;\r\n  code?: string | number;\r\n  retryable?: boolean;\r\n}\r\n\r\nexport class ErrorHandler {\r\n  /**\r\n   * Parse OAuth errors from URL parameters\r\n   */\r\n  static parseOAuthError(searchParams: URLSearchParams): AppError | null {\r\n    const error = searchParams.get('error');\r\n    const errorDescription = searchParams.get('error_description');\r\n    const errorUri = searchParams.get('error_uri');\r\n\r\n    if (!error) return null;\r\n\r\n    const errorMap: Record<string, string> = {\r\n      'access_denied': 'Access was denied by the user',\r\n      'invalid_request': 'The request is missing a required parameter',\r\n      'invalid_client': 'Client authentication failed',\r\n      'invalid_grant': 'The provided authorization grant is invalid',\r\n      'unauthorized_client': 'The client is not authorized to request an authorization code',\r\n      'unsupported_response_type': 'The authorization server does not support this response type',\r\n      'invalid_scope': 'The requested scope is invalid or unknown',\r\n      'server_error': 'The authorization server encountered an unexpected condition',\r\n      'temporarily_unavailable': 'The authorization server is currently unable to handle the request'\r\n    };\r\n\r\n    return {\r\n      type: ErrorType.OAUTH_ERROR,\r\n      message: errorDescription || errorMap[error] || `OAuth error: ${error}`,\r\n      details: { error, errorDescription, errorUri },\r\n      code: error,\r\n      retryable: error === 'temporarily_unavailable' || error === 'server_error'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse API errors from HTTP responses\r\n   */\r\n  static parseApiError(response: Response, responseData?: unknown): AppError {\r\n    const status = response.status;\r\n    const statusText = response.statusText;\r\n\r\n    let message = 'An unexpected error occurred';\r\n    let retryable = false;\r\n\r\n    switch (status) {\r\n      case 400:\r\n        message = (responseData && typeof responseData === 'object' && 'error' in responseData && typeof responseData.error === 'string') \r\n          ? responseData.error \r\n          : 'Invalid request';\r\n        break;\r\n      case 401:\r\n        message = 'Invalid authorization code. Please try connecting again.';\r\n        break;\r\n      case 403:\r\n        message = 'Access forbidden. Please check your permissions.';\r\n        break;\r\n      case 404:\r\n        message = 'The requested resource was not found';\r\n        break;\r\n      case 429:\r\n        message = 'Too many requests. Please wait a moment and try again.';\r\n        retryable = true;\r\n        break;\r\n      case 500:\r\n        message = 'Server error. Please try again later.';\r\n        retryable = true;\r\n        break;\r\n      case 502:\r\n      case 503:\r\n      case 504:\r\n        message = 'Service temporarily unavailable. Please try again later.';\r\n        retryable = true;\r\n        break;\r\n      default:\r\n        message = (responseData && typeof responseData === 'object' && 'error' in responseData && typeof responseData.error === 'string') \r\n          ? responseData.error \r\n          : `HTTP ${status}: ${statusText}`;\r\n    }\r\n\r\n    return {\r\n      type: ErrorType.API_ERROR,\r\n      message,\r\n      details: { status, statusText, responseData },\r\n      code: status,\r\n      retryable\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse network/fetch errors\r\n   */\r\n  static parseNetworkError(error: Error): AppError {\r\n    let message = 'Network error occurred';\r\n    let retryable = true;\r\n\r\n    if (error.name === 'AbortError') {\r\n      message = 'Request was cancelled';\r\n      retryable = false;\r\n    } else if (error.message.includes('timeout')) {\r\n      message = 'Request timed out. Please try again.';\r\n    } else if (error.message.includes('Failed to fetch')) {\r\n      message = 'Unable to connect. Please check your internet connection.';\r\n    }\r\n\r\n    return {\r\n      type: ErrorType.NETWORK_ERROR,\r\n      message,\r\n      details: { originalError: error.message, name: error.name },\r\n      retryable\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a timeout error\r\n   */\r\n  static createTimeoutError(duration: number): AppError {\r\n    return {\r\n      type: ErrorType.TIMEOUT_ERROR,\r\n      message: `Operation timed out after ${duration / 1000} seconds. Please try again.`,\r\n      details: { duration },\r\n      retryable: true\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse any error into a consistent format\r\n   */\r\n  static parseError(error: unknown): AppError {\r\n    if (error instanceof Error) {\r\n      // Check if it's a fetch/network error\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        return this.parseNetworkError(error);\r\n      }\r\n      \r\n      return {\r\n        type: ErrorType.UNKNOWN_ERROR,\r\n        message: error.message || 'An unexpected error occurred',\r\n        details: { originalError: error },\r\n        retryable: false\r\n      };\r\n    }\r\n\r\n    if (typeof error === 'string') {\r\n      return {\r\n        type: ErrorType.UNKNOWN_ERROR,\r\n        message: error,\r\n        retryable: false\r\n      };\r\n    }\r\n\r\n    return {\r\n      type: ErrorType.UNKNOWN_ERROR,\r\n      message: 'An unexpected error occurred',\r\n      details: { originalError: error },\r\n      retryable: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get user-friendly error message\r\n   */\r\n  static getUserMessage(error: AppError): string {\r\n    return error.message;\r\n  }\r\n\r\n  /**\r\n   * Check if an error is retryable\r\n   */\r\n  static isRetryable(error: AppError): boolean {\r\n    return error.retryable === true;\r\n  }\r\n\r\n  /**\r\n   * Log error with appropriate level\r\n   */\r\n  static logError(error: AppError, context?: string) {\r\n    const logContext = context ? `[${context}]` : '';\r\n    const logMessage = `${logContext} ${error.type}: ${error.message}`;\r\n\r\n    if (error.type === ErrorType.NETWORK_ERROR || error.retryable) {\r\n      console.warn(logMessage, error.details);\r\n    } else {\r\n      console.error(logMessage, error.details);\r\n    }\r\n  }\r\n} "],"names":["ErrorHandler","ErrorType","parseOAuthError","searchParams","error","get","errorDescription","errorUri","errorMap","type","message","details","code","retryable","parseApiError","response","responseData","status","statusText","parseNetworkError","name","includes","originalError","createTimeoutError","duration","parseError","Error","getUserMessage","isRetryable","logError","context","logContext","logMessage","console","warn"],"mappings":"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"}