{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\settings\\UnitPreferences.test.tsx"],"sourcesContent":["import React from 'react'\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport UnitPreferences from '@/components/settings/UnitPreferences'\r\n\r\n// Mock the useUnitPreferences hook\r\njest.mock('@/hooks/useUnitPreferences', () => ({\r\n  useUnitPreferences: jest.fn(),\r\n}))\r\n\r\nconst mockUseUnitPreferences = require('@/hooks/useUnitPreferences').useUnitPreferences\r\n\r\nconst createTestQueryClient = () => {\r\n  return new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        retry: false,\r\n      },\r\n    },\r\n  })\r\n}\r\n\r\ndescribe('UnitPreferences Component', () => {\r\n  let queryClient: QueryClient\r\n\r\n  beforeEach(() => {\r\n    queryClient = createTestQueryClient()\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n\r\n  it('shows loading state when preferences are loading', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: true,\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn(),\r\n    })\r\n\r\n    render(<UnitPreferences />, { wrapper })\r\n\r\n    expect(screen.getByText('Units & Display')).toBeInTheDocument()\r\n    expect(screen.getByText('Choose your preferred units for distances and pace')).toBeInTheDocument()\r\n    \r\n    // Should show loading animation\r\n    expect(document.querySelector('.animate-pulse')).toBeInTheDocument()\r\n  })\r\n\r\n  it('displays current preferences and allows switching units', async () => {\r\n    const mockToggleUnits = jest.fn().mockResolvedValue(undefined)\r\n    \r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: mockToggleUnits,\r\n    })\r\n\r\n    render(<UnitPreferences />, { wrapper })\r\n\r\n    // Should show the unit selection buttons\r\n    expect(screen.getByText('Kilometers (km)')).toBeInTheDocument()\r\n    expect(screen.getByText('Miles (mi)')).toBeInTheDocument()\r\n    \r\n    // Should show current settings\r\n    expect(screen.getByText('Current Settings')).toBeInTheDocument()\r\n    expect(screen.getByText('Distance: Kilometers (km)')).toBeInTheDocument()\r\n    expect(screen.getByText('Pace: min/km')).toBeInTheDocument()\r\n    \r\n    // Should show examples\r\n    expect(screen.getByText('Examples with current setting:')).toBeInTheDocument()\r\n    expect(screen.getByText('• Distance: 5.0 km')).toBeInTheDocument()\r\n    expect(screen.getByText('• Pace: 5:00/km (5:00 per km converted)')).toBeInTheDocument()\r\n\r\n    // Click to switch to miles\r\n    const milesButton = screen.getByRole('button', { name: /Miles \\(mi\\)/ })\r\n    fireEvent.click(milesButton)\r\n\r\n    await waitFor(() => {\r\n      expect(mockToggleUnits).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  it('shows miles preferences when set to miles', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'miles', pace: 'min/mile' },\r\n      isLoading: false,\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn(),\r\n    })\r\n\r\n    render(<UnitPreferences />, { wrapper })\r\n\r\n    // Should show miles in current settings\r\n    expect(screen.getByText('Distance: Miles (mi)')).toBeInTheDocument()\r\n    expect(screen.getByText('Pace: min/mile')).toBeInTheDocument()\r\n    \r\n    // Should show examples in miles\r\n    expect(screen.getByText('• Distance: 3.1 mi')).toBeInTheDocument()\r\n    expect(screen.getByText('• Pace: 8:02/mi (5:00 per km converted)')).toBeInTheDocument()\r\n    expect(screen.getByText('• Long run: 13.1 mi')).toBeInTheDocument()\r\n  })\r\n\r\n  it('shows correct active state for buttons', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn(),\r\n    })\r\n\r\n    render(<UnitPreferences />, { wrapper })\r\n\r\n    // km button should show active state (check mark)\r\n    const kmButton = screen.getByRole('button', { name: /Kilometers \\(km\\)/ })\r\n    expect(kmButton).toBeInTheDocument()\r\n    \r\n    // Should show check mark for active option\r\n    expect(document.querySelector('svg')).toBeInTheDocument()\r\n  })\r\n\r\n  it('allows clicking on unit buttons', async () => {\r\n    const mockToggleUnits = jest.fn().mockResolvedValue(undefined)\r\n    \r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: mockToggleUnits,\r\n    })\r\n\r\n    render(<UnitPreferences />, { wrapper })\r\n\r\n    const milesButton = screen.getByRole('button', { name: /Miles \\(mi\\)/ })\r\n    fireEvent.click(milesButton)\r\n    \r\n    await waitFor(() => {\r\n      expect(mockToggleUnits).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  it('handles switching from miles to kilometers', async () => {\r\n    const mockToggleUnits = jest.fn().mockResolvedValue(undefined)\r\n    \r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'miles', pace: 'min/mile' },\r\n      isLoading: false,\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: mockToggleUnits,\r\n    })\r\n\r\n    render(<UnitPreferences />, { wrapper })\r\n\r\n    const kmButton = screen.getByRole('button', { name: /Kilometers \\(km\\)/ })\r\n    fireEvent.click(kmButton)\r\n\r\n    await waitFor(() => {\r\n      expect(mockToggleUnits).toHaveBeenCalled()\r\n    })\r\n  })\r\n}) "],"names":["jest","mock","useUnitPreferences","fn","mockUseUnitPreferences","require","createTestQueryClient","QueryClient","defaultOptions","queries","retry","describe","queryClient","beforeEach","clearAllMocks","wrapper","children","QueryClientProvider","client","it","mockReturnValue","preferences","distance","pace","isLoading","setDistanceUnit","toggleUnits","render","UnitPreferences","expect","screen","getByText","toBeInTheDocument","document","querySelector","mockToggleUnits","mockResolvedValue","undefined","milesButton","getByRole","name","fireEvent","click","waitFor","toHaveBeenCalled","kmButton"],"mappings":"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"}