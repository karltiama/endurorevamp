b0279bc414a9e00a9c08bfccaae9c890
"use strict";
// Mock the useUnitPreferences hook
jest.mock('@/hooks/useUnitPreferences', ()=>({
        useUnitPreferences: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _UnitPreferences = /*#__PURE__*/ _interop_require_default(require("../../../components/settings/UnitPreferences"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseUnitPreferences = require('@/hooks/useUnitPreferences').useUnitPreferences;
const createTestQueryClient = ()=>{
    return new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
};
describe('UnitPreferences Component', ()=>{
    let queryClient;
    beforeEach(()=>{
        queryClient = createTestQueryClient();
        jest.clearAllMocks();
    });
    const wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
    it('shows loading state when preferences are loading', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: true,
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UnitPreferences.default, {}), {
            wrapper
        });
        expect(_react1.screen.getByText('Units & Display')).toBeInTheDocument();
        expect(_react1.screen.getByText('Choose your preferred units for distances and pace')).toBeInTheDocument();
        // Should show loading animation
        expect(document.querySelector('.animate-pulse')).toBeInTheDocument();
    });
    it('displays current preferences and allows switching units', async ()=>{
        const mockToggleUnits = jest.fn().mockResolvedValue(undefined);
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            setDistanceUnit: jest.fn(),
            toggleUnits: mockToggleUnits
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UnitPreferences.default, {}), {
            wrapper
        });
        // Should show the unit selection buttons
        expect(_react1.screen.getByText('Kilometers (km)')).toBeInTheDocument();
        expect(_react1.screen.getByText('Miles (mi)')).toBeInTheDocument();
        // Should show current settings
        expect(_react1.screen.getByText('Current Settings')).toBeInTheDocument();
        expect(_react1.screen.getByText('Distance: Kilometers (km)')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pace: min/km')).toBeInTheDocument();
        // Should show examples
        expect(_react1.screen.getByText('Examples with current setting:')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Distance: 5.0 km')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Pace: 5:00/km (5:00 per km converted)')).toBeInTheDocument();
        // Click to switch to miles
        const milesButton = _react1.screen.getByRole('button', {
            name: /Miles \(mi\)/
        });
        _react1.fireEvent.click(milesButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockToggleUnits).toHaveBeenCalled();
        });
    });
    it('shows miles preferences when set to miles', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'miles',
                pace: 'min/mile'
            },
            isLoading: false,
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UnitPreferences.default, {}), {
            wrapper
        });
        // Should show miles in current settings
        expect(_react1.screen.getByText('Distance: Miles (mi)')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pace: min/mile')).toBeInTheDocument();
        // Should show examples in miles
        expect(_react1.screen.getByText('• Distance: 3.1 mi')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Pace: 8:02/mi (5:00 per km converted)')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Long run: 13.1 mi')).toBeInTheDocument();
    });
    it('shows correct active state for buttons', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UnitPreferences.default, {}), {
            wrapper
        });
        // km button should show active state (check mark)
        const kmButton = _react1.screen.getByRole('button', {
            name: /Kilometers \(km\)/
        });
        expect(kmButton).toBeInTheDocument();
        // Should show check mark for active option
        expect(document.querySelector('svg')).toBeInTheDocument();
    });
    it('allows clicking on unit buttons', async ()=>{
        const mockToggleUnits = jest.fn().mockResolvedValue(undefined);
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            setDistanceUnit: jest.fn(),
            toggleUnits: mockToggleUnits
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UnitPreferences.default, {}), {
            wrapper
        });
        const milesButton = _react1.screen.getByRole('button', {
            name: /Miles \(mi\)/
        });
        _react1.fireEvent.click(milesButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockToggleUnits).toHaveBeenCalled();
        });
    });
    it('handles switching from miles to kilometers', async ()=>{
        const mockToggleUnits = jest.fn().mockResolvedValue(undefined);
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'miles',
                pace: 'min/mile'
            },
            isLoading: false,
            setDistanceUnit: jest.fn(),
            toggleUnits: mockToggleUnits
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UnitPreferences.default, {}), {
            wrapper
        });
        const kmButton = _react1.screen.getByRole('button', {
            name: /Kilometers \(km\)/
        });
        _react1.fireEvent.click(kmButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockToggleUnits).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,