{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\lib\\training\\training-load.test.ts"],"sourcesContent":["import { TrainingLoadCalculator, estimateAthleteThresholds } from '@/lib/training/training-load'\r\nimport { Activity } from '@/lib/strava/types'\r\n\r\n// Mock activity data for testing\r\nconst createMockActivity = (overrides: Partial<Activity> = {}): Activity => ({\r\n  id: '1',\r\n  user_id: 'user-123',\r\n  strava_activity_id: 123456789,\r\n  name: 'Morning Run',\r\n  sport_type: 'Run',\r\n  distance: 5000, // 5km\r\n  moving_time: 1800, // 30 minutes\r\n  elapsed_time: 1800,\r\n  total_elevation_gain: 50,\r\n  start_date: '2024-01-15T08:00:00Z',\r\n  start_date_local: '2024-01-15T08:00:00Z',\r\n  timezone: 'UTC',\r\n  average_heartrate: 150,\r\n  max_heartrate: 175,\r\n  has_heartrate: true,\r\n  average_watts: 200,\r\n  weighted_average_watts: 210,\r\n  trainer: false,\r\n  commute: false,\r\n  manual: false,\r\n  private: false,\r\n  device_watts: true,\r\n  kudos_count: 5,\r\n  comment_count: 1,\r\n  athlete_count: 1,\r\n  photo_count: 0,\r\n  achievement_count: 0,\r\n  pr_count: 0,\r\n  ...overrides\r\n})\r\n\r\nconst mockAthleteThresholds = {\r\n  maxHeartRate: 190,\r\n  restingHeartRate: 60,\r\n  functionalThresholdPower: 250,\r\n  lactateThreshold: 161\r\n}\r\n\r\ndescribe('TrainingLoadCalculator', () => {\r\n  let calculator: TrainingLoadCalculator\r\n\r\n  beforeEach(() => {\r\n    calculator = new TrainingLoadCalculator(mockAthleteThresholds)\r\n  })\r\n\r\n  describe('TRIMP Calculation', () => {\r\n    it('should calculate TRIMP for an activity with heart rate data', () => {\r\n      const activity = createMockActivity({\r\n        average_heartrate: 150,\r\n        moving_time: 3600, // 1 hour\r\n        has_heartrate: true\r\n      })\r\n\r\n      const trimp = calculator.calculateTRIMP(activity)\r\n      \r\n      expect(trimp).toBeGreaterThan(0)\r\n      expect(typeof trimp).toBe('number')\r\n    })\r\n\r\n    it('should return 0 for activities without heart rate data', () => {\r\n      const activity = createMockActivity({\r\n        has_heartrate: false,\r\n        average_heartrate: undefined\r\n      })\r\n\r\n      const trimp = calculator.calculateTRIMP(activity)\r\n      expect(trimp).toBe(0)\r\n    })\r\n\r\n    it('should apply sport-specific multipliers', () => {\r\n      const runActivity = createMockActivity({\r\n        sport_type: 'Run',\r\n        average_heartrate: 150,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const rideActivity = createMockActivity({\r\n        sport_type: 'Ride',\r\n        average_heartrate: 150,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const runTrimp = calculator.calculateTRIMP(runActivity)\r\n      const rideTrimp = calculator.calculateTRIMP(rideActivity)\r\n\r\n      // Running should have higher TRIMP than cycling at same HR\r\n      expect(runTrimp).toBeGreaterThan(rideTrimp)\r\n    })\r\n\r\n    it('should increase TRIMP with higher heart rate', () => {\r\n      const lowHR = createMockActivity({\r\n        average_heartrate: 130,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const highHR = createMockActivity({\r\n        average_heartrate: 170,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const lowTrimp = calculator.calculateTRIMP(lowHR)\r\n      const highTrimp = calculator.calculateTRIMP(highHR)\r\n\r\n      expect(highTrimp).toBeGreaterThan(lowTrimp)\r\n    })\r\n  })\r\n\r\n  describe('TSS Calculation', () => {\r\n    it('should calculate power-based TSS when power data is available', () => {\r\n      const activity = createMockActivity({\r\n        average_watts: 200,\r\n        moving_time: 3600 // 1 hour\r\n      })\r\n\r\n      const tss = calculator.calculateTSS(activity)\r\n      \r\n      expect(tss).toBeGreaterThan(0)\r\n      expect(typeof tss).toBe('number')\r\n    })\r\n\r\n    it('should calculate HR-based TSS when only heart rate is available', () => {\r\n      const activity = createMockActivity({\r\n        average_watts: undefined,\r\n        average_heartrate: 150,\r\n        has_heartrate: true,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const tss = calculator.calculateTSS(activity)\r\n      \r\n      expect(tss).toBeGreaterThan(0)\r\n      expect(typeof tss).toBe('number')\r\n    })\r\n\r\n    it('should prefer power-based TSS over HR-based when both are available', () => {\r\n      const powerActivity = createMockActivity({\r\n        average_watts: 200,\r\n        average_heartrate: 150,\r\n        has_heartrate: true,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const hrOnlyActivity = createMockActivity({\r\n        average_watts: undefined,\r\n        average_heartrate: 150,\r\n        has_heartrate: true,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const powerTSS = calculator.calculateTSS(powerActivity)\r\n      const hrTSS = calculator.calculateTSS(hrOnlyActivity)\r\n\r\n      // Both should be positive but power-based calculation should be different\r\n      expect(powerTSS).toBeGreaterThan(0)\r\n      expect(hrTSS).toBeGreaterThan(0)\r\n      expect(powerTSS).not.toBe(hrTSS)\r\n    })\r\n\r\n    it('should scale TSS with duration', () => {\r\n      const shortActivity = createMockActivity({\r\n        average_watts: 200,\r\n        moving_time: 1800 // 30 minutes\r\n      })\r\n\r\n      const longActivity = createMockActivity({\r\n        average_watts: 200,\r\n        moving_time: 7200 // 2 hours\r\n      })\r\n\r\n      const shortTSS = calculator.calculateTSS(shortActivity)\r\n      const longTSS = calculator.calculateTSS(longActivity)\r\n\r\n      expect(longTSS).toBeGreaterThan(shortTSS)\r\n    })\r\n  })\r\n\r\n  describe('Normalized Load Calculation', () => {\r\n    it('should calculate normalized load on 0-100 scale', () => {\r\n      const activity = createMockActivity({\r\n        average_heartrate: 150,\r\n        average_watts: 200,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const normalizedLoad = calculator.calculateNormalizedLoad(activity)\r\n      \r\n      expect(normalizedLoad).toBeGreaterThanOrEqual(0)\r\n      expect(normalizedLoad).toBeLessThanOrEqual(100)\r\n    })\r\n\r\n    it('should combine TRIMP and TSS when both are available', () => {\r\n      const fullDataActivity = createMockActivity({\r\n        average_heartrate: 150,\r\n        average_watts: 200,\r\n        has_heartrate: true,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const hrOnlyActivity = createMockActivity({\r\n        average_heartrate: 150,\r\n        has_heartrate: true,\r\n        average_watts: undefined,\r\n        moving_time: 3600\r\n      })\r\n\r\n      const fullLoad = calculator.calculateNormalizedLoad(fullDataActivity)\r\n      const hrLoad = calculator.calculateNormalizedLoad(hrOnlyActivity)\r\n\r\n      expect(fullLoad).toBeGreaterThan(0)\r\n      expect(hrLoad).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  describe('Process Activities', () => {\r\n    it('should filter out very short activities', () => {\r\n      const activities = [\r\n        createMockActivity({ moving_time: 120 }), // 2 minutes - should be filtered\r\n        createMockActivity({ moving_time: 1800 }), // 30 minutes - should be included\r\n        createMockActivity({ moving_time: 3600 }) // 1 hour - should be included\r\n      ]\r\n\r\n      const loadPoints = calculator.processActivities(activities)\r\n      \r\n      expect(loadPoints).toHaveLength(2) // Only activities > 5 minutes\r\n    })\r\n\r\n    it('should sort load points by date', () => {\r\n      const activities = [\r\n        createMockActivity({ \r\n          start_date_local: '2024-01-15T08:00:00Z',\r\n          moving_time: 1800 \r\n        }),\r\n        createMockActivity({ \r\n          start_date_local: '2024-01-14T08:00:00Z',\r\n          moving_time: 1800 \r\n        }),\r\n        createMockActivity({ \r\n          start_date_local: '2024-01-16T08:00:00Z',\r\n          moving_time: 1800 \r\n        })\r\n      ]\r\n\r\n      const loadPoints = calculator.processActivities(activities)\r\n      \r\n      expect(loadPoints).toHaveLength(3)\r\n      expect(new Date(loadPoints[0].date).getTime()).toBeLessThanOrEqual(\r\n        new Date(loadPoints[1].date).getTime()\r\n      )\r\n      expect(new Date(loadPoints[1].date).getTime()).toBeLessThanOrEqual(\r\n        new Date(loadPoints[2].date).getTime()\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Training Load Metrics', () => {\r\n    it('should calculate training load metrics from load points', () => {\r\n      const loadPoints = Array.from({ length: 60 }, (_, i) => ({\r\n        date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),\r\n        trimp: 50 + Math.random() * 50,\r\n        tss: 60 + Math.random() * 60,\r\n        normalizedLoad: 40 + Math.random() * 40\r\n      }))\r\n\r\n      const metrics = calculator.calculateLoadMetrics(loadPoints)\r\n      \r\n      expect(metrics.acute).toBeGreaterThanOrEqual(0)\r\n      expect(metrics.chronic).toBeGreaterThanOrEqual(0)\r\n      expect(typeof metrics.balance).toBe('number')\r\n      expect(typeof metrics.rampRate).toBe('number')\r\n      expect(['peak', 'maintain', 'build', 'recover']).toContain(metrics.status)\r\n      expect(typeof metrics.recommendation).toBe('string')\r\n    })\r\n\r\n    it('should handle empty load points gracefully', () => {\r\n      const metrics = calculator.calculateLoadMetrics([])\r\n      \r\n      expect(metrics.acute).toBe(0)\r\n      expect(metrics.chronic).toBe(0)\r\n      expect(metrics.balance).toBe(0)\r\n      expect(metrics.rampRate).toBe(0)\r\n      expect(metrics.status).toBe('recover')\r\n      expect(metrics.recommendation).toContain('Start building')\r\n    })\r\n  })\r\n})\r\n\r\ndescribe('estimateAthleteThresholds', () => {\r\n  it('should estimate thresholds from activity data', () => {\r\n    const activities = [\r\n      createMockActivity({\r\n        max_heartrate: 185,\r\n        average_heartrate: 150,\r\n        has_heartrate: true,\r\n        average_watts: 220,\r\n        moving_time: 3600\r\n      }),\r\n      createMockActivity({\r\n        max_heartrate: 180,\r\n        average_heartrate: 145,\r\n        has_heartrate: true,\r\n        average_watts: 210,\r\n        moving_time: 3600\r\n      })\r\n    ]\r\n\r\n    const thresholds = estimateAthleteThresholds(activities)\r\n    \r\n    expect(thresholds.maxHeartRate).toBeGreaterThan(0)\r\n    expect(thresholds.restingHeartRate).toBeGreaterThan(0)\r\n  })\r\n\r\n  it('should provide default values when no data is available', () => {\r\n    const thresholds = estimateAthleteThresholds([])\r\n    \r\n    expect(thresholds.maxHeartRate).toBe(190) // Default max HR\r\n    expect(thresholds.restingHeartRate).toBe(60) // Default resting HR\r\n    expect(thresholds.functionalThresholdPower).toBeUndefined()\r\n  })\r\n\r\n  it('should handle activities without heart rate or power data', () => {\r\n    const activities = [\r\n      createMockActivity({\r\n        has_heartrate: false,\r\n        average_heartrate: undefined,\r\n        average_watts: undefined\r\n      })\r\n    ]\r\n\r\n    const thresholds = estimateAthleteThresholds(activities)\r\n    \r\n    // Should fall back to defaults\r\n    expect(thresholds.maxHeartRate).toBe(190)\r\n    expect(thresholds.restingHeartRate).toBe(60)\r\n    expect(thresholds.functionalThresholdPower).toBeUndefined()\r\n  })\r\n}) "],"names":["createMockActivity","overrides","id","user_id","strava_activity_id","name","sport_type","distance","moving_time","elapsed_time","total_elevation_gain","start_date","start_date_local","timezone","average_heartrate","max_heartrate","has_heartrate","average_watts","weighted_average_watts","trainer","commute","manual","private","device_watts","kudos_count","comment_count","athlete_count","photo_count","achievement_count","pr_count","mockAthleteThresholds","maxHeartRate","restingHeartRate","functionalThresholdPower","lactateThreshold","describe","calculator","beforeEach","TrainingLoadCalculator","it","activity","trimp","calculateTRIMP","expect","toBeGreaterThan","toBe","undefined","runActivity","rideActivity","runTrimp","rideTrimp","lowHR","highHR","lowTrimp","highTrimp","tss","calculateTSS","powerActivity","hrOnlyActivity","powerTSS","hrTSS","not","shortActivity","longActivity","shortTSS","longTSS","normalizedLoad","calculateNormalizedLoad","toBeGreaterThanOrEqual","toBeLessThanOrEqual","fullDataActivity","fullLoad","hrLoad","activities","loadPoints","processActivities","toHaveLength","Date","date","getTime","Array","from","length","_","i","now","toISOString","Math","random","metrics","calculateLoadMetrics","acute","chronic","balance","rampRate","toContain","status","recommendation","thresholds","estimateAthleteThresholds","toBeUndefined"],"mappings":"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"}