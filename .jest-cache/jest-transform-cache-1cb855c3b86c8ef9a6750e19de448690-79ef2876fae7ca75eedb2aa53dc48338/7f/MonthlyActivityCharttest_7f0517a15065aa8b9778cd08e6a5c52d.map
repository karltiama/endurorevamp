{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\dashboard\\MonthlyActivityChart.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react'\r\nimport { MonthlyActivityChart } from '@/components/dashboard/MonthlyActivityChart'\r\nimport { useUserActivities } from '@/hooks/use-user-activities'\r\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { convertDistance } from '@/lib/utils'\r\nimport type { Activity } from '@/lib/strava/types'\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/use-user-activities')\r\njest.mock('@/hooks/useUnitPreferences')\r\n\r\nconst mockUseUserActivities = useUserActivities as jest.MockedFunction<typeof useUserActivities>\r\nconst mockUseUnitPreferences = useUnitPreferences as jest.MockedFunction<typeof useUnitPreferences>\r\n\r\n// Create mock activities for testing\r\nconst createMockActivity = (overrides: Partial<Activity> = {}): Activity => ({\r\n  id: '1',\r\n  user_id: 'user-1',\r\n  strava_activity_id: 12345,\r\n  name: 'Morning Run',\r\n  sport_type: 'Run',\r\n  distance: 5000, // 5 km\r\n  moving_time: 1800, // 30 minutes\r\n  elapsed_time: 1800,\r\n  total_elevation_gain: 100,\r\n  start_date: new Date().toISOString(),\r\n  start_date_local: new Date().toISOString(),\r\n  timezone: 'UTC',\r\n  created_at: new Date().toISOString(),\r\n  ...overrides,\r\n})\r\n\r\n// Test wrapper component\r\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        retry: false,\r\n      },\r\n    },\r\n  })\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n}\r\n\r\ndescribe('MonthlyActivityChart', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n    \r\n    // Mock default unit preferences (km)\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: {\r\n        distance: 'km',\r\n        pace: 'min/km'\r\n      },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn(),\r\n    })\r\n  })\r\n\r\n  it('renders loading state', () => {\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: true,\r\n      error: null,\r\n    } as any)\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <MonthlyActivityChart userId=\"user-1\" />\r\n      </TestWrapper>\r\n    )\r\n\r\n    expect(screen.getByText('Loading activity data...')).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders error state', () => {\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: false,\r\n      error: new Error('Failed to fetch activities'),\r\n    } as any)\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <MonthlyActivityChart userId=\"user-1\" />\r\n      </TestWrapper>\r\n    )\r\n\r\n    expect(screen.getByText('Failed to fetch activities')).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders monthly activity chart with km by default', () => {\r\n    const mockActivities = [createMockActivity()]\r\n\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: mockActivities,\r\n      isLoading: false,\r\n      error: null,\r\n    } as any)\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <MonthlyActivityChart userId=\"user-1\" />\r\n      </TestWrapper>\r\n    )\r\n\r\n    // Check if the component renders the correct title and description\r\n    expect(screen.getByText('Monthly Activity')).toBeInTheDocument()\r\n    expect(screen.getByText('Your activity distance by month this year')).toBeInTheDocument()\r\n  })\r\n\r\n  it('uses unit preferences correctly', () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: {\r\n        distance: 'miles',\r\n        pace: 'min/mile'\r\n      },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn(),\r\n    })\r\n\r\n    const mockActivities = [createMockActivity()]\r\n\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: mockActivities,\r\n      isLoading: false,\r\n      error: null,\r\n    } as any)\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <MonthlyActivityChart userId=\"user-1\" />\r\n      </TestWrapper>\r\n    )\r\n\r\n    // Verify that the component renders without errors when using miles\r\n    expect(screen.getByText('Monthly Activity')).toBeInTheDocument()\r\n  })\r\n})\r\n\r\n// Test the conversion logic separately\r\ndescribe('Distance conversion logic', () => {\r\n  it('converts distance correctly from meters to km', () => {\r\n    const result = convertDistance(5000, 'km')\r\n    expect(result).toBe(5)\r\n  })\r\n\r\n  it('converts distance correctly from meters to miles', () => {\r\n    const result = convertDistance(1609.34, 'miles') // 1 mile in meters\r\n    expect(result).toBeCloseTo(1, 1)\r\n  })\r\n}) "],"names":["jest","mock","mockUseUserActivities","useUserActivities","mockUseUnitPreferences","useUnitPreferences","createMockActivity","overrides","id","user_id","strava_activity_id","name","sport_type","distance","moving_time","elapsed_time","total_elevation_gain","start_date","Date","toISOString","start_date_local","timezone","created_at","TestWrapper","children","queryClient","QueryClient","defaultOptions","queries","retry","QueryClientProvider","client","describe","beforeEach","clearAllMocks","mockReturnValue","preferences","pace","isLoading","updatePreferences","fn","setDistanceUnit","toggleUnits","it","data","undefined","error","render","MonthlyActivityChart","userId","expect","screen","getByText","toBeInTheDocument","Error","mockActivities","result","convertDistance","toBe","toBeCloseTo"],"mappings":"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"}