f1dde23331085cfd14a84bb93fbd966a
"use strict";
// Mock the hooks
jest.mock('@/hooks/use-user-activities');
jest.mock('@/hooks/useUnitPreferences');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _MonthlyActivityChart = require("../../../components/dashboard/MonthlyActivityChart");
const _useuseractivities = require("../../../hooks/use-user-activities");
const _useUnitPreferences = require("../../../hooks/useUnitPreferences");
const _reactquery = require("@tanstack/react-query");
const _utils = require("../../../lib/utils");
const mockUseUserActivities = _useuseractivities.useUserActivities;
const mockUseUnitPreferences = _useUnitPreferences.useUnitPreferences;
// Create mock activities for testing
const createMockActivity = (overrides = {})=>({
        id: '1',
        user_id: 'user-1',
        strava_activity_id: 12345,
        name: 'Morning Run',
        sport_type: 'Run',
        distance: 5000,
        moving_time: 1800,
        elapsed_time: 1800,
        total_elevation_gain: 100,
        start_date: new Date().toISOString(),
        start_date_local: new Date().toISOString(),
        timezone: 'UTC',
        created_at: new Date().toISOString(),
        ...overrides
    });
// Test wrapper component
const TestWrapper = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
describe('MonthlyActivityChart', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock default unit preferences (km)
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
    });
    it('renders loading state', ()=>{
        mockUseUserActivities.mockReturnValue({
            data: undefined,
            isLoading: true,
            error: null
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MonthlyActivityChart.MonthlyActivityChart, {
                userId: "user-1"
            })
        }));
        expect(_react.screen.getByText('Loading activity data...')).toBeInTheDocument();
    });
    it('renders error state', ()=>{
        mockUseUserActivities.mockReturnValue({
            data: undefined,
            isLoading: false,
            error: new Error('Failed to fetch activities')
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MonthlyActivityChart.MonthlyActivityChart, {
                userId: "user-1"
            })
        }));
        expect(_react.screen.getByText('Failed to fetch activities')).toBeInTheDocument();
    });
    it('renders monthly activity chart with km by default', ()=>{
        const mockActivities = [
            createMockActivity()
        ];
        mockUseUserActivities.mockReturnValue({
            data: mockActivities,
            isLoading: false,
            error: null
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MonthlyActivityChart.MonthlyActivityChart, {
                userId: "user-1"
            })
        }));
        // Check if the component renders the correct title and description
        expect(_react.screen.getByText('Monthly Activity')).toBeInTheDocument();
        expect(_react.screen.getByText('Your activity distance by month this year')).toBeInTheDocument();
    });
    it('uses unit preferences correctly', ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'miles',
                pace: 'min/mile'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockActivities = [
            createMockActivity()
        ];
        mockUseUserActivities.mockReturnValue({
            data: mockActivities,
            isLoading: false,
            error: null
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MonthlyActivityChart.MonthlyActivityChart, {
                userId: "user-1"
            })
        }));
        // Verify that the component renders without errors when using miles
        expect(_react.screen.getByText('Monthly Activity')).toBeInTheDocument();
    });
});
// Test the conversion logic separately
describe('Distance conversion logic', ()=>{
    it('converts distance correctly from meters to km', ()=>{
        const result = (0, _utils.convertDistance)(5000, 'km');
        expect(result).toBe(5);
    });
    it('converts distance correctly from meters to miles', ()=>{
        const result = (0, _utils.convertDistance)(1609.34, 'miles') // 1 mile in meters
        ;
        expect(result).toBeCloseTo(1, 1);
    });
});

//# sourceMappingURL=data:application/json;base64,