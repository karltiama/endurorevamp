80c8fb8a01b2cbf64570da5d3717becd
"use strict";
// Mock the hook
jest.mock('@/hooks/use-user-activities');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _ActivitiesDashboard = require("../../../components/strava/ActivitiesDashboard");
const _useuseractivities = require("../../../hooks/use-user-activities");
const mockUseUserActivities = _useuseractivities.useUserActivities;
// Mock activities data (database format)
const mockActivities = [
    {
        id: '1',
        user_id: 'test-user-id',
        strava_activity_id: 123456789,
        name: 'Morning Run',
        distance: 5000,
        moving_time: 1800,
        elapsed_time: 1900,
        total_elevation_gain: 50,
        activity_type: 'Run',
        sport_type: 'Run',
        start_date: '2024-01-15T08:00:00Z',
        start_date_local: '2024-01-15T08:00:00Z',
        timezone: 'UTC',
        average_speed: 2.78,
        max_speed: 3.5,
        average_heartrate: 150,
        kudos_count: 5,
        comment_count: 1,
        athlete_count: 1,
        photo_count: 0,
        trainer: false,
        commute: false,
        manual: false,
        private: false,
        created_at: '2024-01-15T08:00:00Z',
        updated_at: '2024-01-15T08:00:00Z'
    },
    {
        id: '2',
        user_id: 'test-user-id',
        strava_activity_id: 123456790,
        name: 'Evening Bike Ride',
        distance: 25000,
        moving_time: 3600,
        elapsed_time: 3720,
        total_elevation_gain: 200,
        activity_type: 'Ride',
        sport_type: 'Ride',
        start_date: '2024-01-14T18:00:00Z',
        start_date_local: '2024-01-14T18:00:00Z',
        timezone: 'UTC',
        average_speed: 6.94,
        max_speed: 8.33,
        average_heartrate: 140,
        average_watts: 180,
        kudos_count: 8,
        comment_count: 2,
        athlete_count: 1,
        photo_count: 1,
        trainer: false,
        commute: false,
        manual: false,
        private: false,
        created_at: '2024-01-14T18:00:00Z',
        updated_at: '2024-01-14T18:00:00Z'
    }
];
// Test wrapper component
const TestWrapper = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
describe('ActivitiesDashboard', ()=>{
    const defaultProps = {
        userId: 'test-user-id'
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Loading State', ()=>{
        it('shows loading state when data is being fetched', ()=>{
            mockUseUserActivities.mockReturnValue({
                data: undefined,
                isLoading: true,
                error: null,
                refetch: jest.fn(),
                isRefetching: false,
                isError: false,
                isSuccess: false,
                isFetching: true
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('Recent Activities')).toBeInTheDocument();
            expect(_react.screen.getByText('Loading your latest activities from database...')).toBeInTheDocument();
            // Should show skeleton loaders
            const skeletons = _react.screen.getAllByRole('generic');
            const animatedSkeletons = skeletons.filter((el)=>el.className.includes('animate-pulse'));
            expect(animatedSkeletons.length).toBeGreaterThan(0);
        });
    });
    describe('Error State', ()=>{
        const mockRefetch = jest.fn();
        it('shows error state when there is an error', ()=>{
            const error = new Error('Failed to fetch activities');
            mockUseUserActivities.mockReturnValue({
                data: undefined,
                isLoading: false,
                error,
                refetch: mockRefetch,
                isRefetching: false,
                isError: true,
                isSuccess: false,
                isFetching: false
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('Recent Activities')).toBeInTheDocument();
            expect(_react.screen.getByText('Unable to load your activities from database')).toBeInTheDocument();
            expect(_react.screen.getByText('Failed to fetch activities')).toBeInTheDocument();
            expect(_react.screen.getByText('Try Again')).toBeInTheDocument();
            expect(_react.screen.getByText('ðŸ’¡ Try syncing your Strava data to populate the database.')).toBeInTheDocument();
        });
        it('calls refetch when try again button is clicked', ()=>{
            const error = new Error('Failed to fetch activities');
            mockUseUserActivities.mockReturnValue({
                data: undefined,
                isLoading: false,
                error,
                refetch: mockRefetch,
                isRefetching: false,
                isError: true,
                isSuccess: false,
                isFetching: false
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            const tryAgainButton = _react.screen.getByText('Try Again');
            _react.fireEvent.click(tryAgainButton);
            expect(mockRefetch).toHaveBeenCalledTimes(1);
        });
        it('shows loading state on try again button when refetching', ()=>{
            const error = new Error('Failed to fetch activities');
            mockUseUserActivities.mockReturnValue({
                data: undefined,
                isLoading: false,
                error,
                refetch: mockRefetch,
                isRefetching: true,
                isError: true,
                isSuccess: false,
                isFetching: true
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            const tryAgainButton = _react.screen.getByRole('button', {
                name: /try again/i
            });
            expect(tryAgainButton).toBeDisabled();
        });
    });
    describe('Empty State', ()=>{
        it('shows empty state when no activities are returned', ()=>{
            mockUseUserActivities.mockReturnValue({
                data: [],
                isLoading: false,
                error: null,
                refetch: jest.fn(),
                isRefetching: false,
                isError: false,
                isSuccess: true,
                isFetching: false
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('Recent Activities')).toBeInTheDocument();
            expect(_react.screen.getByText('No activities found')).toBeInTheDocument();
            expect(_react.screen.getByText('No activities found in your database.')).toBeInTheDocument();
            expect(_react.screen.getByText('ðŸ’¡ Click "Sync Strava Data" to load your activities from Strava.')).toBeInTheDocument();
        });
        it('shows empty state when activities data is undefined', ()=>{
            mockUseUserActivities.mockReturnValue({
                data: undefined,
                isLoading: false,
                error: null,
                refetch: jest.fn(),
                isRefetching: false,
                isError: false,
                isSuccess: true,
                isFetching: false
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('No activities found')).toBeInTheDocument();
            expect(_react.screen.getByText('No activities found in your database.')).toBeInTheDocument();
            expect(_react.screen.getByText('ðŸ’¡ Click "Sync Strava Data" to load your activities from Strava.')).toBeInTheDocument();
        });
    });
    describe('Success State with Activities', ()=>{
        const mockRefetch = jest.fn();
        beforeEach(()=>{
            mockUseUserActivities.mockReturnValue({
                data: mockActivities,
                isLoading: false,
                error: null,
                refetch: mockRefetch,
                isRefetching: false,
                isError: false,
                isSuccess: true,
                isFetching: false
            });
        });
        it('displays activities when data is loaded', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('Recent Activities')).toBeInTheDocument();
            expect(_react.screen.getByText('Your latest 2 activities from database')).toBeInTheDocument();
            // Check that activities are displayed
            expect(_react.screen.getByText('Morning Run')).toBeInTheDocument();
            expect(_react.screen.getByText('Evening Bike Ride')).toBeInTheDocument();
        });
        it('displays correct activity badges', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('Run')).toBeInTheDocument();
            expect(_react.screen.getByText('Ride')).toBeInTheDocument();
        });
        it('formats distance correctly', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('5.0 km')).toBeInTheDocument() // 5000m = 5.0km
            ;
            expect(_react.screen.getByText('25.0 km')).toBeInTheDocument() // 25000m = 25.0km
            ;
        });
        it('formats duration correctly', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('30m')).toBeInTheDocument() // 1800s = 30m
            ;
            expect(_react.screen.getByText('1h 0m')).toBeInTheDocument() // 3600s = 1h 0m
            ;
        });
        it('formats speed correctly', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('10.0 km/h')).toBeInTheDocument() // 2.78 m/s = 10.0 km/h
            ;
            expect(_react.screen.getByText('25.0 km/h')).toBeInTheDocument() // 6.94 m/s = 25.0 km/h
            ;
        });
        it('displays heart rate when available', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('150 bpm')).toBeInTheDocument() // Morning Run heart rate
            ;
            expect(_react.screen.getByText('140 bpm')).toBeInTheDocument() // Evening Bike Ride heart rate
            ;
        });
        it('displays power when available', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            expect(_react.screen.getByText('180w')).toBeInTheDocument() // Evening Bike Ride power
            ;
        });
        it('has refresh functionality', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            const refreshButton = _react.screen.getByRole('button');
            _react.fireEvent.click(refreshButton);
            expect(mockRefetch).toHaveBeenCalledTimes(1);
        });
        it('shows loading state on refresh button when refetching', ()=>{
            mockUseUserActivities.mockReturnValue({
                data: mockActivities,
                isLoading: false,
                error: null,
                refetch: mockRefetch,
                isRefetching: true,
                isError: false,
                isSuccess: true,
                isFetching: true
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            const refreshButton = _react.screen.getByRole('button');
            expect(refreshButton).toBeDisabled();
        });
        it('formats dates correctly', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            // Check that dates are formatted (exact format may vary by locale)
            expect(_react.screen.getByText(/Jan 15/)).toBeInTheDocument();
            expect(_react.screen.getByText(/Jan 14/)).toBeInTheDocument();
        });
    });
    describe('Accessibility', ()=>{
        it('has proper ARIA labels and roles', ()=>{
            mockUseUserActivities.mockReturnValue({
                data: mockActivities,
                isLoading: false,
                error: null,
                refetch: jest.fn(),
                isRefetching: false,
                isError: false,
                isSuccess: true,
                isFetching: false
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitiesDashboard.ActivitiesDashboard, {
                    ...defaultProps
                })
            }));
            // Check that buttons are properly labeled
            expect(_react.screen.getByRole('button')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,