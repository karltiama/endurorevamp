{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\strava\\ActivitiesDashboard.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { ActivitiesDashboard } from '@/components/strava/ActivitiesDashboard'\r\nimport { useUserActivities } from '@/hooks/use-user-activities'\r\nimport { Activity } from '@/lib/strava/types'\r\n\r\n// Mock the hook\r\njest.mock('@/hooks/use-user-activities')\r\nconst mockUseUserActivities = useUserActivities as jest.MockedFunction<typeof useUserActivities>\r\n\r\n// Mock activities data (database format)\r\nconst mockActivities: Activity[] = [\r\n  {\r\n    id: '1',\r\n    user_id: 'test-user-id',\r\n    strava_activity_id: 123456789,\r\n    name: 'Morning Run',\r\n    distance: 5000, // 5km\r\n    moving_time: 1800, // 30 minutes\r\n    elapsed_time: 1900,\r\n    total_elevation_gain: 50,\r\n    activity_type: 'Run',\r\n    sport_type: 'Run',\r\n    start_date: '2024-01-15T08:00:00Z',\r\n    start_date_local: '2024-01-15T08:00:00Z',\r\n    timezone: 'UTC',\r\n    average_speed: 2.78, // 10 km/h\r\n    max_speed: 3.5,\r\n    average_heartrate: 150,\r\n    kudos_count: 5,\r\n    comment_count: 1,\r\n    athlete_count: 1,\r\n    photo_count: 0,\r\n    trainer: false,\r\n    commute: false,\r\n    manual: false,\r\n    private: false,\r\n    created_at: '2024-01-15T08:00:00Z',\r\n    updated_at: '2024-01-15T08:00:00Z'\r\n  },\r\n  {\r\n    id: '2',\r\n    user_id: 'test-user-id',\r\n    strava_activity_id: 123456790,\r\n    name: 'Evening Bike Ride',\r\n    distance: 25000, // 25km\r\n    moving_time: 3600, // 1 hour\r\n    elapsed_time: 3720,\r\n    total_elevation_gain: 200,\r\n    activity_type: 'Ride',\r\n    sport_type: 'Ride',\r\n    start_date: '2024-01-14T18:00:00Z',\r\n    start_date_local: '2024-01-14T18:00:00Z',\r\n    timezone: 'UTC',\r\n    average_speed: 6.94, // 25 km/h\r\n    max_speed: 8.33,\r\n    average_heartrate: 140,\r\n    average_watts: 180,\r\n    kudos_count: 8,\r\n    comment_count: 2,\r\n    athlete_count: 1,\r\n    photo_count: 1,\r\n    trainer: false,\r\n    commute: false,\r\n    manual: false,\r\n    private: false,\r\n    created_at: '2024-01-14T18:00:00Z',\r\n    updated_at: '2024-01-14T18:00:00Z'\r\n  }\r\n]\r\n\r\n// Test wrapper component\r\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        retry: false,\r\n      },\r\n    },\r\n  })\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n}\r\n\r\ndescribe('ActivitiesDashboard', () => {\r\n  const defaultProps = {\r\n    userId: 'test-user-id'\r\n  }\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('Loading State', () => {\r\n    it('shows loading state when data is being fetched', () => {\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: undefined,\r\n        isLoading: true,\r\n        error: null,\r\n        refetch: jest.fn(),\r\n        isRefetching: false,\r\n        isError: false,\r\n        isSuccess: false,\r\n        isFetching: true\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('Recent Activities')).toBeInTheDocument()\r\n      expect(screen.getByText('Loading your latest activities from database...')).toBeInTheDocument()\r\n      \r\n      // Should show skeleton loaders\r\n      const skeletons = screen.getAllByRole('generic')\r\n      const animatedSkeletons = skeletons.filter(el => \r\n        el.className.includes('animate-pulse')\r\n      )\r\n      expect(animatedSkeletons.length).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  describe('Error State', () => {\r\n    const mockRefetch = jest.fn()\r\n\r\n    it('shows error state when there is an error', () => {\r\n      const error = new Error('Failed to fetch activities')\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: undefined,\r\n        isLoading: false,\r\n        error,\r\n        refetch: mockRefetch,\r\n        isRefetching: false,\r\n        isError: true,\r\n        isSuccess: false,\r\n        isFetching: false\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('Recent Activities')).toBeInTheDocument()\r\n      expect(screen.getByText('Unable to load your activities from database')).toBeInTheDocument()\r\n      expect(screen.getByText('Failed to fetch activities')).toBeInTheDocument()\r\n      expect(screen.getByText('Try Again')).toBeInTheDocument()\r\n      expect(screen.getByText('ðŸ’¡ Try syncing your Strava data to populate the database.')).toBeInTheDocument()\r\n    })\r\n\r\n    it('calls refetch when try again button is clicked', () => {\r\n      const error = new Error('Failed to fetch activities')\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: undefined,\r\n        isLoading: false,\r\n        error,\r\n        refetch: mockRefetch,\r\n        isRefetching: false,\r\n        isError: true,\r\n        isSuccess: false,\r\n        isFetching: false\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      const tryAgainButton = screen.getByText('Try Again')\r\n      fireEvent.click(tryAgainButton)\r\n\r\n      expect(mockRefetch).toHaveBeenCalledTimes(1)\r\n    })\r\n\r\n    it('shows loading state on try again button when refetching', () => {\r\n      const error = new Error('Failed to fetch activities')\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: undefined,\r\n        isLoading: false,\r\n        error,\r\n        refetch: mockRefetch,\r\n        isRefetching: true,\r\n        isError: true,\r\n        isSuccess: false,\r\n        isFetching: true\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      const tryAgainButton = screen.getByRole('button', { name: /try again/i })\r\n      expect(tryAgainButton).toBeDisabled()\r\n    })\r\n  })\r\n\r\n  describe('Empty State', () => {\r\n    it('shows empty state when no activities are returned', () => {\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: [],\r\n        isLoading: false,\r\n        error: null,\r\n        refetch: jest.fn(),\r\n        isRefetching: false,\r\n        isError: false,\r\n        isSuccess: true,\r\n        isFetching: false\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('Recent Activities')).toBeInTheDocument()\r\n      expect(screen.getByText('No activities found')).toBeInTheDocument()\r\n      expect(screen.getByText('No activities found in your database.')).toBeInTheDocument()\r\n      expect(screen.getByText('ðŸ’¡ Click \"Sync Strava Data\" to load your activities from Strava.')).toBeInTheDocument()\r\n    })\r\n\r\n    it('shows empty state when activities data is undefined', () => {\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: undefined,\r\n        isLoading: false,\r\n        error: null,\r\n        refetch: jest.fn(),\r\n        isRefetching: false,\r\n        isError: false,\r\n        isSuccess: true,\r\n        isFetching: false\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('No activities found')).toBeInTheDocument()\r\n      expect(screen.getByText('No activities found in your database.')).toBeInTheDocument()\r\n      expect(screen.getByText('ðŸ’¡ Click \"Sync Strava Data\" to load your activities from Strava.')).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Success State with Activities', () => {\r\n    const mockRefetch = jest.fn()\r\n\r\n    beforeEach(() => {\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: mockActivities,\r\n        isLoading: false,\r\n        error: null,\r\n        refetch: mockRefetch,\r\n        isRefetching: false,\r\n        isError: false,\r\n        isSuccess: true,\r\n        isFetching: false\r\n      } as any)\r\n    })\r\n\r\n    it('displays activities when data is loaded', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('Recent Activities')).toBeInTheDocument()\r\n      expect(screen.getByText('Your latest 2 activities from database')).toBeInTheDocument()\r\n      \r\n      // Check that activities are displayed\r\n      expect(screen.getByText('Morning Run')).toBeInTheDocument()\r\n      expect(screen.getByText('Evening Bike Ride')).toBeInTheDocument()\r\n    })\r\n\r\n    it('displays correct activity badges', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('Run')).toBeInTheDocument()\r\n      expect(screen.getByText('Ride')).toBeInTheDocument()\r\n    })\r\n\r\n    it('formats distance correctly', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('5.0 km')).toBeInTheDocument() // 5000m = 5.0km\r\n      expect(screen.getByText('25.0 km')).toBeInTheDocument() // 25000m = 25.0km\r\n    })\r\n\r\n    it('formats duration correctly', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('30m')).toBeInTheDocument() // 1800s = 30m\r\n      expect(screen.getByText('1h 0m')).toBeInTheDocument() // 3600s = 1h 0m\r\n    })\r\n\r\n    it('formats speed correctly', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('10.0 km/h')).toBeInTheDocument() // 2.78 m/s = 10.0 km/h\r\n      expect(screen.getByText('25.0 km/h')).toBeInTheDocument() // 6.94 m/s = 25.0 km/h\r\n    })\r\n\r\n    it('displays heart rate when available', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('150 bpm')).toBeInTheDocument() // Morning Run heart rate\r\n      expect(screen.getByText('140 bpm')).toBeInTheDocument() // Evening Bike Ride heart rate\r\n    })\r\n\r\n    it('displays power when available', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      expect(screen.getByText('180w')).toBeInTheDocument() // Evening Bike Ride power\r\n    })\r\n\r\n    it('has refresh functionality', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      const refreshButton = screen.getByRole('button')\r\n      fireEvent.click(refreshButton)\r\n\r\n      expect(mockRefetch).toHaveBeenCalledTimes(1)\r\n    })\r\n\r\n    it('shows loading state on refresh button when refetching', () => {\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: mockActivities,\r\n        isLoading: false,\r\n        error: null,\r\n        refetch: mockRefetch,\r\n        isRefetching: true,\r\n        isError: false,\r\n        isSuccess: true,\r\n        isFetching: true\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      const refreshButton = screen.getByRole('button')\r\n      expect(refreshButton).toBeDisabled()\r\n    })\r\n\r\n    it('formats dates correctly', () => {\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      // Check that dates are formatted (exact format may vary by locale)\r\n      expect(screen.getByText(/Jan 15/)).toBeInTheDocument()\r\n      expect(screen.getByText(/Jan 14/)).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Accessibility', () => {\r\n    it('has proper ARIA labels and roles', () => {\r\n      mockUseUserActivities.mockReturnValue({\r\n        data: mockActivities,\r\n        isLoading: false,\r\n        error: null,\r\n        refetch: jest.fn(),\r\n        isRefetching: false,\r\n        isError: false,\r\n        isSuccess: true,\r\n        isFetching: false\r\n      } as any)\r\n\r\n      render(\r\n        <TestWrapper>\r\n          <ActivitiesDashboard {...defaultProps} />\r\n        </TestWrapper>\r\n      )\r\n\r\n      // Check that buttons are properly labeled\r\n      expect(screen.getByRole('button')).toBeInTheDocument()\r\n    })\r\n  })\r\n}) "],"names":["jest","mock","mockUseUserActivities","useUserActivities","mockActivities","id","user_id","strava_activity_id","name","distance","moving_time","elapsed_time","total_elevation_gain","activity_type","sport_type","start_date","start_date_local","timezone","average_speed","max_speed","average_heartrate","kudos_count","comment_count","athlete_count","photo_count","trainer","commute","manual","private","created_at","updated_at","average_watts","TestWrapper","children","queryClient","QueryClient","defaultOptions","queries","retry","QueryClientProvider","client","describe","defaultProps","userId","beforeEach","clearAllMocks","it","mockReturnValue","data","undefined","isLoading","error","refetch","fn","isRefetching","isError","isSuccess","isFetching","render","ActivitiesDashboard","expect","screen","getByText","toBeInTheDocument","skeletons","getAllByRole","animatedSkeletons","filter","el","className","includes","length","toBeGreaterThan","mockRefetch","Error","tryAgainButton","fireEvent","click","toHaveBeenCalledTimes","getByRole","toBeDisabled","refreshButton"],"mappings":"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"}