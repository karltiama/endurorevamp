{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\lib\\strava\\auth.ts"],"sourcesContent":["import type { SupabaseClient } from '@supabase/supabase-js';\r\nimport type { StravaAuthResponse } from '@/lib/strava/types';\r\n\r\nexport interface StravaTokens {\r\n  id?: string;\r\n  user_id: string;\r\n  access_token: string;\r\n  refresh_token: string;\r\n  token_type: string;\r\n  expires_at: string;\r\n  expires_in: number;\r\n  strava_athlete_id: number;\r\n  athlete_firstname?: string;\r\n  athlete_lastname?: string;\r\n  athlete_profile?: string;\r\n  scope?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport class StravaAuth {\r\n  private supabaseClient: SupabaseClient | null = null;\r\n  private isServer: boolean;\r\n\r\n  constructor(isServer = false) {\r\n    this.isServer = isServer;\r\n  }\r\n\r\n  private async getSupabase(): Promise<SupabaseClient> {\r\n    if (!this.supabaseClient) {\r\n      if (this.isServer) {\r\n        const { createClient } = await import('@/lib/supabase/server');\r\n        this.supabaseClient = await createClient();\r\n      } else {\r\n        const { createClient: createBrowserClient } = await import('@/lib/supabase/client');\r\n        this.supabaseClient = createBrowserClient();\r\n      }\r\n    }\r\n    return this.supabaseClient;\r\n  }\r\n\r\n  /**\r\n   * Store tokens after successful OAuth exchange\r\n   */\r\n  async storeTokens(userId: string, authResponse: StravaAuthResponse): Promise<void> {\r\n    const supabase = await this.getSupabase();\r\n    \r\n    const tokenData: Omit<StravaTokens, 'id' | 'created_at' | 'updated_at'> = {\r\n      user_id: userId,\r\n      access_token: authResponse.access_token,\r\n      refresh_token: authResponse.refresh_token,\r\n      token_type: authResponse.token_type,\r\n      expires_at: new Date(authResponse.expires_at * 1000).toISOString(),\r\n      expires_in: authResponse.expires_in,\r\n      strava_athlete_id: authResponse.athlete.id,\r\n      athlete_firstname: authResponse.athlete.firstname,\r\n      athlete_lastname: authResponse.athlete.lastname,\r\n      athlete_profile: authResponse.athlete.profile,\r\n      // scope: authResponse.scope, // Add if Strava returns scope\r\n    };\r\n\r\n    const { error } = await supabase\r\n      .from('strava_tokens')\r\n      .upsert(tokenData, { \r\n        onConflict: 'user_id',\r\n        ignoreDuplicates: false \r\n      });\r\n\r\n    if (error) {\r\n      console.error('Error storing Strava tokens:', error);\r\n      throw new Error('Failed to store authentication tokens');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get stored tokens for a user\r\n   */\r\n  async getTokens(userId: string): Promise<StravaTokens | null> {\r\n    const supabase = await this.getSupabase();\r\n    \r\n    const { data, error } = await supabase\r\n      .from('strava_tokens')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') {\r\n        // No tokens found - user not connected\r\n        return null;\r\n      }\r\n      console.error('Error fetching Strava tokens:', error);\r\n      throw new Error('Failed to fetch authentication tokens');\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Check if user is connected to Strava and tokens are valid\r\n   */\r\n  async isConnected(userId: string): Promise<boolean> {\r\n    try {\r\n      const tokens = await this.getTokens(userId);\r\n      if (!tokens) return false;\r\n\r\n      // Check if tokens are expired\r\n      const expiresAt = new Date(tokens.expires_at);\r\n      const now = new Date();\r\n      const bufferTime = 5 * 60 * 1000; // 5 minutes buffer\r\n\r\n      return expiresAt.getTime() > (now.getTime() + bufferTime);\r\n    } catch (error) {\r\n      console.error('Error checking Strava connection:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get valid access token (refresh if needed)\r\n   */\r\n  async getValidAccessToken(userId: string): Promise<string | null> {\r\n    try {\r\n      const tokens = await this.getTokens(userId);\r\n      if (!tokens) return null;\r\n\r\n      // Check if token needs refresh\r\n      const expiresAt = new Date(tokens.expires_at);\r\n      const now = new Date();\r\n      const bufferTime = 10 * 60 * 1000; // 10 minutes buffer\r\n\r\n      if (expiresAt.getTime() <= (now.getTime() + bufferTime)) {\r\n        // Token expired or expiring soon, refresh it\r\n        const refreshedTokens = await this.refreshTokens(tokens.refresh_token, userId);\r\n        return refreshedTokens?.access_token || null;\r\n      }\r\n\r\n      return tokens.access_token;\r\n    } catch (error) {\r\n      console.error('Error getting valid access token:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh expired tokens\r\n   */\r\n  private async refreshTokens(refreshToken: string, userId: string): Promise<StravaTokens | null> {\r\n    try {\r\n      const response = await fetch('https://www.strava.com/oauth/token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          client_id: process.env.NEXT_PUBLIC_STRAVA_CLIENT_ID,\r\n          client_secret: process.env.STRAVA_CLIENT_SECRET,\r\n          grant_type: 'refresh_token',\r\n          refresh_token: refreshToken,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to refresh token: ${response.statusText}`);\r\n      }\r\n\r\n      const authResponse: StravaAuthResponse = await response.json();\r\n      \r\n      // Store the refreshed tokens\r\n      await this.storeTokens(userId, authResponse);\r\n      \r\n      // Return the updated tokens\r\n      return await this.getTokens(userId);\r\n    } catch (error) {\r\n      console.error('Error refreshing Strava tokens:', error);\r\n      \r\n      // If refresh fails, remove the invalid tokens\r\n      await this.disconnectUser(userId);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect user from Strava (remove tokens)\r\n   */\r\n  async disconnectUser(userId: string): Promise<void> {\r\n    const supabase = await this.getSupabase();\r\n    \r\n    const { error } = await supabase\r\n      .from('strava_tokens')\r\n      .delete()\r\n      .eq('user_id', userId);\r\n\r\n    if (error) {\r\n      console.error('Error disconnecting user from Strava:', error);\r\n      throw new Error('Failed to disconnect from Strava');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection status with user info\r\n   */\r\n  async getConnectionStatus(userId: string): Promise<{\r\n    connected: boolean;\r\n    athlete?: {\r\n      id: number;\r\n      firstname?: string;\r\n      lastname?: string;\r\n      profile?: string;\r\n    };\r\n    expiresAt?: string;\r\n  }> {\r\n    try {\r\n      console.log('üîç Checking connection status for user:', userId);\r\n      const tokens = await this.getTokens(userId);\r\n      \r\n      if (!tokens) {\r\n        console.log('‚ùå No tokens found for user');\r\n        return { connected: false };\r\n      }\r\n\r\n      console.log('‚úÖ Tokens found, checking if connected...');\r\n      const connected = await this.isConnected(userId);\r\n      console.log('üîó Connection status:', connected, 'expires at:', tokens.expires_at);\r\n      \r\n      return {\r\n        connected,\r\n        athlete: {\r\n          id: tokens.strava_athlete_id,\r\n          firstname: tokens.athlete_firstname,\r\n          lastname: tokens.athlete_lastname,\r\n          profile: tokens.athlete_profile,\r\n        },\r\n        expiresAt: tokens.expires_at,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting connection status:', error);\r\n      return { connected: false };\r\n    }\r\n  }\r\n} "],"names":["StravaAuth","constructor","isServer","supabaseClient","getSupabase","createClient","createBrowserClient","storeTokens","userId","authResponse","supabase","tokenData","user_id","access_token","refresh_token","token_type","expires_at","Date","toISOString","expires_in","strava_athlete_id","athlete","id","athlete_firstname","firstname","athlete_lastname","lastname","athlete_profile","profile","error","from","upsert","onConflict","ignoreDuplicates","console","Error","getTokens","data","select","eq","single","code","isConnected","tokens","expiresAt","now","bufferTime","getTime","getValidAccessToken","refreshedTokens","refreshTokens","refreshToken","response","fetch","method","headers","body","JSON","stringify","client_id","process","env","NEXT_PUBLIC_STRAVA_CLIENT_ID","client_secret","STRAVA_CLIENT_SECRET","grant_type","ok","statusText","json","disconnectUser","delete","getConnectionStatus","log","connected"],"mappings":"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"}