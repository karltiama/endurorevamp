{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\error-handling.test.ts"],"sourcesContent":["import { ErrorHandler, ErrorType } from '@/lib/error-handling'\r\n\r\n// Mock Response for Node.js environment\r\nglobal.Response = class MockResponse {\r\n  status: number\r\n  statusText: string\r\n  \r\n  constructor(body: any, init?: { status?: number; statusText?: string }) {\r\n    this.status = init?.status || 200\r\n    this.statusText = init?.statusText || 'OK'\r\n  }\r\n} as any\r\n\r\ndescribe('ErrorHandler', () => {\r\n  describe('parseOAuthError', () => {\r\n    it('should return null when no error parameter exists', () => {\r\n      const searchParams = new URLSearchParams()\r\n      const result = ErrorHandler.parseOAuthError(searchParams)\r\n      expect(result).toBeNull()\r\n    })\r\n\r\n    it('should parse access_denied error correctly', () => {\r\n      const searchParams = new URLSearchParams()\r\n      searchParams.set('error', 'access_denied')\r\n      \r\n      const result = ErrorHandler.parseOAuthError(searchParams)\r\n      \r\n      expect(result).toEqual({\r\n        type: ErrorType.OAUTH_ERROR,\r\n        message: 'Access was denied by the user',\r\n        details: { \r\n          error: 'access_denied', \r\n          errorDescription: null, \r\n          errorUri: null \r\n        },\r\n        code: 'access_denied',\r\n        retryable: false\r\n      })\r\n    })\r\n\r\n    it('should use error_description when provided', () => {\r\n      const searchParams = new URLSearchParams()\r\n      searchParams.set('error', 'invalid_request')\r\n      searchParams.set('error_description', 'Custom error message')\r\n      \r\n      const result = ErrorHandler.parseOAuthError(searchParams)\r\n      \r\n      expect(result?.message).toBe('Custom error message')\r\n      expect((result?.details as any)?.errorDescription).toBe('Custom error message')\r\n    })\r\n\r\n    it('should mark server errors as retryable', () => {\r\n      const searchParams = new URLSearchParams()\r\n      searchParams.set('error', 'server_error')\r\n      \r\n      const result = ErrorHandler.parseOAuthError(searchParams)\r\n      \r\n      expect(result?.retryable).toBe(true)\r\n    })\r\n\r\n    it('should mark temporarily unavailable as retryable', () => {\r\n      const searchParams = new URLSearchParams()\r\n      searchParams.set('error', 'temporarily_unavailable')\r\n      \r\n      const result = ErrorHandler.parseOAuthError(searchParams)\r\n      \r\n      expect(result?.retryable).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('parseApiError', () => {\r\n    it('should handle 401 unauthorized errors', () => {\r\n      const response = new Response('', { status: 401, statusText: 'Unauthorized' })\r\n      \r\n      const result = ErrorHandler.parseApiError(response)\r\n      \r\n      expect(result).toEqual({\r\n        type: ErrorType.API_ERROR,\r\n        message: 'Invalid authorization code. Please try connecting again.',\r\n        details: { \r\n          status: 401, \r\n          statusText: 'Unauthorized', \r\n          responseData: undefined \r\n        },\r\n        code: 401,\r\n        retryable: false\r\n      })\r\n    })\r\n\r\n    it('should handle 429 rate limit errors as retryable', () => {\r\n      const response = new Response('', { status: 429, statusText: 'Too Many Requests' })\r\n      \r\n      const result = ErrorHandler.parseApiError(response)\r\n      \r\n      expect(result.message).toBe('Too many requests. Please wait a moment and try again.')\r\n      expect(result.retryable).toBe(true)\r\n    })\r\n\r\n    it('should handle 500 server errors as retryable', () => {\r\n      const response = new Response('', { status: 500, statusText: 'Internal Server Error' })\r\n      \r\n      const result = ErrorHandler.parseApiError(response)\r\n      \r\n      expect(result.message).toBe('Server error. Please try again later.')\r\n      expect(result.retryable).toBe(true)\r\n    })\r\n\r\n    it('should include response data when provided', () => {\r\n      const response = new Response('', { status: 400, statusText: 'Bad Request' })\r\n      const responseData = { error: 'Invalid input' }\r\n      \r\n      const result = ErrorHandler.parseApiError(response, responseData)\r\n      \r\n      expect(result.message).toBe('Invalid input')\r\n      expect((result.details as any).responseData).toEqual(responseData)\r\n    })\r\n  })\r\n\r\n  describe('parseNetworkError', () => {\r\n    it('should handle AbortError as non-retryable', () => {\r\n      const error = new Error('Request aborted')\r\n      error.name = 'AbortError'\r\n      \r\n      const result = ErrorHandler.parseNetworkError(error)\r\n      \r\n      expect(result).toEqual({\r\n        type: ErrorType.NETWORK_ERROR,\r\n        message: 'Request was cancelled',\r\n        details: { \r\n          originalError: 'Request aborted', \r\n          name: 'AbortError' \r\n        },\r\n        retryable: false\r\n      })\r\n    })\r\n\r\n    it('should handle timeout errors as retryable', () => {\r\n      const error = new Error('Request timeout')\r\n      \r\n      const result = ErrorHandler.parseNetworkError(error)\r\n      \r\n      expect(result.message).toBe('Request timed out. Please try again.')\r\n      expect(result.retryable).toBe(true)\r\n    })\r\n\r\n    it('should handle fetch failures as retryable', () => {\r\n      const error = new Error('Failed to fetch')\r\n      \r\n      const result = ErrorHandler.parseNetworkError(error)\r\n      \r\n      expect(result.message).toBe('Unable to connect. Please check your internet connection.')\r\n      expect(result.retryable).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('createTimeoutError', () => {\r\n    it('should create timeout error with correct message', () => {\r\n      const result = ErrorHandler.createTimeoutError(30000)\r\n      \r\n      expect(result).toEqual({\r\n        type: ErrorType.TIMEOUT_ERROR,\r\n        message: 'Operation timed out after 30 seconds. Please try again.',\r\n        details: { duration: 30000 },\r\n        retryable: true\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('parseError', () => {\r\n    it('should handle Error objects', () => {\r\n      const error = new Error('Something went wrong')\r\n      \r\n      const result = ErrorHandler.parseError(error)\r\n      \r\n      expect(result).toEqual({\r\n        type: ErrorType.UNKNOWN_ERROR,\r\n        message: 'Something went wrong',\r\n        details: { originalError: error },\r\n        retryable: false\r\n      })\r\n    })\r\n\r\n    it('should handle string errors', () => {\r\n      const result = ErrorHandler.parseError('String error message')\r\n      \r\n      expect(result).toEqual({\r\n        type: ErrorType.UNKNOWN_ERROR,\r\n        message: 'String error message',\r\n        retryable: false\r\n      })\r\n    })\r\n\r\n    it('should handle unknown error types', () => {\r\n      const result = ErrorHandler.parseError({ unknown: 'object' })\r\n      \r\n      expect(result).toEqual({\r\n        type: ErrorType.UNKNOWN_ERROR,\r\n        message: 'An unexpected error occurred',\r\n        details: { originalError: { unknown: 'object' } },\r\n        retryable: false\r\n      })\r\n    })\r\n\r\n    it('should identify fetch errors as network errors', () => {\r\n      const error = new TypeError('Failed to fetch')\r\n      \r\n      const result = ErrorHandler.parseError(error)\r\n      \r\n      expect(result.type).toBe(ErrorType.NETWORK_ERROR)\r\n      expect(result.message).toBe('Unable to connect. Please check your internet connection.')\r\n    })\r\n  })\r\n\r\n  describe('utility methods', () => {\r\n    it('should get user message from error', () => {\r\n      const error = {\r\n        type: ErrorType.API_ERROR,\r\n        message: 'Test message',\r\n        retryable: false\r\n      }\r\n      \r\n      expect(ErrorHandler.getUserMessage(error)).toBe('Test message')\r\n    })\r\n\r\n    it('should check if error is retryable', () => {\r\n      const retryableError = {\r\n        type: ErrorType.NETWORK_ERROR,\r\n        message: 'Network error',\r\n        retryable: true\r\n      }\r\n      \r\n      const nonRetryableError = {\r\n        type: ErrorType.OAUTH_ERROR,\r\n        message: 'OAuth error',\r\n        retryable: false\r\n      }\r\n      \r\n      expect(ErrorHandler.isRetryable(retryableError)).toBe(true)\r\n      expect(ErrorHandler.isRetryable(nonRetryableError)).toBe(false)\r\n    })\r\n  })\r\n}) "],"names":["global","Response","MockResponse","constructor","body","init","status","statusText","describe","it","searchParams","URLSearchParams","result","ErrorHandler","parseOAuthError","expect","toBeNull","set","toEqual","type","ErrorType","OAUTH_ERROR","message","details","error","errorDescription","errorUri","code","retryable","toBe","response","parseApiError","API_ERROR","responseData","undefined","Error","name","parseNetworkError","NETWORK_ERROR","originalError","createTimeoutError","TIMEOUT_ERROR","duration","parseError","UNKNOWN_ERROR","unknown","TypeError","getUserMessage","retryableError","nonRetryableError","isRetryable"],"mappings":"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"}