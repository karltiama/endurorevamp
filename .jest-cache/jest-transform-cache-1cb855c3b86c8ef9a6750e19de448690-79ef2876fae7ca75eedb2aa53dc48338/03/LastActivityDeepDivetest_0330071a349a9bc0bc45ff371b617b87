37ed270a49da2c6a4dc8dd3cb12778d2
"use strict";
// Mock the hook
jest.mock('@/hooks/use-user-activities', ()=>({
        useUserActivities: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _LastActivityDeepDive = require("../../../components/dashboard/LastActivityDeepDive");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseUserActivities = require('@/hooks/use-user-activities').useUserActivities;
const createMockActivity = (overrides = {})=>({
        id: '1',
        user_id: 'user-1',
        strava_activity_id: 123456,
        name: 'Morning Run',
        sport_type: 'Run',
        start_date: new Date().toISOString(),
        start_date_local: new Date().toISOString(),
        timezone: 'America/New_York',
        distance: 5000,
        moving_time: 1800,
        elapsed_time: 1900,
        total_elevation_gain: 100,
        average_heartrate: 150,
        max_heartrate: 170,
        average_watts: 200,
        max_watts: 250,
        max_speed: 5.5,
        ...overrides
    });
const renderWithQueryClient = (component)=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: component
    }));
};
describe('LastActivityDeepDive', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('renders loading state', ()=>{
        mockUseUserActivities.mockReturnValue({
            data: undefined,
            isLoading: true,
            error: null
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "user-1"
        }));
        expect(_react1.screen.getByText('Loading your latest activity analysis...')).toBeInTheDocument();
    });
    it('renders empty state when no activities', ()=>{
        mockUseUserActivities.mockReturnValue({
            data: [],
            isLoading: false,
            error: null
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "user-1"
        }));
        expect(_react1.screen.getByText('No activities found')).toBeInTheDocument();
        expect(_react1.screen.getByText('Connect your Strava account to see detailed activity insights')).toBeInTheDocument();
    });
    it('renders error state', ()=>{
        mockUseUserActivities.mockReturnValue({
            data: null,
            isLoading: false,
            error: new Error('Failed to fetch')
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "user-1"
        }));
        expect(_react1.screen.getByText('Error loading activity data')).toBeInTheDocument();
    });
    it('renders activity deep dive with data', ()=>{
        const mockActivity = createMockActivity();
        mockUseUserActivities.mockReturnValue({
            data: [
                mockActivity
            ],
            isLoading: false,
            error: null
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "user-1"
        }));
        // Check main title and activity name
        expect(_react1.screen.getByText('Last Activity Deep Dive')).toBeInTheDocument();
        expect(_react1.screen.getByText('Morning Run')).toBeInTheDocument();
        // Check activity type badge
        expect(_react1.screen.getByText('Run')).toBeInTheDocument();
        // Check key stats
        expect(_react1.screen.getByText('5.0 km')).toBeInTheDocument(); // Distance
        expect(_react1.screen.getByText('30m')).toBeInTheDocument(); // Duration
        expect(_react1.screen.getByText('100m')).toBeInTheDocument(); // Elevation
        // Check heart rate
        expect(_react1.screen.getByText('150 bpm')).toBeInTheDocument();
        expect(_react1.screen.getByText('Max: 170 bpm')).toBeInTheDocument();
        // Check power
        expect(_react1.screen.getByText('200W')).toBeInTheDocument();
        expect(_react1.screen.getByText('Max: 250W')).toBeInTheDocument();
    });
    it('shows tabs for different views', ()=>{
        const mockActivity = createMockActivity();
        mockUseUserActivities.mockReturnValue({
            data: [
                mockActivity
            ],
            isLoading: false,
            error: null
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "user-1"
        }));
        // Check tabs are present
        expect(_react1.screen.getByText('Overview')).toBeInTheDocument();
        expect(_react1.screen.getByText('Performance')).toBeInTheDocument();
        expect(_react1.screen.getByText('Insights')).toBeInTheDocument();
    });
    it('shows personal best badge when applicable', ()=>{
        const activities = [
            createMockActivity({
                distance: 10000,
                start_date: new Date().toISOString()
            }),
            createMockActivity({
                distance: 5000,
                start_date: new Date(Date.now() - 86400000).toISOString()
            })
        ];
        mockUseUserActivities.mockReturnValue({
            data: activities,
            isLoading: false,
            error: null
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "user-1"
        }));
        // Should show personal best badge since 10km > average (7.5km) * 1.1
        expect(_react1.screen.getByText('Personal Best!')).toBeInTheDocument();
    });
    it('handles activities without heart rate or power data', ()=>{
        const mockActivity = createMockActivity({
            average_heartrate: undefined,
            max_heartrate: undefined,
            average_watts: undefined,
            max_watts: undefined
        });
        mockUseUserActivities.mockReturnValue({
            data: [
                mockActivity
            ],
            isLoading: false,
            error: null
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "user-1"
        }));
        // Should still render basic stats
        expect(_react1.screen.getByText('Morning Run')).toBeInTheDocument();
        expect(_react1.screen.getByText('5.0 km')).toBeInTheDocument();
        // Should not show heart rate or power sections
        expect(_react1.screen.queryByText('Heart Rate')).not.toBeInTheDocument();
        expect(_react1.screen.queryByText('Power')).not.toBeInTheDocument();
    });
    it('should link to analytics page with activity feed hash fragment', ()=>{
        const mockActivity = createMockActivity({
            name: 'Test Activity',
            sport_type: 'Run',
            distance: 5000,
            moving_time: 1800,
            total_elevation_gain: 50,
            average_heartrate: 150,
            max_heartrate: 170,
            average_watts: undefined,
            max_watts: undefined
        });
        // Mock the hook to return a test activity
        mockUseUserActivities.mockReturnValue({
            data: [
                mockActivity
            ],
            isLoading: false,
            error: null
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LastActivityDeepDive.LastActivityDeepDive, {
            userId: "test-user"
        }));
        const viewAllActivitiesLink = _react1.screen.getByRole('link', {
            name: /view all activities/i
        });
        expect(viewAllActivitiesLink).toBeInTheDocument();
        expect(viewAllActivitiesLink).toHaveAttribute('href', '/dashboard/analytics#activity-feed');
    });
});

//# sourceMappingURL=data:application/json;base64,