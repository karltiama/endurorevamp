{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\dashboard\\LastActivityDeepDive.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { LastActivityDeepDive } from '@/components/dashboard/LastActivityDeepDive';\r\nimport { Activity } from '@/lib/strava/types';\r\n\r\n// Mock the hook\r\njest.mock('@/hooks/use-user-activities', () => ({\r\n  useUserActivities: jest.fn(),\r\n}));\r\n\r\nconst mockUseUserActivities = require('@/hooks/use-user-activities').useUserActivities;\r\n\r\nconst createMockActivity = (overrides: Partial<Activity> = {}): Activity => ({\r\n  id: '1',\r\n  user_id: 'user-1',\r\n  strava_activity_id: 123456,\r\n  name: 'Morning Run',\r\n  sport_type: 'Run',\r\n  start_date: new Date().toISOString(),\r\n  start_date_local: new Date().toISOString(),\r\n  timezone: 'America/New_York',\r\n  distance: 5000, // 5km\r\n  moving_time: 1800, // 30 minutes\r\n  elapsed_time: 1900,\r\n  total_elevation_gain: 100,\r\n  average_heartrate: 150,\r\n  max_heartrate: 170,\r\n  average_watts: 200,\r\n  max_watts: 250,\r\n  max_speed: 5.5,\r\n  ...overrides,\r\n});\r\n\r\nconst renderWithQueryClient = (component: React.ReactElement) => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: { retry: false },\r\n      mutations: { retry: false },\r\n    },\r\n  });\r\n\r\n  return render(\r\n    <QueryClientProvider client={queryClient}>\r\n      {component}\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\ndescribe('LastActivityDeepDive', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders loading state', () => {\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: true,\r\n      error: null,\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"user-1\" />);\r\n    \r\n    expect(screen.getByText('Loading your latest activity analysis...')).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders empty state when no activities', () => {\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"user-1\" />);\r\n    \r\n    expect(screen.getByText('No activities found')).toBeInTheDocument();\r\n    expect(screen.getByText('Connect your Strava account to see detailed activity insights')).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders error state', () => {\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: null,\r\n      isLoading: false,\r\n      error: new Error('Failed to fetch'),\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"user-1\" />);\r\n    \r\n    expect(screen.getByText('Error loading activity data')).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders activity deep dive with data', () => {\r\n    const mockActivity = createMockActivity();\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [mockActivity],\r\n      isLoading: false,\r\n      error: null,\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"user-1\" />);\r\n    \r\n    // Check main title and activity name\r\n    expect(screen.getByText('Last Activity Deep Dive')).toBeInTheDocument();\r\n    expect(screen.getByText('Morning Run')).toBeInTheDocument();\r\n    \r\n    // Check activity type badge\r\n    expect(screen.getByText('Run')).toBeInTheDocument();\r\n    \r\n    // Check key stats\r\n    expect(screen.getByText('5.0 km')).toBeInTheDocument(); // Distance\r\n    expect(screen.getByText('30m')).toBeInTheDocument(); // Duration\r\n    expect(screen.getByText('100m')).toBeInTheDocument(); // Elevation\r\n    \r\n    // Check heart rate\r\n    expect(screen.getByText('150 bpm')).toBeInTheDocument();\r\n    expect(screen.getByText('Max: 170 bpm')).toBeInTheDocument();\r\n    \r\n    // Check power\r\n    expect(screen.getByText('200W')).toBeInTheDocument();\r\n    expect(screen.getByText('Max: 250W')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows tabs for different views', () => {\r\n    const mockActivity = createMockActivity();\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [mockActivity],\r\n      isLoading: false,\r\n      error: null,\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"user-1\" />);\r\n    \r\n    // Check tabs are present\r\n    expect(screen.getByText('Overview')).toBeInTheDocument();\r\n    expect(screen.getByText('Performance')).toBeInTheDocument();\r\n    expect(screen.getByText('Insights')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows personal best badge when applicable', () => {\r\n    const activities = [\r\n      createMockActivity({ distance: 10000, start_date: new Date().toISOString() }), // Latest - 10km\r\n      createMockActivity({ distance: 5000, start_date: new Date(Date.now() - 86400000).toISOString() }), // Previous - 5km\r\n    ];\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: activities,\r\n      isLoading: false,\r\n      error: null,\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"user-1\" />);\r\n    \r\n    // Should show personal best badge since 10km > average (7.5km) * 1.1\r\n    expect(screen.getByText('Personal Best!')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles activities without heart rate or power data', () => {\r\n    const mockActivity = createMockActivity({\r\n      average_heartrate: undefined,\r\n      max_heartrate: undefined,\r\n      average_watts: undefined,\r\n      max_watts: undefined,\r\n    });\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [mockActivity],\r\n      isLoading: false,\r\n      error: null,\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"user-1\" />);\r\n    \r\n    // Should still render basic stats\r\n    expect(screen.getByText('Morning Run')).toBeInTheDocument();\r\n    expect(screen.getByText('5.0 km')).toBeInTheDocument();\r\n    \r\n    // Should not show heart rate or power sections\r\n    expect(screen.queryByText('Heart Rate')).not.toBeInTheDocument();\r\n    expect(screen.queryByText('Power')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('should link to analytics page with activity feed hash fragment', () => {\r\n    const mockActivity = createMockActivity({\r\n      name: 'Test Activity',\r\n      sport_type: 'Run',\r\n      distance: 5000,\r\n      moving_time: 1800,\r\n      total_elevation_gain: 50,\r\n      average_heartrate: 150,\r\n      max_heartrate: 170,\r\n      average_watts: undefined,\r\n      max_watts: undefined\r\n    });\r\n\r\n    // Mock the hook to return a test activity\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [mockActivity],\r\n      isLoading: false,\r\n      error: null\r\n    });\r\n\r\n    renderWithQueryClient(<LastActivityDeepDive userId=\"test-user\" />);\r\n    \r\n    const viewAllActivitiesLink = screen.getByRole('link', { name: /view all activities/i });\r\n    expect(viewAllActivitiesLink).toBeInTheDocument();\r\n    expect(viewAllActivitiesLink).toHaveAttribute('href', '/dashboard/analytics#activity-feed');\r\n  });\r\n}); "],"names":["jest","mock","useUserActivities","fn","mockUseUserActivities","require","createMockActivity","overrides","id","user_id","strava_activity_id","name","sport_type","start_date","Date","toISOString","start_date_local","timezone","distance","moving_time","elapsed_time","total_elevation_gain","average_heartrate","max_heartrate","average_watts","max_watts","max_speed","renderWithQueryClient","component","queryClient","QueryClient","defaultOptions","queries","retry","mutations","render","QueryClientProvider","client","describe","beforeEach","clearAllMocks","it","mockReturnValue","data","undefined","isLoading","error","LastActivityDeepDive","userId","expect","screen","getByText","toBeInTheDocument","Error","mockActivity","activities","now","queryByText","not","viewAllActivitiesLink","getByRole","toHaveAttribute"],"mappings":"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"}