{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\components\\dashboard\\KeyMetrics.tsx"],"sourcesContent":["'use client'\r\n\r\nimport React, { useState } from 'react'\r\nimport { useUserGoals } from '@/hooks/useGoals'\r\nimport { useUserActivities } from '../../hooks/use-user-activities'\r\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences'\r\nimport { formatDistance } from '@/lib/utils'\r\nimport { DashboardGoalSelector } from './DashboardGoalSelector'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Target, Settings } from 'lucide-react'\r\nimport type { UserGoal } from '@/types/goals'\r\n\r\ninterface KeyMetricsProps {\r\n  userId: string\r\n}\r\n\r\nexport function KeyMetrics({ userId }: KeyMetricsProps) {\r\n  const { data: goalsData, isLoading: goalsLoading } = useUserGoals()\r\n  const { isLoading: activitiesLoading } = useUserActivities(userId)\r\n  const { preferences } = useUnitPreferences()\r\n  const [showGoalSelector, setShowGoalSelector] = useState(false)\r\n\r\n  if (goalsLoading || activitiesLoading) {\r\n    return <KeyMetricsSkeleton />\r\n  }\r\n\r\n  // Get goals marked for dashboard display\r\n  const dashboardGoals = goalsData?.goals?.filter((goal: UserGoal) => \r\n    goal.goal_data?.show_on_dashboard && goal.is_active\r\n  ).sort((a: UserGoal, b: UserGoal) => {\r\n    const aPriority = a.goal_data?.dashboard_priority || 999\r\n    const bPriority = b.goal_data?.dashboard_priority || 999\r\n    return aPriority - bPriority\r\n  }) || []\r\n\r\n  // If no dashboard goals are set, show message to set them up\r\n  if (dashboardGoals.length === 0) {\r\n    return (\r\n      <>\r\n        <div className=\"grid grid-cols-1 gap-4 mb-8\">\r\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 text-center\">\r\n            <Target className=\"h-12 w-12 text-blue-600 mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-semibold text-blue-900 mb-2\">Set Up Your Dashboard Goals</h3>\r\n            <p className=\"text-blue-700 mb-4\">\r\n              Choose up to 3 goals to track as key metrics on your dashboard.\r\n            </p>\r\n            <Button \r\n              onClick={() => setShowGoalSelector(true)}\r\n              className=\"bg-blue-600 hover:bg-blue-700\"\r\n            >\r\n              <Target className=\"h-4 w-4 mr-2\" />\r\n              Choose Dashboard Goals\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        \r\n        <DashboardGoalSelector\r\n          open={showGoalSelector}\r\n          onOpenChange={setShowGoalSelector}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900\">Key Metrics</h2>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => setShowGoalSelector(true)}\r\n          className=\"text-gray-600 hover:text-gray-900\"\r\n        >\r\n          <Settings className=\"h-4 w-4 mr-2\" />\r\n          Manage Goals\r\n        </Button>\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\r\n        {dashboardGoals.slice(0, 3).map((goal, index) => (\r\n          <GoalMetricCard \r\n            key={goal.id}\r\n            goal={goal}\r\n            unit={preferences.distance}\r\n            priority={index + 1}\r\n          />\r\n        ))}\r\n      </div>\r\n      \r\n      <DashboardGoalSelector\r\n        open={showGoalSelector}\r\n        onOpenChange={setShowGoalSelector}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\ninterface GoalMetricCardProps {\r\n  goal: UserGoal\r\n  unit: 'km' | 'miles'\r\n  priority: number\r\n}\r\n\r\nfunction GoalMetricCard({ goal, unit, priority }: GoalMetricCardProps) {\r\n  const progress = calculateGoalProgress(goal)\r\n  \r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow p-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <p className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\r\n            <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full\">\r\n              #{priority}\r\n            </span>\r\n            {goal.goal_type?.display_name}\r\n          </p>\r\n          <p className=\"text-3xl font-bold text-gray-900\">\r\n            {formatGoalValue(progress.current, goal, unit)}\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full\">\r\n          <span className=\"text-xl\">{getGoalIcon(goal.goal_type?.category)}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mt-4 space-y-1\">\r\n        <div className=\"flex justify-between text-sm\">\r\n          <span className=\"text-gray-600\">Target</span>\r\n          <span className=\"font-medium\">\r\n            {formatGoalValue(goal.target_value || 0, goal, unit)}\r\n          </span>\r\n        </div>\r\n        \r\n        <div className=\"flex justify-between text-sm\">\r\n          <span className=\"text-gray-600\">Progress</span>\r\n          <span className={`font-medium ${getProgressColor(progress.percentage)}`}>\r\n            {progress.percentage.toFixed(1)}%\r\n          </span>\r\n        </div>\r\n        \r\n        {goal.time_period !== 'ongoing' && (\r\n          <div className=\"flex justify-between text-sm\">\r\n            <span className=\"text-gray-600\">Time left</span>\r\n            <span className=\"text-gray-600\">\r\n              {calculateTimeRemaining(goal)}\r\n            </span>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Progress bar */}\r\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\r\n          <div \r\n            className={`h-2 rounded-full transition-all duration-300 ${getProgressBarColor(progress.percentage)}`}\r\n            style={{ width: `${Math.min(100, progress.percentage)}%` }}\r\n          ></div>\r\n        </div>\r\n        \r\n        <div className=\"text-xs text-gray-500 mt-2\">\r\n          {getProgressMessage(progress)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Helper functions\r\nfunction calculateGoalProgress(goal: UserGoal) {\r\n  const current = goal.current_progress || 0\r\n  const target = goal.target_value || 1\r\n  const percentage = (current / target) * 100\r\n  \r\n  return {\r\n    current,\r\n    target,\r\n    percentage,\r\n    remaining: Math.max(0, target - current)\r\n  }\r\n}\r\n\r\nfunction formatGoalValue(value: number, goal: UserGoal, unit: 'km' | 'miles'): string {\r\n  const category = goal.goal_type?.category\r\n  \r\n  switch (category) {\r\n    case 'distance':\r\n      return formatDistance(value * 1000, unit) // Convert to meters for formatDistance\r\n    case 'frequency':\r\n      return `${Math.round(value)} runs`\r\n    case 'pace':\r\n      const minutes = Math.floor(value / 60)\r\n      const seconds = Math.round(value % 60)\r\n      return `${minutes}:${seconds.toString().padStart(2, '0')}`\r\n    case 'duration':\r\n      const hours = Math.floor(value / 60)\r\n      const mins = Math.round(value % 60)\r\n      return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`\r\n    default:\r\n      return `${value.toFixed(1)}`\r\n  }\r\n}\r\n\r\nfunction getGoalIcon(category?: string): string {\r\n  switch (category) {\r\n    case 'distance': return '📏'\r\n    case 'pace': return '⚡'\r\n    case 'frequency': return '🔄'\r\n    case 'duration': return '⏱️'\r\n    case 'elevation': return '⛰️'\r\n    case 'heart_rate': return '❤️'\r\n    case 'event': return '🏁'\r\n    default: return '🎯'\r\n  }\r\n}\r\n\r\nfunction getProgressColor(percentage: number): string {\r\n  if (percentage >= 100) return 'text-green-600'\r\n  if (percentage >= 80) return 'text-blue-600'\r\n  if (percentage >= 50) return 'text-orange-600'\r\n  return 'text-red-600'\r\n}\r\n\r\nfunction getProgressBarColor(percentage: number): string {\r\n  if (percentage >= 100) return 'bg-green-500'\r\n  if (percentage >= 80) return 'bg-blue-500'\r\n  if (percentage >= 50) return 'bg-orange-500'\r\n  return 'bg-red-500'\r\n}\r\n\r\nfunction calculateTimeRemaining(goal: UserGoal): string {\r\n  if (!goal.target_date) {\r\n    return goal.time_period === 'weekly' ? 'This week' : 'This month'\r\n  }\r\n  \r\n  const targetDate = new Date(goal.target_date)\r\n  const now = new Date()\r\n  const diffTime = targetDate.getTime() - now.getTime()\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\r\n  \r\n  if (diffDays < 0) return 'Overdue'\r\n  if (diffDays === 0) return 'Today'\r\n  if (diffDays === 1) return '1 day'\r\n  if (diffDays < 7) return `${diffDays} days`\r\n  if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks`\r\n  return `${Math.ceil(diffDays / 30)} months`\r\n}\r\n\r\nfunction getProgressMessage(progress: { percentage: number }): string {\r\n  const percentage = progress.percentage\r\n  \r\n  if (percentage >= 100) return '🎉 Goal achieved!'\r\n  if (percentage >= 80) return '🔥 Almost there!'\r\n  if (percentage >= 50) return '💪 Keep it up!'\r\n  if (percentage >= 25) return '📈 Good progress!'\r\n  return '🚀 Just getting started!'\r\n}\r\n\r\nfunction KeyMetricsSkeleton() {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\r\n      {[1, 2, 3].map((i) => (\r\n        <div key={i} className=\"bg-white rounded-lg shadow p-6\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <div className=\"h-4 bg-gray-200 rounded w-20 mb-2\"></div>\r\n                <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\r\n              </div>\r\n              <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\r\n            </div>\r\n            <div className=\"mt-4\">\r\n              <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n} "],"names":["KeyMetrics","userId","data","goalsData","isLoading","goalsLoading","useUserGoals","activitiesLoading","useUserActivities","preferences","useUnitPreferences","showGoalSelector","setShowGoalSelector","useState","KeyMetricsSkeleton","dashboardGoals","goals","filter","goal","goal_data","show_on_dashboard","is_active","sort","a","b","aPriority","dashboard_priority","bPriority","length","div","className","Target","h3","p","Button","onClick","DashboardGoalSelector","open","onOpenChange","h2","variant","size","Settings","slice","map","index","GoalMetricCard","unit","distance","priority","id","progress","calculateGoalProgress","span","goal_type","display_name","formatGoalValue","current","getGoalIcon","category","target_value","getProgressColor","percentage","toFixed","time_period","calculateTimeRemaining","getProgressBarColor","style","width","Math","min","getProgressMessage","current_progress","target","remaining","max","value","formatDistance","round","minutes","floor","seconds","toString","padStart","hours","mins","target_date","targetDate","Date","now","diffTime","getTime","diffDays","ceil","i"],"mappings":"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"}