109ccb5631465adb50f9dfed86deeeab
"use strict";
// Mock the strava utility function so we don't make real URL calls during tests
jest.mock('@/lib/strava', ()=>({
        getStravaAuthUrl: jest.fn(()=>'http://localhost:3000/api/auth/strava/callback')
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _LoginButton = require("../../components/LoginButton");
describe('LoginButton', ()=>{
    // This test checks if the button shows up with correct text
    it('renders with correct text', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginButton.LoginButton, {}));
        // screen.getByText finds elements by their text content
        const button = _react.screen.getByText('Login with Strava');
        expect(button).toBeInTheDocument();
    });
    // This test verifies the link has the correct Strava URL
    it('links to the correct Strava authorization URL', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginButton.LoginButton, {}));
        // getByRole finds elements by their HTML role (link, button, etc)
        const link = _react.screen.getByRole('link');
        expect(link).toHaveAttribute('href', 'http://localhost:3000/api/auth/strava/callback');
    });
    // This test checks if the button has the correct styling
    it('has the correct button styling', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginButton.LoginButton, {}));
        const button = _react.screen.getByRole('link');
        // Check for shadcn/ui button classes
        expect(button).toHaveClass('inline-flex', 'items-center');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcdGlhbWFcXERlc2t0b3BcXENvZGluZ1xcZW5kdXJvcmV2YW1wXFxfX3Rlc3RzX19cXGNvbXBvbmVudHNcXExvZ2luQnV0dG9uLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcclxuaW1wb3J0IHsgTG9naW5CdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvTG9naW5CdXR0b24nXHJcbmltcG9ydCB7IGdldFN0cmF2YUF1dGhVcmwgfSBmcm9tICdAL2xpYi9zdHJhdmEnXHJcblxyXG4vLyBNb2NrIHRoZSBzdHJhdmEgdXRpbGl0eSBmdW5jdGlvbiBzbyB3ZSBkb24ndCBtYWtlIHJlYWwgVVJMIGNhbGxzIGR1cmluZyB0ZXN0c1xyXG5qZXN0Lm1vY2soJ0AvbGliL3N0cmF2YScsICgpID0+ICh7XHJcbiAgZ2V0U3RyYXZhQXV0aFVybDogamVzdC5mbigoKSA9PiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9hdXRoL3N0cmF2YS9jYWxsYmFjaycpXHJcbn0pKVxyXG5cclxuZGVzY3JpYmUoJ0xvZ2luQnV0dG9uJywgKCkgPT4ge1xyXG4gIC8vIFRoaXMgdGVzdCBjaGVja3MgaWYgdGhlIGJ1dHRvbiBzaG93cyB1cCB3aXRoIGNvcnJlY3QgdGV4dFxyXG4gIGl0KCdyZW5kZXJzIHdpdGggY29ycmVjdCB0ZXh0JywgKCkgPT4ge1xyXG4gICAgcmVuZGVyKDxMb2dpbkJ1dHRvbiAvPilcclxuICAgIFxyXG4gICAgLy8gc2NyZWVuLmdldEJ5VGV4dCBmaW5kcyBlbGVtZW50cyBieSB0aGVpciB0ZXh0IGNvbnRlbnRcclxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ0xvZ2luIHdpdGggU3RyYXZhJylcclxuICAgIGV4cGVjdChidXR0b24pLnRvQmVJblRoZURvY3VtZW50KClcclxuICB9KVxyXG5cclxuICAvLyBUaGlzIHRlc3QgdmVyaWZpZXMgdGhlIGxpbmsgaGFzIHRoZSBjb3JyZWN0IFN0cmF2YSBVUkxcclxuICBpdCgnbGlua3MgdG8gdGhlIGNvcnJlY3QgU3RyYXZhIGF1dGhvcml6YXRpb24gVVJMJywgKCkgPT4ge1xyXG4gICAgcmVuZGVyKDxMb2dpbkJ1dHRvbiAvPilcclxuICAgIFxyXG4gICAgLy8gZ2V0QnlSb2xlIGZpbmRzIGVsZW1lbnRzIGJ5IHRoZWlyIEhUTUwgcm9sZSAobGluaywgYnV0dG9uLCBldGMpXHJcbiAgICBjb25zdCBsaW5rID0gc2NyZWVuLmdldEJ5Um9sZSgnbGluaycpXHJcbiAgICBleHBlY3QobGluaykudG9IYXZlQXR0cmlidXRlKCdocmVmJywgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvYXV0aC9zdHJhdmEvY2FsbGJhY2snKVxyXG4gIH0pXHJcblxyXG4gIC8vIFRoaXMgdGVzdCBjaGVja3MgaWYgdGhlIGJ1dHRvbiBoYXMgdGhlIGNvcnJlY3Qgc3R5bGluZ1xyXG4gIGl0KCdoYXMgdGhlIGNvcnJlY3QgYnV0dG9uIHN0eWxpbmcnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoPExvZ2luQnV0dG9uIC8+KVxyXG4gICAgXHJcbiAgICBjb25zdCBidXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdsaW5rJylcclxuICAgIC8vIENoZWNrIGZvciBzaGFkY24vdWkgYnV0dG9uIGNsYXNzZXNcclxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUNsYXNzKFxyXG4gICAgICAnaW5saW5lLWZsZXgnLFxyXG4gICAgICAnaXRlbXMtY2VudGVyJ1xyXG4gICAgKVxyXG4gIH0pXHJcbn0pICJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImdldFN0cmF2YUF1dGhVcmwiLCJmbiIsImRlc2NyaWJlIiwiaXQiLCJyZW5kZXIiLCJMb2dpbkJ1dHRvbiIsImJ1dHRvbiIsInNjcmVlbiIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwibGluayIsImdldEJ5Um9sZSIsInRvSGF2ZUF0dHJpYnV0ZSIsInRvSGF2ZUNsYXNzIl0sIm1hcHBpbmdzIjoiO0FBSUEsZ0ZBQWdGO0FBQ2hGQSxLQUFLQyxJQUFJLENBQUMsZ0JBQWdCLElBQU8sQ0FBQTtRQUMvQkMsa0JBQWtCRixLQUFLRyxFQUFFLENBQUMsSUFBTTtJQUNsQyxDQUFBOzs7Ozt1QkFQK0I7NkJBQ0g7QUFRNUJDLFNBQVMsZUFBZTtJQUN0Qiw0REFBNEQ7SUFDNURDLEdBQUcsNkJBQTZCO1FBQzlCQyxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDQyx3QkFBVztRQUVuQix3REFBd0Q7UUFDeEQsTUFBTUMsU0FBU0MsYUFBTSxDQUFDQyxTQUFTLENBQUM7UUFDaENDLE9BQU9ILFFBQVFJLGlCQUFpQjtJQUNsQztJQUVBLHlEQUF5RDtJQUN6RFAsR0FBRyxpREFBaUQ7UUFDbERDLElBQUFBLGFBQU0sZ0JBQUMscUJBQUNDLHdCQUFXO1FBRW5CLGtFQUFrRTtRQUNsRSxNQUFNTSxPQUFPSixhQUFNLENBQUNLLFNBQVMsQ0FBQztRQUM5QkgsT0FBT0UsTUFBTUUsZUFBZSxDQUFDLFFBQVE7SUFDdkM7SUFFQSx5REFBeUQ7SUFDekRWLEdBQUcsa0NBQWtDO1FBQ25DQyxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDQyx3QkFBVztRQUVuQixNQUFNQyxTQUFTQyxhQUFNLENBQUNLLFNBQVMsQ0FBQztRQUNoQyxxQ0FBcUM7UUFDckNILE9BQU9ILFFBQVFRLFdBQVcsQ0FDeEIsZUFDQTtJQUVKO0FBQ0YifQ==