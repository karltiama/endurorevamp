01a592dfe37bacfee7d7cd49b1c12eaf
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _utils = require("../../lib/utils");
describe('Unit Conversion Utilities', ()=>{
    describe('formatDistance', ()=>{
        it('formats distance in kilometers by default', ()=>{
            expect((0, _utils.formatDistance)(5000)).toBe('5.0 km');
            expect((0, _utils.formatDistance)(1500)).toBe('1.5 km');
            expect((0, _utils.formatDistance)(500)).toBe('0.5 km');
        });
        it('formats distance in miles when specified', ()=>{
            expect((0, _utils.formatDistance)(5000, 'miles')).toBe('3.1 mi');
            expect((0, _utils.formatDistance)(1609.34, 'miles')).toBe('1.0 mi') // 1 mile = 1609.34 meters
            ;
            expect((0, _utils.formatDistance)(3218.69, 'miles')).toBe('2.0 mi') // 2 miles
            ;
        });
        it('handles zero distance', ()=>{
            expect((0, _utils.formatDistance)(0)).toBe('0.0 km');
            expect((0, _utils.formatDistance)(0, 'miles')).toBe('0.0 mi');
        });
    });
    describe('formatPace', ()=>{
        it('formats pace in min/km by default', ()=>{
            expect((0, _utils.formatPace)(300)).toBe('5:00/km') // 5 minutes per km
            ;
            expect((0, _utils.formatPace)(330)).toBe('5:30/km') // 5 minutes 30 seconds per km
            ;
            expect((0, _utils.formatPace)(275)).toBe('4:35/km') // 4 minutes 35 seconds per km
            ;
        });
        it('formats pace in min/mile when specified', ()=>{
            expect((0, _utils.formatPace)(300, 'min/mile')).toBe('8:02/mi') // ~8:02 per mile (300 * 1.60934 / 60 = 8.047 minutes)
            ;
            expect((0, _utils.formatPace)(240, 'min/mile')).toBe('6:26/mi') // ~6:26 per mile
            ;
        });
        it('handles zero pace', ()=>{
            expect((0, _utils.formatPace)(0)).toBe('0:00/km');
            expect((0, _utils.formatPace)(0, 'min/mile')).toBe('0:00/mi');
        });
        it('rounds seconds correctly', ()=>{
            expect((0, _utils.formatPace)(305)).toBe('5:05/km') // Should round to 5 seconds
            ;
            expect((0, _utils.formatPace)(302)).toBe('5:02/km') // Should round to 2 seconds
            ;
        });
    });
    describe('convertDistance', ()=>{
        it('converts meters to kilometers', ()=>{
            expect((0, _utils.convertDistance)(5000, 'km')).toBe(5.0);
            expect((0, _utils.convertDistance)(1500, 'km')).toBe(1.5);
        });
        it('converts meters to miles', ()=>{
            expect((0, _utils.convertDistance)(1609.34, 'miles')).toBeCloseTo(1.0, 2);
            expect((0, _utils.convertDistance)(5000, 'miles')).toBeCloseTo(3.107, 2);
        });
        it('handles zero distance', ()=>{
            expect((0, _utils.convertDistance)(0, 'km')).toBe(0);
            expect((0, _utils.convertDistance)(0, 'miles')).toBe(0);
        });
    });
    describe('convertPace', ()=>{
        it('returns same pace for min/km', ()=>{
            expect((0, _utils.convertPace)(300, 'min/km')).toBe(300);
            expect((0, _utils.convertPace)(240, 'min/km')).toBe(240);
        });
        it('converts pace from min/km to min/mile', ()=>{
            const paceKm = 300 // 5:00/km
            ;
            const paceMile = (0, _utils.convertPace)(paceKm, 'min/mile');
            expect(paceMile).toBeCloseTo(paceKm * _utils.CONVERSION_CONSTANTS.MILES_TO_KM, 1);
        });
        it('handles zero pace', ()=>{
            expect((0, _utils.convertPace)(0, 'min/km')).toBe(0);
            expect((0, _utils.convertPace)(0, 'min/mile')).toBe(0);
        });
    });
    describe('getDistanceUnit', ()=>{
        it('returns correct unit strings', ()=>{
            expect((0, _utils.getDistanceUnit)('km')).toBe('km');
            expect((0, _utils.getDistanceUnit)('miles')).toBe('mi');
        });
    });
    describe('getPaceUnit', ()=>{
        it('returns correct pace unit strings', ()=>{
            expect((0, _utils.getPaceUnit)('min/km')).toBe('/km');
            expect((0, _utils.getPaceUnit)('min/mile')).toBe('/mi');
        });
    });
    describe('CONVERSION_CONSTANTS', ()=>{
        it('has correct conversion factors', ()=>{
            expect(_utils.CONVERSION_CONSTANTS.KM_TO_MILES).toBeCloseTo(0.621371, 5);
            expect(_utils.CONVERSION_CONSTANTS.MILES_TO_KM).toBeCloseTo(1.60934, 5);
        });
        it('conversion factors are reciprocals', ()=>{
            const product = _utils.CONVERSION_CONSTANTS.KM_TO_MILES * _utils.CONVERSION_CONSTANTS.MILES_TO_KM;
            expect(product).toBeCloseTo(1.0, 3);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,