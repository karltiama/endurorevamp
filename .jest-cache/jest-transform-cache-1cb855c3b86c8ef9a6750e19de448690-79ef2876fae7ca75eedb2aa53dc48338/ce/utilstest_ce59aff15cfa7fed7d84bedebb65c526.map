{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\lib\\utils.test.ts"],"sourcesContent":["import { \r\n  formatDistance, \r\n  formatPace, \r\n  convertDistance, \r\n  convertPace, \r\n  getDistanceUnit, \r\n  getPaceUnit,\r\n  CONVERSION_CONSTANTS \r\n} from '@/lib/utils'\r\n\r\ndescribe('Unit Conversion Utilities', () => {\r\n  describe('formatDistance', () => {\r\n    it('formats distance in kilometers by default', () => {\r\n      expect(formatDistance(5000)).toBe('5.0 km')\r\n      expect(formatDistance(1500)).toBe('1.5 km')\r\n      expect(formatDistance(500)).toBe('0.5 km')\r\n    })\r\n\r\n    it('formats distance in miles when specified', () => {\r\n      expect(formatDistance(5000, 'miles')).toBe('3.1 mi')\r\n      expect(formatDistance(1609.34, 'miles')).toBe('1.0 mi') // 1 mile = 1609.34 meters\r\n      expect(formatDistance(3218.69, 'miles')).toBe('2.0 mi') // 2 miles\r\n    })\r\n\r\n    it('handles zero distance', () => {\r\n      expect(formatDistance(0)).toBe('0.0 km')\r\n      expect(formatDistance(0, 'miles')).toBe('0.0 mi')\r\n    })\r\n  })\r\n\r\n  describe('formatPace', () => {\r\n    it('formats pace in min/km by default', () => {\r\n      expect(formatPace(300)).toBe('5:00/km') // 5 minutes per km\r\n      expect(formatPace(330)).toBe('5:30/km') // 5 minutes 30 seconds per km\r\n      expect(formatPace(275)).toBe('4:35/km') // 4 minutes 35 seconds per km\r\n    })\r\n\r\n    it('formats pace in min/mile when specified', () => {\r\n      expect(formatPace(300, 'min/mile')).toBe('8:02/mi') // ~8:02 per mile (300 * 1.60934 / 60 = 8.047 minutes)\r\n      expect(formatPace(240, 'min/mile')).toBe('6:26/mi') // ~6:26 per mile\r\n    })\r\n\r\n    it('handles zero pace', () => {\r\n      expect(formatPace(0)).toBe('0:00/km')\r\n      expect(formatPace(0, 'min/mile')).toBe('0:00/mi')\r\n    })\r\n\r\n    it('rounds seconds correctly', () => {\r\n      expect(formatPace(305)).toBe('5:05/km') // Should round to 5 seconds\r\n      expect(formatPace(302)).toBe('5:02/km') // Should round to 2 seconds\r\n    })\r\n  })\r\n\r\n  describe('convertDistance', () => {\r\n    it('converts meters to kilometers', () => {\r\n      expect(convertDistance(5000, 'km')).toBe(5.0)\r\n      expect(convertDistance(1500, 'km')).toBe(1.5)\r\n    })\r\n\r\n    it('converts meters to miles', () => {\r\n      expect(convertDistance(1609.34, 'miles')).toBeCloseTo(1.0, 2)\r\n      expect(convertDistance(5000, 'miles')).toBeCloseTo(3.107, 2)\r\n    })\r\n\r\n    it('handles zero distance', () => {\r\n      expect(convertDistance(0, 'km')).toBe(0)\r\n      expect(convertDistance(0, 'miles')).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe('convertPace', () => {\r\n    it('returns same pace for min/km', () => {\r\n      expect(convertPace(300, 'min/km')).toBe(300)\r\n      expect(convertPace(240, 'min/km')).toBe(240)\r\n    })\r\n\r\n    it('converts pace from min/km to min/mile', () => {\r\n      const paceKm = 300 // 5:00/km\r\n      const paceMile = convertPace(paceKm, 'min/mile')\r\n      expect(paceMile).toBeCloseTo(paceKm * CONVERSION_CONSTANTS.MILES_TO_KM, 1)\r\n    })\r\n\r\n    it('handles zero pace', () => {\r\n      expect(convertPace(0, 'min/km')).toBe(0)\r\n      expect(convertPace(0, 'min/mile')).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe('getDistanceUnit', () => {\r\n    it('returns correct unit strings', () => {\r\n      expect(getDistanceUnit('km')).toBe('km')\r\n      expect(getDistanceUnit('miles')).toBe('mi')\r\n    })\r\n  })\r\n\r\n  describe('getPaceUnit', () => {\r\n    it('returns correct pace unit strings', () => {\r\n      expect(getPaceUnit('min/km')).toBe('/km')\r\n      expect(getPaceUnit('min/mile')).toBe('/mi')\r\n    })\r\n  })\r\n\r\n  describe('CONVERSION_CONSTANTS', () => {\r\n    it('has correct conversion factors', () => {\r\n      expect(CONVERSION_CONSTANTS.KM_TO_MILES).toBeCloseTo(0.621371, 5)\r\n      expect(CONVERSION_CONSTANTS.MILES_TO_KM).toBeCloseTo(1.60934, 5)\r\n    })\r\n\r\n    it('conversion factors are reciprocals', () => {\r\n      const product = CONVERSION_CONSTANTS.KM_TO_MILES * CONVERSION_CONSTANTS.MILES_TO_KM\r\n      expect(product).toBeCloseTo(1.0, 3)\r\n    })\r\n  })\r\n}) "],"names":["describe","it","expect","formatDistance","toBe","formatPace","convertDistance","toBeCloseTo","convertPace","paceKm","paceMile","CONVERSION_CONSTANTS","MILES_TO_KM","getDistanceUnit","getPaceUnit","KM_TO_MILES","product"],"mappings":";;;;uBAQO;AAEPA,SAAS,6BAA6B;IACpCA,SAAS,kBAAkB;QACzBC,GAAG,6CAA6C;YAC9CC,OAAOC,IAAAA,qBAAc,EAAC,OAAOC,IAAI,CAAC;YAClCF,OAAOC,IAAAA,qBAAc,EAAC,OAAOC,IAAI,CAAC;YAClCF,OAAOC,IAAAA,qBAAc,EAAC,MAAMC,IAAI,CAAC;QACnC;QAEAH,GAAG,4CAA4C;YAC7CC,OAAOC,IAAAA,qBAAc,EAAC,MAAM,UAAUC,IAAI,CAAC;YAC3CF,OAAOC,IAAAA,qBAAc,EAAC,SAAS,UAAUC,IAAI,CAAC,UAAU,0BAA0B;;YAClFF,OAAOC,IAAAA,qBAAc,EAAC,SAAS,UAAUC,IAAI,CAAC,UAAU,UAAU;;QACpE;QAEAH,GAAG,yBAAyB;YAC1BC,OAAOC,IAAAA,qBAAc,EAAC,IAAIC,IAAI,CAAC;YAC/BF,OAAOC,IAAAA,qBAAc,EAAC,GAAG,UAAUC,IAAI,CAAC;QAC1C;IACF;IAEAJ,SAAS,cAAc;QACrBC,GAAG,qCAAqC;YACtCC,OAAOG,IAAAA,iBAAU,EAAC,MAAMD,IAAI,CAAC,WAAW,mBAAmB;;YAC3DF,OAAOG,IAAAA,iBAAU,EAAC,MAAMD,IAAI,CAAC,WAAW,8BAA8B;;YACtEF,OAAOG,IAAAA,iBAAU,EAAC,MAAMD,IAAI,CAAC,WAAW,8BAA8B;;QACxE;QAEAH,GAAG,2CAA2C;YAC5CC,OAAOG,IAAAA,iBAAU,EAAC,KAAK,aAAaD,IAAI,CAAC,WAAW,sDAAsD;;YAC1GF,OAAOG,IAAAA,iBAAU,EAAC,KAAK,aAAaD,IAAI,CAAC,WAAW,iBAAiB;;QACvE;QAEAH,GAAG,qBAAqB;YACtBC,OAAOG,IAAAA,iBAAU,EAAC,IAAID,IAAI,CAAC;YAC3BF,OAAOG,IAAAA,iBAAU,EAAC,GAAG,aAAaD,IAAI,CAAC;QACzC;QAEAH,GAAG,4BAA4B;YAC7BC,OAAOG,IAAAA,iBAAU,EAAC,MAAMD,IAAI,CAAC,WAAW,4BAA4B;;YACpEF,OAAOG,IAAAA,iBAAU,EAAC,MAAMD,IAAI,CAAC,WAAW,4BAA4B;;QACtE;IACF;IAEAJ,SAAS,mBAAmB;QAC1BC,GAAG,iCAAiC;YAClCC,OAAOI,IAAAA,sBAAe,EAAC,MAAM,OAAOF,IAAI,CAAC;YACzCF,OAAOI,IAAAA,sBAAe,EAAC,MAAM,OAAOF,IAAI,CAAC;QAC3C;QAEAH,GAAG,4BAA4B;YAC7BC,OAAOI,IAAAA,sBAAe,EAAC,SAAS,UAAUC,WAAW,CAAC,KAAK;YAC3DL,OAAOI,IAAAA,sBAAe,EAAC,MAAM,UAAUC,WAAW,CAAC,OAAO;QAC5D;QAEAN,GAAG,yBAAyB;YAC1BC,OAAOI,IAAAA,sBAAe,EAAC,GAAG,OAAOF,IAAI,CAAC;YACtCF,OAAOI,IAAAA,sBAAe,EAAC,GAAG,UAAUF,IAAI,CAAC;QAC3C;IACF;IAEAJ,SAAS,eAAe;QACtBC,GAAG,gCAAgC;YACjCC,OAAOM,IAAAA,kBAAW,EAAC,KAAK,WAAWJ,IAAI,CAAC;YACxCF,OAAOM,IAAAA,kBAAW,EAAC,KAAK,WAAWJ,IAAI,CAAC;QAC1C;QAEAH,GAAG,yCAAyC;YAC1C,MAAMQ,SAAS,IAAI,UAAU;;YAC7B,MAAMC,WAAWF,IAAAA,kBAAW,EAACC,QAAQ;YACrCP,OAAOQ,UAAUH,WAAW,CAACE,SAASE,2BAAoB,CAACC,WAAW,EAAE;QAC1E;QAEAX,GAAG,qBAAqB;YACtBC,OAAOM,IAAAA,kBAAW,EAAC,GAAG,WAAWJ,IAAI,CAAC;YACtCF,OAAOM,IAAAA,kBAAW,EAAC,GAAG,aAAaJ,IAAI,CAAC;QAC1C;IACF;IAEAJ,SAAS,mBAAmB;QAC1BC,GAAG,gCAAgC;YACjCC,OAAOW,IAAAA,sBAAe,EAAC,OAAOT,IAAI,CAAC;YACnCF,OAAOW,IAAAA,sBAAe,EAAC,UAAUT,IAAI,CAAC;QACxC;IACF;IAEAJ,SAAS,eAAe;QACtBC,GAAG,qCAAqC;YACtCC,OAAOY,IAAAA,kBAAW,EAAC,WAAWV,IAAI,CAAC;YACnCF,OAAOY,IAAAA,kBAAW,EAAC,aAAaV,IAAI,CAAC;QACvC;IACF;IAEAJ,SAAS,wBAAwB;QAC/BC,GAAG,kCAAkC;YACnCC,OAAOS,2BAAoB,CAACI,WAAW,EAAER,WAAW,CAAC,UAAU;YAC/DL,OAAOS,2BAAoB,CAACC,WAAW,EAAEL,WAAW,CAAC,SAAS;QAChE;QAEAN,GAAG,sCAAsC;YACvC,MAAMe,UAAUL,2BAAoB,CAACI,WAAW,GAAGJ,2BAAoB,CAACC,WAAW;YACnFV,OAAOc,SAAST,WAAW,CAAC,KAAK;QACnC;IACF;AACF"}