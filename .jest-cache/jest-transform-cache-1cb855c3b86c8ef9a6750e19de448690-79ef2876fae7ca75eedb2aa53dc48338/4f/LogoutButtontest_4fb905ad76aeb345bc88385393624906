a2f27fcfbf7254ed16ca3357c0656f17
"use strict";
// Mock the auth provider
jest.mock('@/providers/AuthProvider');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _LogoutButton = /*#__PURE__*/ _interop_require_default(require("../../components/LogoutButton"));
const _AuthProvider = require("../../providers/AuthProvider");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseAuth = _AuthProvider.useAuth;
describe('LogoutButton', ()=>{
    const mockSignOut = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('should render sign out button when not loading', ()=>{
        mockUseAuth.mockReturnValue({
            user: {
                id: 'user-123',
                email: 'test@example.com'
            },
            isLoading: false,
            isAuthenticated: true,
            signOut: mockSignOut,
            refreshUser: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
        const button = _react.screen.getByRole('button', {
            name: /sign out/i
        });
        expect(button).toBeInTheDocument();
        expect(button).not.toBeDisabled();
    });
    it('should render signing out text when loading', ()=>{
        mockUseAuth.mockReturnValue({
            user: {
                id: 'user-123',
                email: 'test@example.com'
            },
            isLoading: true,
            isAuthenticated: true,
            signOut: mockSignOut,
            refreshUser: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
        const button = _react.screen.getByRole('button', {
            name: /signing out/i
        });
        expect(button).toBeInTheDocument();
        expect(button).toBeDisabled();
    });
    it('should call signOut when clicked', async ()=>{
        mockUseAuth.mockReturnValue({
            user: {
                id: 'user-123',
                email: 'test@example.com'
            },
            isLoading: false,
            isAuthenticated: true,
            signOut: mockSignOut,
            refreshUser: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
        const button = _react.screen.getByRole('button', {
            name: /sign out/i
        });
        _react.fireEvent.click(button);
        await (0, _react.waitFor)(()=>{
            expect(mockSignOut).toHaveBeenCalledTimes(1);
        });
    });
    it('should be disabled when loading', ()=>{
        mockUseAuth.mockReturnValue({
            user: {
                id: 'user-123',
                email: 'test@example.com'
            },
            isLoading: true,
            isAuthenticated: true,
            signOut: mockSignOut,
            refreshUser: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
        const button = _react.screen.getByRole('button');
        expect(button).toBeDisabled();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcdGlhbWFcXERlc2t0b3BcXENvZGluZ1xcZW5kdXJvcmV2YW1wXFxfX3Rlc3RzX19cXGNvbXBvbmVudHNcXExvZ291dEJ1dHRvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcclxuaW1wb3J0IExvZ291dEJ1dHRvbiBmcm9tICdAL2NvbXBvbmVudHMvTG9nb3V0QnV0dG9uJ1xyXG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnQC9wcm92aWRlcnMvQXV0aFByb3ZpZGVyJ1xyXG5cclxuLy8gTW9jayB0aGUgYXV0aCBwcm92aWRlclxyXG5qZXN0Lm1vY2soJ0AvcHJvdmlkZXJzL0F1dGhQcm92aWRlcicpXHJcblxyXG5jb25zdCBtb2NrVXNlQXV0aCA9IHVzZUF1dGggYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgdXNlQXV0aD5cclxuXHJcbmRlc2NyaWJlKCdMb2dvdXRCdXR0b24nLCAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja1NpZ25PdXQgPSBqZXN0LmZuKClcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdzaG91bGQgcmVuZGVyIHNpZ24gb3V0IGJ1dHRvbiB3aGVuIG5vdCBsb2FkaW5nJywgKCkgPT4ge1xyXG4gICAgbW9ja1VzZUF1dGgubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdXNlcjogeyBpZDogJ3VzZXItMTIzJywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9IGFzIGFueSxcclxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgaXNBdXRoZW50aWNhdGVkOiB0cnVlLFxyXG4gICAgICBzaWduT3V0OiBtb2NrU2lnbk91dCxcclxuICAgICAgcmVmcmVzaFVzZXI6IGplc3QuZm4oKSxcclxuICAgIH0pXHJcblxyXG4gICAgcmVuZGVyKDxMb2dvdXRCdXR0b24gLz4pXHJcblxyXG4gICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc2lnbiBvdXQvaSB9KVxyXG4gICAgZXhwZWN0KGJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gICAgZXhwZWN0KGJ1dHRvbikubm90LnRvQmVEaXNhYmxlZCgpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ3Nob3VsZCByZW5kZXIgc2lnbmluZyBvdXQgdGV4dCB3aGVuIGxvYWRpbmcnLCAoKSA9PiB7XHJcbiAgICBtb2NrVXNlQXV0aC5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICB1c2VyOiB7IGlkOiAndXNlci0xMjMnLCBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nIH0gYXMgYW55LFxyXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXHJcbiAgICAgIGlzQXV0aGVudGljYXRlZDogdHJ1ZSxcclxuICAgICAgc2lnbk91dDogbW9ja1NpZ25PdXQsXHJcbiAgICAgIHJlZnJlc2hVc2VyOiBqZXN0LmZuKCksXHJcbiAgICB9KVxyXG5cclxuICAgIHJlbmRlcig8TG9nb3V0QnV0dG9uIC8+KVxyXG5cclxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3NpZ25pbmcgb3V0L2kgfSlcclxuICAgIGV4cGVjdChidXR0b24pLnRvQmVJblRoZURvY3VtZW50KClcclxuICAgIGV4cGVjdChidXR0b24pLnRvQmVEaXNhYmxlZCgpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ3Nob3VsZCBjYWxsIHNpZ25PdXQgd2hlbiBjbGlja2VkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgbW9ja1VzZUF1dGgubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdXNlcjogeyBpZDogJ3VzZXItMTIzJywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9IGFzIGFueSxcclxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgaXNBdXRoZW50aWNhdGVkOiB0cnVlLFxyXG4gICAgICBzaWduT3V0OiBtb2NrU2lnbk91dCxcclxuICAgICAgcmVmcmVzaFVzZXI6IGplc3QuZm4oKSxcclxuICAgIH0pXHJcblxyXG4gICAgcmVuZGVyKDxMb2dvdXRCdXR0b24gLz4pXHJcblxyXG4gICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc2lnbiBvdXQvaSB9KVxyXG4gICAgZmlyZUV2ZW50LmNsaWNrKGJ1dHRvbilcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KG1vY2tTaWduT3V0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcclxuICAgIH0pXHJcbiAgfSlcclxuXHJcbiAgaXQoJ3Nob3VsZCBiZSBkaXNhYmxlZCB3aGVuIGxvYWRpbmcnLCAoKSA9PiB7XHJcbiAgICBtb2NrVXNlQXV0aC5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICB1c2VyOiB7IGlkOiAndXNlci0xMjMnLCBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nIH0gYXMgYW55LFxyXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXHJcbiAgICAgIGlzQXV0aGVudGljYXRlZDogdHJ1ZSxcclxuICAgICAgc2lnbk91dDogbW9ja1NpZ25PdXQsXHJcbiAgICAgIHJlZnJlc2hVc2VyOiBqZXN0LmZuKCksXHJcbiAgICB9KVxyXG5cclxuICAgIHJlbmRlcig8TG9nb3V0QnV0dG9uIC8+KVxyXG5cclxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpXHJcbiAgICBleHBlY3QoYnV0dG9uKS50b0JlRGlzYWJsZWQoKVxyXG4gIH0pXHJcbn0pICJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIm1vY2tVc2VBdXRoIiwidXNlQXV0aCIsImRlc2NyaWJlIiwibW9ja1NpZ25PdXQiLCJmbiIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJtb2NrUmV0dXJuVmFsdWUiLCJ1c2VyIiwiaWQiLCJlbWFpbCIsImlzTG9hZGluZyIsImlzQXV0aGVudGljYXRlZCIsInNpZ25PdXQiLCJyZWZyZXNoVXNlciIsInJlbmRlciIsIkxvZ291dEJ1dHRvbiIsImJ1dHRvbiIsInNjcmVlbiIsImdldEJ5Um9sZSIsIm5hbWUiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsIm5vdCIsInRvQmVEaXNhYmxlZCIsImZpcmVFdmVudCIsImNsaWNrIiwid2FpdEZvciIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJtYXBwaW5ncyI6IjtBQUlBLHlCQUF5QjtBQUN6QkEsS0FBS0MsSUFBSSxDQUFDOzs7Ozt1QkFMeUM7cUVBQzFCOzhCQUNEOzs7Ozs7QUFLeEIsTUFBTUMsY0FBY0MscUJBQU87QUFFM0JDLFNBQVMsZ0JBQWdCO0lBQ3ZCLE1BQU1DLGNBQWNMLEtBQUtNLEVBQUU7SUFFM0JDLFdBQVc7UUFDVFAsS0FBS1EsYUFBYTtJQUNwQjtJQUVBQyxHQUFHLGtEQUFrRDtRQUNuRFAsWUFBWVEsZUFBZSxDQUFDO1lBQzFCQyxNQUFNO2dCQUFFQyxJQUFJO2dCQUFZQyxPQUFPO1lBQW1CO1lBQ2xEQyxXQUFXO1lBQ1hDLGlCQUFpQjtZQUNqQkMsU0FBU1g7WUFDVFksYUFBYWpCLEtBQUtNLEVBQUU7UUFDdEI7UUFFQVksSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ0MscUJBQVk7UUFFcEIsTUFBTUMsU0FBU0MsYUFBTSxDQUFDQyxTQUFTLENBQUMsVUFBVTtZQUFFQyxNQUFNO1FBQVk7UUFDOURDLE9BQU9KLFFBQVFLLGlCQUFpQjtRQUNoQ0QsT0FBT0osUUFBUU0sR0FBRyxDQUFDQyxZQUFZO0lBQ2pDO0lBRUFsQixHQUFHLCtDQUErQztRQUNoRFAsWUFBWVEsZUFBZSxDQUFDO1lBQzFCQyxNQUFNO2dCQUFFQyxJQUFJO2dCQUFZQyxPQUFPO1lBQW1CO1lBQ2xEQyxXQUFXO1lBQ1hDLGlCQUFpQjtZQUNqQkMsU0FBU1g7WUFDVFksYUFBYWpCLEtBQUtNLEVBQUU7UUFDdEI7UUFFQVksSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ0MscUJBQVk7UUFFcEIsTUFBTUMsU0FBU0MsYUFBTSxDQUFDQyxTQUFTLENBQUMsVUFBVTtZQUFFQyxNQUFNO1FBQWU7UUFDakVDLE9BQU9KLFFBQVFLLGlCQUFpQjtRQUNoQ0QsT0FBT0osUUFBUU8sWUFBWTtJQUM3QjtJQUVBbEIsR0FBRyxvQ0FBb0M7UUFDckNQLFlBQVlRLGVBQWUsQ0FBQztZQUMxQkMsTUFBTTtnQkFBRUMsSUFBSTtnQkFBWUMsT0FBTztZQUFtQjtZQUNsREMsV0FBVztZQUNYQyxpQkFBaUI7WUFDakJDLFNBQVNYO1lBQ1RZLGFBQWFqQixLQUFLTSxFQUFFO1FBQ3RCO1FBRUFZLElBQUFBLGFBQU0sZ0JBQUMscUJBQUNDLHFCQUFZO1FBRXBCLE1BQU1DLFNBQVNDLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLFVBQVU7WUFBRUMsTUFBTTtRQUFZO1FBQzlESyxnQkFBUyxDQUFDQyxLQUFLLENBQUNUO1FBRWhCLE1BQU1VLElBQUFBLGNBQU8sRUFBQztZQUNaTixPQUFPbkIsYUFBYTBCLHFCQUFxQixDQUFDO1FBQzVDO0lBQ0Y7SUFFQXRCLEdBQUcsbUNBQW1DO1FBQ3BDUCxZQUFZUSxlQUFlLENBQUM7WUFDMUJDLE1BQU07Z0JBQUVDLElBQUk7Z0JBQVlDLE9BQU87WUFBbUI7WUFDbERDLFdBQVc7WUFDWEMsaUJBQWlCO1lBQ2pCQyxTQUFTWDtZQUNUWSxhQUFhakIsS0FBS00sRUFBRTtRQUN0QjtRQUVBWSxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDQyxxQkFBWTtRQUVwQixNQUFNQyxTQUFTQyxhQUFNLENBQUNDLFNBQVMsQ0FBQztRQUNoQ0UsT0FBT0osUUFBUU8sWUFBWTtJQUM3QjtBQUNGIn0=