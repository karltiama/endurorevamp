{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\database\\schema-validation.test.ts"],"sourcesContent":["import { createClient, SupabaseClient } from '@supabase/supabase-js'\r\n\r\n// Schema validation tests to ensure relationships work correctly\r\ndescribe('Database Schema Validation', () => {\r\n  let supabase: SupabaseClient | null = null\r\n  \r\n  beforeAll(() => {\r\n    // Check if we have real environment variables\r\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || \r\n        !process.env.SUPABASE_SERVICE_ROLE_KEY ||\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL.includes('test.supabase.co')) {\r\n      console.log('⚠️  Skipping schema validation - no real database credentials')\r\n      return\r\n    }\r\n    \r\n    supabase = createClient(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n    )\r\n  })\r\n\r\n  describe('Core Table Existence', () => {\r\n    const requiredTables = [\r\n      'activities',\r\n      'strava_tokens', \r\n      'sync_state',\r\n      'goal_types',\r\n      'user_goals',\r\n      'goal_progress',\r\n      'user_onboarding'\r\n    ]\r\n\r\n    requiredTables.forEach(table => {\r\n      it(`should have ${table} table`, async () => {\r\n        if (!supabase) {\r\n          console.log('Skipping test - no database connection')\r\n          return\r\n        }\r\n        \r\n        const { data, error } = await supabase\r\n          .from(table)\r\n          .select('*')\r\n          .limit(1)\r\n\r\n        expect(error).toBeNull()\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Foreign Key Relationships', () => {\r\n    it('user_goals should reference goal_types correctly', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      // Get a goal type\r\n      const { data: goalTypes } = await supabase\r\n        .from('goal_types')\r\n        .select('id, name')\r\n        .limit(1)\r\n\r\n      if (goalTypes && goalTypes.length > 0) {\r\n        // Check if any user_goals reference this goal_type\r\n        const { data: userGoals, error } = await supabase\r\n          .from('user_goals')\r\n          .select(`\r\n            id,\r\n            goal_type_id,\r\n            goal_types (\r\n              id,\r\n              name,\r\n              display_name\r\n            )\r\n          `)\r\n          .eq('goal_type_id', goalTypes[0].id)\r\n          .limit(1)\r\n\r\n        expect(error).toBeNull()\r\n        \r\n        if (userGoals && userGoals.length > 0) {\r\n          expect(userGoals[0].goal_types).toBeTruthy()\r\n          expect((userGoals[0].goal_types as any).id).toBe(goalTypes[0].id)\r\n        }\r\n      }\r\n    })\r\n\r\n    it('goal_progress should reference user_goals correctly', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const { data: userGoals } = await supabase\r\n        .from('user_goals')\r\n        .select('id')\r\n        .limit(1)\r\n\r\n      if (userGoals && userGoals.length > 0) {\r\n        const { data: progress, error } = await supabase\r\n          .from('goal_progress')\r\n          .select(`\r\n            id,\r\n            user_goal_id,\r\n            user_goals (\r\n              id,\r\n              goal_type_id\r\n            )\r\n          `)\r\n          .eq('user_goal_id', userGoals[0].id)\r\n          .limit(1)\r\n\r\n        expect(error).toBeNull()\r\n\r\n        if (progress && progress.length > 0) {\r\n          expect(progress[0].user_goals).toBeTruthy()\r\n          expect((progress[0].user_goals as any).id).toBe(userGoals[0].id)\r\n        }\r\n      }\r\n    })\r\n\r\n    it('user_onboarding should have unique user_id constraint', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const { data: onboarding, error } = await supabase\r\n        .from('user_onboarding')\r\n        .select('user_id')\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (onboarding && onboarding.length > 0) {\r\n        const userIds = onboarding.map((o: any) => o.user_id)\r\n        const uniqueUserIds = [...new Set(userIds)]\r\n        \r\n        // Should have same length if all user_ids are unique\r\n        expect(userIds.length).toBe(uniqueUserIds.length)\r\n      }\r\n    })\r\n  })\r\n\r\n  describe('Data Integrity Checks', () => {\r\n    it('goal_types should have valid categories', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const validCategories = [\r\n        'distance', 'pace', 'frequency', 'duration', \r\n        'elevation', 'heart_rate', 'event'\r\n      ]\r\n\r\n      const { data: goalTypes, error } = await supabase\r\n        .from('goal_types')\r\n        .select('category')\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (goalTypes) {\r\n        goalTypes.forEach((goalType: any) => {\r\n          expect(validCategories).toContain(goalType.category)\r\n        })\r\n      }\r\n    })\r\n\r\n    it('user_goals should have valid time_periods', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const validTimePeriods = ['weekly', 'monthly', 'single_activity', 'ongoing']\r\n\r\n      const { data: userGoals, error } = await supabase\r\n        .from('user_goals')\r\n        .select('time_period')\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (userGoals) {\r\n        userGoals.forEach((goal: any) => {\r\n          expect(validTimePeriods).toContain(goal.time_period)\r\n        })\r\n      }\r\n    })\r\n\r\n    it('activities should have user_id that matches UUID format', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const { data: activities, error } = await supabase\r\n        .from('activities')\r\n        .select('user_id')\r\n        .limit(5)\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (activities) {\r\n        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i\r\n        \r\n        activities.forEach((activity: any) => {\r\n          expect(activity.user_id).toMatch(uuidRegex)\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  describe('Dashboard Goals Feature Readiness', () => {\r\n    it('goal_data should support dashboard preferences', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const { data: userGoals, error } = await supabase\r\n        .from('user_goals')\r\n        .select('goal_data')\r\n        .not('goal_data', 'is', null)\r\n        .limit(1)\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (userGoals && userGoals.length > 0) {\r\n        const goalData = userGoals[0].goal_data\r\n        \r\n        // Should be valid JSON and support our dashboard fields\r\n        expect(typeof goalData).toBe('object')\r\n        \r\n        // These fields might not exist yet, but the structure should support them\r\n        if (goalData.show_on_dashboard !== undefined) {\r\n          expect(typeof goalData.show_on_dashboard).toBe('boolean')\r\n        }\r\n        \r\n        if (goalData.dashboard_priority !== undefined) {\r\n          expect(typeof goalData.dashboard_priority).toBe('number')\r\n          expect(goalData.dashboard_priority).toBeGreaterThan(0)\r\n          expect(goalData.dashboard_priority).toBeLessThanOrEqual(3)\r\n        }\r\n      }\r\n    })\r\n\r\n    it('user_onboarding should track goals completion', async () => {\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const { data: onboarding, error } = await supabase\r\n        .from('user_onboarding')\r\n        .select('goals_completed, current_step')\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (onboarding && onboarding.length > 0) {\r\n        onboarding.forEach((record: any) => {\r\n          // goals_completed should be boolean\r\n          expect(typeof record.goals_completed).toBe('boolean')\r\n          \r\n          // current_step should be valid value\r\n          expect(['goals', 'strava', 'complete']).toContain(record.current_step)\r\n        })\r\n      }\r\n    })\r\n\r\n    it('complete user goal flow should be queryable', async () => {\r\n      // Test the complete chain: user → user_goals → goal_types → goal_progress\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const { data, error } = await supabase\r\n        .from('user_goals')\r\n        .select(`\r\n          id,\r\n          target_value,\r\n          current_progress,\r\n          is_completed,\r\n          goal_types (\r\n            display_name,\r\n            category,\r\n            unit\r\n          ),\r\n          goal_progress (\r\n            id,\r\n            value_achieved,\r\n            contribution_amount\r\n          )\r\n        `)\r\n        .limit(1)\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (data && data.length > 0) {\r\n        const goal = data[0]\r\n        \r\n        // Should have goal details\r\n        expect(goal.target_value).toBeDefined()\r\n        expect(goal.current_progress).toBeDefined()\r\n        expect(typeof goal.is_completed).toBe('boolean')\r\n        \r\n        // Should have goal type info\r\n        if (goal.goal_types) {\r\n          expect((goal.goal_types as any).display_name).toBeDefined()\r\n          expect((goal.goal_types as any).category).toBeDefined()\r\n        }\r\n        \r\n        // Might or might not have progress records\r\n        if (goal.goal_progress && goal.goal_progress.length > 0) {\r\n          expect(goal.goal_progress[0].value_achieved).toBeDefined()\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  describe('Performance Validation', () => {\r\n    it('should have indexes on foreign keys', async () => {\r\n      // This would require a more complex query to check actual indexes\r\n      // For now, we'll just verify that foreign key queries perform reasonably\r\n      \r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const start = Date.now()\r\n      \r\n      const { data, error } = await supabase\r\n        .from('user_goals')\r\n        .select(`\r\n          id,\r\n          goal_types (display_name),\r\n          goal_progress (count)\r\n        `)\r\n        .limit(10)\r\n\r\n      const duration = Date.now() - start\r\n      \r\n      expect(error).toBeNull()\r\n      expect(duration).toBeLessThan(5000) // Should complete within 5 seconds\r\n    })\r\n  })\r\n\r\n  describe('Data Flow Validation', () => {\r\n    it('complete user goal flow should be queryable', async () => {\r\n      // Test the complete chain: user → user_goals → goal_types → goal_progress\r\n      if (!supabase) {\r\n        console.log('Skipping test - no database connection')\r\n        return\r\n      }\r\n      \r\n      const { data, error } = await supabase\r\n        .from('user_goals')\r\n        .select(`\r\n          id,\r\n          target_value,\r\n          current_progress,\r\n          is_completed,\r\n          goal_types (\r\n            display_name,\r\n            category,\r\n            unit\r\n          ),\r\n          goal_progress (\r\n            id,\r\n            value_achieved,\r\n            contribution_amount\r\n          )\r\n        `)\r\n        .limit(1)\r\n\r\n      expect(error).toBeNull()\r\n\r\n      if (data && data.length > 0) {\r\n        const goal = data[0]\r\n        \r\n        // Should have goal details\r\n        expect(goal.target_value).toBeDefined()\r\n        expect(goal.current_progress).toBeDefined()\r\n        expect(typeof goal.is_completed).toBe('boolean')\r\n        \r\n        // Should have goal type info\r\n        if (goal.goal_types) {\r\n          expect((goal.goal_types as any).display_name).toBeDefined()\r\n          expect((goal.goal_types as any).category).toBeDefined()\r\n        }\r\n        \r\n        // Might or might not have progress records\r\n        if (goal.goal_progress && goal.goal_progress.length > 0) {\r\n          expect(goal.goal_progress[0].value_achieved).toBeDefined()\r\n        }\r\n      }\r\n    })\r\n  })\r\n})\r\n\r\n// Helper function to create test data (useful for development)\r\nexport async function createTestGoalData() {\r\n  const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n  )\r\n\r\n  // This would create test data for development/testing\r\n  // Implementation depends on your auth setup\r\n  \r\n  return {\r\n    goalType: {\r\n      name: 'test_weekly_distance',\r\n      display_name: 'Test Weekly Distance',\r\n      description: 'Test goal for weekly distance',\r\n      category: 'distance',\r\n      metric_type: 'total_distance',\r\n      unit: 'km',\r\n      calculation_method: 'Sum of weekly distances'\r\n    }\r\n  }\r\n}\r\n\r\n// Schema health check - run this regularly\r\nexport async function runSchemaHealthCheck() {\r\n  const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n  )\r\n\r\n  const results: {\r\n    tables: Record<string, any>;\r\n    relationships: Record<string, any>;\r\n    dataIntegrity: Record<string, any>;\r\n    performance: Record<string, any>;\r\n  } = {\r\n    tables: {},\r\n    relationships: {},\r\n    dataIntegrity: {},\r\n    performance: {}\r\n  }\r\n\r\n  try {\r\n    // Check table accessibility\r\n    const tables = ['goal_types', 'user_goals', 'goal_progress', 'user_onboarding']\r\n    \r\n    for (const table of tables) {\r\n      try {\r\n        const { count, error } = await supabase\r\n          .from(table)\r\n          .select('*', { count: 'exact', head: true })\r\n        \r\n        results.tables[table] = { \r\n          accessible: !error, \r\n          recordCount: count,\r\n          error: error?.message \r\n        }\r\n      } catch (e) {\r\n        results.tables[table] = { \r\n          accessible: false, \r\n          error: e instanceof Error ? e.message : 'Unknown error'\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log('Schema Health Check Results:', results)\r\n    return results\r\n    \r\n  } catch (error) {\r\n    console.error('Schema health check failed:', error)\r\n    return null\r\n  }\r\n} "],"names":["createTestGoalData","runSchemaHealthCheck","describe","supabase","beforeAll","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","includes","console","log","createClient","requiredTables","forEach","table","it","data","error","from","select","limit","expect","toBeNull","goalTypes","length","userGoals","eq","id","goal_types","toBeTruthy","toBe","progress","user_goals","onboarding","userIds","map","o","user_id","uniqueUserIds","Set","validCategories","goalType","toContain","category","validTimePeriods","goal","time_period","activities","uuidRegex","activity","toMatch","not","goalData","goal_data","show_on_dashboard","undefined","dashboard_priority","toBeGreaterThan","toBeLessThanOrEqual","record","goals_completed","current_step","target_value","toBeDefined","current_progress","is_completed","display_name","goal_progress","value_achieved","start","Date","now","duration","toBeLessThan","name","description","metric_type","unit","calculation_method","results","tables","relationships","dataIntegrity","performance","count","head","accessible","recordCount","message","e","Error"],"mappings":"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"}