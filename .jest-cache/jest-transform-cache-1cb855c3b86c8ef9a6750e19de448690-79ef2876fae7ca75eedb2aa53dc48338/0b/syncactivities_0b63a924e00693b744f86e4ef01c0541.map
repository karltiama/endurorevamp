{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\lib\\strava\\sync-activities.ts"],"sourcesContent":["import { createClient } from '@/lib/supabase/client'\r\nimport type { StravaActivity } from './types'\r\nimport { AutomaticGoalProgress } from '@/lib/goals/automatic-progress'\r\n\r\n// Helper function to safely convert values to numbers\r\nfunction safeNumber(value: unknown, fieldName?: string): number | null {\r\n  if (value === null || value === undefined) return null\r\n  if (typeof value === 'number') return isNaN(value) ? null : value\r\n  if (typeof value === 'string') {\r\n    // Handle pace strings like \"07:04 /km\" \r\n    if (value.includes('/km')) {\r\n      console.warn(`⚠️ Converting pace string to seconds: \"${value}\" for field: ${fieldName || 'unknown'}`)\r\n      const timeMatch = value.match(/(\\d{1,2}):(\\d{2})/)\r\n      if (timeMatch) {\r\n        const minutes = parseInt(timeMatch[1])\r\n        const seconds = parseInt(timeMatch[2])\r\n        const totalSeconds = (minutes * 60) + seconds\r\n        console.log(`✅ Pace converted: \"${value}\" -> ${totalSeconds} seconds per km`)\r\n        return totalSeconds // Return total seconds per km\r\n      }\r\n      console.error(`❌ Failed to parse pace string: \"${value}\"`)\r\n      return null\r\n    }\r\n    const parsed = parseFloat(value)\r\n    if (isNaN(parsed)) {\r\n      console.warn(`⚠️ Cannot convert to number: \"${value}\" for field: ${fieldName || 'unknown'}`)\r\n      return null\r\n    }\r\n    return parsed\r\n  }\r\n  console.warn(`⚠️ Unexpected value type for ${fieldName || 'unknown'}: ${typeof value}`)\r\n  return null\r\n}\r\n\r\n// Helper for required fields that should default to 0\r\nfunction safeNumberRequired(value: unknown, fallback: number = 0): number {\r\n  const result = safeNumber(value)\r\n  return result !== null ? result : fallback\r\n}\r\n\r\n// Helper for fields that should be integers (rounds decimal values)\r\nfunction safeInteger(value: unknown): number | null {\r\n  const result = safeNumber(value)\r\n  return result !== null ? Math.round(result) : null\r\n}\r\n\r\n// Helper function to calculate computed fields\r\nfunction calculateComputedFields(activity: StravaActivity) {\r\n  const startDate = new Date(activity.start_date_local || activity.start_date)\r\n  \r\n  // Calculate week number (1-52)\r\n  const startOfYear = new Date(startDate.getFullYear(), 0, 1)\r\n  const weekNumber = Math.ceil(((startDate.getTime() - startOfYear.getTime()) / (1000 * 60 * 60 * 24) + startOfYear.getDay() + 1) / 7)\r\n  \r\n  // Calculate average pace in seconds per km\r\n  let averagePace = 0\r\n  if (activity.distance && activity.moving_time && activity.distance > 0) {\r\n    const distanceInKm = activity.distance / 1000\r\n    averagePace = activity.moving_time / distanceInKm // seconds per km\r\n  }\r\n  \r\n  // Calculate elevation per km\r\n  let elevationPerKm = 0\r\n  if (activity.distance && activity.total_elevation_gain && activity.distance > 0) {\r\n    const distanceInKm = activity.distance / 1000\r\n    elevationPerKm = activity.total_elevation_gain / distanceInKm\r\n  }\r\n  \r\n  // Calculate efficiency score (average speed)\r\n  const efficiencyScore = safeNumber(activity.average_speed)\r\n  \r\n  return {\r\n    week_number: weekNumber,\r\n    month_number: startDate.getMonth() + 1, // 1-12\r\n    year_number: startDate.getFullYear(),\r\n    day_of_week: startDate.getDay(), // 0-6 (Sunday = 0)\r\n    average_pace: averagePace,\r\n    elevation_per_km: elevationPerKm,\r\n    efficiency_score: efficiencyScore\r\n  }\r\n}\r\n\r\nexport class StravaActivitySync {\r\n  private supabase = createClient()\r\n\r\n  async syncUserActivities() {\r\n    const startTime = Date.now()\r\n    \r\n    try {\r\n      // For now, return a basic success response\r\n      // This method should be expanded to handle the full sync logic\r\n      return {\r\n        success: true,\r\n        activitiesProcessed: 0,\r\n        newActivities: 0,\r\n        updatedActivities: 0,\r\n        syncDuration: Date.now() - startTime,\r\n        errors: []\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        activitiesProcessed: 0,\r\n        newActivities: 0,\r\n        updatedActivities: 0,\r\n        syncDuration: Date.now() - startTime,\r\n        errors: [error instanceof Error ? error.message : 'Unknown error']\r\n      }\r\n    }\r\n  }\r\n\r\n  async storeActivity(userId: string, activity: StravaActivity) {\r\n    // Debug: Log the raw activity data to see what fields contain pace strings\r\n    console.log('🔍 Raw activity data from Strava:', activity)\r\n    \r\n    // Check for any fields that might contain pace strings\r\n    Object.entries(activity).forEach(([key, value]) => {\r\n      if (typeof value === 'string' && value.includes('/km')) {\r\n        console.warn(`⚠️ Found pace string in field '${key}': \"${value}\"`)\r\n      }\r\n    })\r\n    \r\n    // Create a clean activity object without any pace-related fields that might interfere\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const cleanActivity = { ...activity } as any // Need dynamic property access for field removal\r\n    \r\n    // Remove any pace-related fields from Strava that might contain strings\r\n    const paceFieldsToRemove = ['average_pace', 'best_efforts', 'pace', 'splits_metric', 'splits_standard']\r\n    paceFieldsToRemove.forEach(field => {\r\n      if (field in cleanActivity) {\r\n        console.log(`🧹 Removing potential pace field: ${field}`)\r\n        delete cleanActivity[field]\r\n      }\r\n    })\r\n    \r\n    console.log('🧹 Cleaned activity (removed pace fields):', cleanActivity)\r\n    \r\n    const computedFields = calculateComputedFields(cleanActivity)\r\n    \r\n    // Map to your EXACT database schema - explicitly handle each field\r\n    const activityData = {\r\n      user_id: userId,\r\n      strava_activity_id: activity.id,\r\n      name: activity.name || '',\r\n      sport_type: activity.sport_type || activity.type || '',\r\n      start_date: activity.start_date,\r\n      start_date_local: activity.start_date_local || activity.start_date,\r\n      timezone: activity.timezone || '',\r\n      // Required fields - use safeNumberRequired with 0 fallback\r\n      distance: safeNumberRequired(activity.distance),\r\n      moving_time: safeNumberRequired(activity.moving_time),\r\n      elapsed_time: safeNumberRequired(activity.elapsed_time),\r\n      // Optional fields - use safeNumber with null fallback\r\n      total_elevation_gain: safeNumber(activity.total_elevation_gain),\r\n      average_speed: safeNumber(activity.average_speed),\r\n      max_speed: safeNumber(activity.max_speed),\r\n      average_heartrate: safeInteger(activity.average_heartrate),\r\n      max_heartrate: safeInteger(activity.max_heartrate),\r\n      has_heartrate: Boolean(activity.has_heartrate),\r\n      average_watts: safeInteger(activity.average_watts),\r\n      max_watts: safeInteger(activity.max_watts),\r\n      weighted_average_watts: safeInteger(activity.weighted_average_watts),\r\n      kilojoules: safeInteger(activity.kilojoules),\r\n      has_power: Boolean(activity.device_watts || activity.average_watts),\r\n      trainer: Boolean(activity.trainer),\r\n      commute: Boolean(activity.commute),\r\n      manual: Boolean(activity.manual),\r\n      achievement_count: safeNumberRequired(activity.achievement_count),\r\n      kudos_count: safeNumberRequired(activity.kudos_count),\r\n      comment_count: safeNumberRequired(activity.comment_count),\r\n      // Computed fields - these override any potential pace strings from Strava\r\n      ...computedFields\r\n    }\r\n    \r\n    // Debug: Log the processed activity data\r\n    console.log('🔍 Processed activity data for database:', activityData)\r\n    \r\n    // Check for any remaining pace strings in the processed data\r\n    Object.entries(activityData).forEach(([key, value]) => {\r\n      if (typeof value === 'string' && value.includes('/km')) {\r\n        console.error(`❌ ERROR: Pace string found in processed data field '${key}': \"${value}\"`)\r\n        console.error('This will cause a database error. Filtering out...')\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        delete (activityData as any)[key] // Dynamic property deletion\r\n      }\r\n    })\r\n    \r\n    // Final safety check: ensure all values are valid for database\r\n    const safeActivityData = Object.fromEntries(\r\n      Object.entries(activityData).filter(([key, value]) => {\r\n        // Filter out any string values that contain pace patterns, but allow dates and other valid strings\r\n        if (typeof value === 'string' && (value.includes('/km') || value.includes('/mi'))) {\r\n          console.error(`🚫 Filtering out pace string for ${key}: \"${value}\"`)\r\n          return false\r\n        }\r\n        // Check for pace time patterns (like \"07:04\") but exclude ISO dates and timezone strings\r\n        if (typeof value === 'string' && value.includes(':') && \r\n            !key.includes('date') && !key.includes('timezone') && \r\n            value.match(/^\\d{1,2}:\\d{2}$/)) {\r\n          console.error(`🚫 Filtering out pace time pattern for ${key}: \"${value}\"`)\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n    )\r\n\r\n    console.log('🔒 Final safe activity data for database:', safeActivityData)\r\n    \r\n    // Use the correct unique constraint that exists in your database\r\n    const { data, error } = await this.supabase\r\n      .from('activities')\r\n      .upsert(safeActivityData, { \r\n        onConflict: 'user_id,strava_activity_id', // Use composite constraint to prevent duplicates per user\r\n        ignoreDuplicates: false \r\n      })\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      console.error('Store activity error:', error)\r\n      throw new Error(`Failed to store activity: ${error.message}`)\r\n    }\r\n\r\n    // Determine if this was a new activity or update\r\n    const isNew = data.created_at === data.updated_at\r\n\r\n    // 🎯 AUTOMATIC GOAL PROGRESS UPDATE\r\n    // This connects your activities to your goals automatically!\r\n    try {\r\n      await AutomaticGoalProgress.updateProgressFromActivity(userId, {\r\n        ...safeActivityData,\r\n        strava_activity_id: activity.id, // Ensure we have the original activity ID\r\n        start_date: activity.start_date\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      } as any); // Complex activity data structure - interface would be too complex\r\n      console.log(`🎯 Updated goal progress for activity ${activity.id}`);\r\n    } catch (goalError) {\r\n      console.error('Goal progress update failed (non-critical):', goalError);\r\n      // Don't fail the sync if goal update fails - it's supplementary\r\n    }\r\n\r\n    return {\r\n      data,\r\n      isNew\r\n    }\r\n  }\r\n}\r\n\r\n// Export the function for backward compatibility\r\nexport async function syncActivities(activities: StravaActivity[], userId: string) {\r\n  const syncService = new StravaActivitySync()\r\n  \r\n  const results = []\r\n  for (const activity of activities) {\r\n    try {\r\n      const result = await syncService.storeActivity(userId, activity)\r\n      results.push(result.data)\r\n    } catch (error) {\r\n      console.error(`Failed to sync activity ${activity.id}:`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  return results\r\n} "],"names":["StravaActivitySync","syncActivities","safeNumber","value","fieldName","undefined","isNaN","includes","console","warn","timeMatch","match","minutes","parseInt","seconds","totalSeconds","log","error","parsed","parseFloat","safeNumberRequired","fallback","result","safeInteger","Math","round","calculateComputedFields","activity","startDate","Date","start_date_local","start_date","startOfYear","getFullYear","weekNumber","ceil","getTime","getDay","averagePace","distance","moving_time","distanceInKm","elevationPerKm","total_elevation_gain","efficiencyScore","average_speed","week_number","month_number","getMonth","year_number","day_of_week","average_pace","elevation_per_km","efficiency_score","syncUserActivities","startTime","now","success","activitiesProcessed","newActivities","updatedActivities","syncDuration","errors","Error","message","storeActivity","userId","Object","entries","forEach","key","cleanActivity","paceFieldsToRemove","field","computedFields","activityData","user_id","strava_activity_id","id","name","sport_type","type","timezone","elapsed_time","max_speed","average_heartrate","max_heartrate","has_heartrate","Boolean","average_watts","max_watts","weighted_average_watts","kilojoules","has_power","device_watts","trainer","commute","manual","achievement_count","kudos_count","comment_count","safeActivityData","fromEntries","filter","data","supabase","from","upsert","onConflict","ignoreDuplicates","select","single","isNew","created_at","updated_at","AutomaticGoalProgress","updateProgressFromActivity","goalError","createClient","activities","syncService","results","push"],"mappings":"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"}