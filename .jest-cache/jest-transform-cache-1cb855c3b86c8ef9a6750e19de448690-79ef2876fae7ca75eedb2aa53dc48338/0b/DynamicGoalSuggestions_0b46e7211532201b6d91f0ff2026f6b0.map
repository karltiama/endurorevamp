{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\components\\goals\\DynamicGoalSuggestions.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useCallback, useMemo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { useUserActivities } from '@/hooks/use-user-activities'\nimport { useUserGoals } from '@/hooks/useGoals'\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences'\nimport { formatDistance, formatPace } from '@/lib/utils'\nimport { DynamicGoalEngine, DynamicGoalSuggestion, UserPerformanceProfile } from '@/lib/goals/dynamic-suggestions'\nimport { \n  TrendingUp, \n  Target, \n  Award,\n  Lightbulb,\n  CheckCircle,\n  AlertTriangle,\n  Sparkles\n} from 'lucide-react'\n\ninterface DynamicGoalSuggestionsProps {\n  userId: string\n  onCreateGoal?: (suggestion: DynamicGoalSuggestion) => void\n}\n\nexport function DynamicGoalSuggestions({ userId, onCreateGoal }: DynamicGoalSuggestionsProps) {\n  const { data: activities = [] } = useUserActivities(userId)\n  const { data: goalsData } = useUserGoals()\n  const { preferences } = useUnitPreferences()\n  const activeGoals = useMemo(() => goalsData?.goals || [], [goalsData?.goals])\n  \n  const [profile, setProfile] = useState<UserPerformanceProfile | null>(null)\n  const [suggestions, setSuggestions] = useState<DynamicGoalSuggestion[]>([])\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\n  const [selectedSuggestion, setSelectedSuggestion] = useState<DynamicGoalSuggestion | null>(null)\n\n  const analyzePerformance = useCallback(async () => {\n    setIsAnalyzing(true)\n    \n    try {\n      // Convert database activities to the format expected by DynamicGoalEngine\n      const formattedActivities = activities.map(activity => ({\n        ...activity,\n        start_date: activity.start_date_local,\n        sport_type: activity.sport_type || activity.activity_type || 'Run'\n      }))\n\n      const userProfile = DynamicGoalEngine.analyzeUserPerformance(formattedActivities, activeGoals)\n      const goalSuggestions = DynamicGoalEngine.generateDynamicSuggestions(userProfile, activeGoals)\n      \n      setProfile(userProfile)\n      setSuggestions(goalSuggestions)\n    } catch (error) {\n      console.error('Error analyzing performance:', error)\n    } finally {\n      setIsAnalyzing(false)\n    }\n  }, [activities, activeGoals])\n\n  useEffect(() => {\n    if (activities.length > 0) {\n      analyzePerformance()\n    }\n  }, [activities, activeGoals, analyzePerformance])\n\n  if (isAnalyzing) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center p-8\">\n          <div className=\"text-center space-y-2\">\n            <div className=\"animate-spin h-8 w-8 border-2 border-blue-500 border-t-transparent rounded-full mx-auto\"></div>\n            <p className=\"text-gray-600\">Analyzing your performance patterns...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (!profile || suggestions.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-blue-500\" />\n            Smart Goal Suggestions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 mb-4\">\n              Keep logging activities to get personalized goal suggestions!\n            </p>\n            <Button onClick={analyzePerformance} variant=\"outline\">\n              Analyze My Performance\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Performance Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-blue-500\" />\n            Your Performance Profile\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-blue-600\">\n                {formatDistance(profile.weeklyDistance * 1000, preferences.distance)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Weekly Distance</div>\n              <Badge variant=\"outline\" className=\"mt-1\">\n                {profile.distanceTrend === 'improving' ? 'üìà' : \n                 profile.distanceTrend === 'declining' ? 'üìâ' : '‚û°Ô∏è'} \n                {profile.distanceTrend}\n              </Badge>\n            </div>\n            \n            <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-green-600\">\n                {formatPace(profile.averagePace, preferences.pace)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg Pace</div>\n              <Badge variant=\"outline\" className=\"mt-1\">\n                {profile.paceTrend === 'improving' ? 'üìà' : \n                 profile.paceTrend === 'declining' ? 'üìâ' : '‚û°Ô∏è'} \n                {profile.paceTrend}\n              </Badge>\n            </div>\n            \n            <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-purple-600\">\n                {profile.runFrequency.toFixed(1)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Runs/Week</div>\n              <Badge variant=\"outline\" className=\"mt-1\">\n                {profile.frequencyTrend === 'improving' ? 'üìà' : \n                 profile.frequencyTrend === 'declining' ? 'üìâ' : '‚û°Ô∏è'} \n                {profile.frequencyTrend}\n              </Badge>\n            </div>\n            \n            <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-orange-600\">\n                {profile.consistencyScore}%\n              </div>\n              <div className=\"text-sm text-gray-600\">Consistency</div>\n              <Badge variant={profile.consistencyScore > 70 ? 'default' : 'secondary'} className=\"mt-1\">\n                {profile.runningExperience}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Goal Suggestions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-purple-500\" />\n            Personalized Goal Suggestions\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Based on your performance trends and activity patterns\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"all\" className=\"w-full\">\n            <TabsList>\n              <TabsTrigger value=\"all\">All Suggestions</TabsTrigger>\n              <TabsTrigger value=\"high\">High Priority</TabsTrigger>\n              <TabsTrigger value=\"improvement\">Improvement</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"all\" className=\"space-y-4\">\n              {suggestions.map((suggestion) => (\n                <SuggestionCard \n                  key={suggestion.id}\n                  suggestion={suggestion}\n                  onSelect={setSelectedSuggestion}\n                  onCreateGoal={onCreateGoal}\n                />\n              ))}\n            </TabsContent>\n            \n            <TabsContent value=\"high\" className=\"space-y-4\">\n              {suggestions\n                .filter(s => s.priority === 'high')\n                .map((suggestion) => (\n                  <SuggestionCard \n                    key={suggestion.id}\n                    suggestion={suggestion}\n                    onSelect={setSelectedSuggestion}\n                    onCreateGoal={onCreateGoal}\n                  />\n                ))}\n            </TabsContent>\n            \n            <TabsContent value=\"improvement\" className=\"space-y-4\">\n              {suggestions\n                .filter(s => s.category === 'pace' || s.category === 'distance')\n                .map((suggestion) => (\n                  <SuggestionCard \n                    key={suggestion.id}\n                    suggestion={suggestion}\n                    onSelect={setSelectedSuggestion}\n                    onCreateGoal={onCreateGoal}\n                  />\n                ))}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Detailed View Modal */}\n      {selectedSuggestion && (\n        <SuggestionDetailModal \n          suggestion={selectedSuggestion}\n          onClose={() => setSelectedSuggestion(null)}\n          onCreateGoal={onCreateGoal}\n        />\n      )}\n    </div>\n  )\n}\n\nfunction SuggestionCard({ \n  suggestion, \n  onSelect, \n  onCreateGoal \n}: {\n  suggestion: DynamicGoalSuggestion\n  onSelect: (suggestion: DynamicGoalSuggestion) => void\n  onCreateGoal?: (suggestion: DynamicGoalSuggestion) => void\n}) {\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'border-red-200 bg-red-50'\n      case 'medium': return 'border-yellow-200 bg-yellow-50'\n      case 'low': return 'border-green-200 bg-green-50'\n      default: return 'border-gray-200 bg-gray-50'\n    }\n  }\n\n  return (\n    <div className={`border-2 rounded-lg p-4 transition-all hover:shadow-md ${getPriorityColor(suggestion.priority)}`}>\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <h3 className=\"font-semibold text-lg\">{suggestion.title}</h3>\n            <span className=\"text-lg\">{getDifficultyIcon(suggestion.difficulty)}</span>\n          </div>\n          <p className=\"text-gray-600 text-sm mb-2\">{suggestion.description}</p>\n          <p className=\"text-xs text-gray-500 italic\">{suggestion.reasoning}</p>\n        </div>\n        \n        <div className=\"text-right space-y-1\">\n          <Badge className={`${getPriorityColor(suggestion.priority)} border`}>\n            {suggestion.priority} priority\n          </Badge>\n          <div className=\"text-xs text-gray-500\">{suggestion.timeframe}</div>\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4 text-sm\">\n          <div className=\"flex items-center gap-1\">\n            <Target className=\"h-4 w-4 text-blue-500\" />\n            <span>{suggestion.suggestedTarget} {suggestion.targetUnit}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Award className=\"h-4 w-4 text-purple-500\" />\n            <span>{suggestion.successProbability}% success rate</span>\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => onSelect(suggestion)}>\n            View Details\n          </Button>\n          {onCreateGoal && (\n            <Button size=\"sm\" onClick={() => onCreateGoal(suggestion)}>\n              Create Goal\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SuggestionDetailModal({ \n  suggestion, \n  onClose, \n  onCreateGoal \n}: {\n  suggestion: DynamicGoalSuggestion\n  onClose: () => void\n  onCreateGoal?: (suggestion: DynamicGoalSuggestion) => void\n}) {\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <Card className=\"max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <span className=\"text-2xl\">{getDifficultyIcon(suggestion.difficulty)}</span>\n                {suggestion.title}\n              </CardTitle>\n              <p className=\"text-gray-600 mt-1\">{suggestion.description}</p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>‚úï</Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-blue-50 p-3 rounded\">\n              <div className=\"text-sm text-blue-600\">Target</div>\n              <div className=\"text-lg font-bold text-blue-900\">\n                {suggestion.suggestedTarget} {suggestion.targetUnit}\n              </div>\n            </div>\n            <div className=\"bg-green-50 p-3 rounded\">\n              <div className=\"text-sm text-green-600\">Success Rate</div>\n              <div className=\"text-lg font-bold text-green-900\">\n                {suggestion.successProbability}%\n              </div>\n            </div>\n          </div>\n\n          {/* Reasoning */}\n          <div>\n            <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n              <Lightbulb className=\"h-4 w-4 text-yellow-500\" />\n              Why This Goal?\n            </h4>\n            <p className=\"text-gray-700\">{suggestion.reasoning}</p>\n          </div>\n\n          {/* Benefits */}\n          <div>\n            <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n              Benefits\n            </h4>\n            <ul className=\"space-y-1\">\n              {suggestion.benefits.map((benefit, index) => (\n                <li key={index} className=\"flex items-start gap-2 text-sm\">\n                  <span className=\"text-green-500 mt-1\">‚Ä¢</span>\n                  <span className=\"text-gray-700\">{benefit}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Strategies */}\n          <div>\n            <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n              <Target className=\"h-4 w-4 text-blue-500\" />\n              Strategies\n            </h4>\n            <ul className=\"space-y-1\">\n              {suggestion.strategies.map((strategy, index) => (\n                <li key={index} className=\"flex items-start gap-2 text-sm\">\n                  <span className=\"text-blue-500 mt-1\">‚Ä¢</span>\n                  <span className=\"text-gray-700\">{strategy}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Warnings */}\n          {suggestion.warnings && suggestion.warnings.length > 0 && (\n            <div>\n              <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                Important Notes\n              </h4>\n              <ul className=\"space-y-1\">\n                {suggestion.warnings.map((warning, index) => (\n                  <li key={index} className=\"flex items-start gap-2 text-sm\">\n                    <span className=\"text-orange-500 mt-1\">‚Ä¢</span>\n                    <span className=\"text-gray-700\">{warning}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex gap-3 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n              Maybe Later\n            </Button>\n            {onCreateGoal && (\n              <Button onClick={() => onCreateGoal(suggestion)} className=\"flex-1\">\n                Create This Goal\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nfunction getDifficultyIcon(difficulty: string) {\n  switch (difficulty) {\n    case 'conservative': return 'üõ°Ô∏è'\n    case 'moderate': return 'üéØ'\n    case 'ambitious': return '‚ö°'\n    default: return 'üìà'\n  }\n} "],"names":["DynamicGoalSuggestions","userId","onCreateGoal","data","activities","useUserActivities","goalsData","useUserGoals","preferences","useUnitPreferences","activeGoals","useMemo","goals","profile","setProfile","useState","suggestions","setSuggestions","isAnalyzing","setIsAnalyzing","selectedSuggestion","setSelectedSuggestion","analyzePerformance","useCallback","formattedActivities","map","activity","start_date","start_date_local","sport_type","activity_type","userProfile","DynamicGoalEngine","analyzeUserPerformance","goalSuggestions","generateDynamicSuggestions","error","console","useEffect","length","Card","CardContent","className","div","p","CardHeader","CardTitle","Sparkles","Target","Button","onClick","variant","TrendingUp","formatDistance","weeklyDistance","distance","Badge","distanceTrend","formatPace","averagePace","pace","paceTrend","runFrequency","toFixed","frequencyTrend","consistencyScore","runningExperience","Tabs","defaultValue","TabsList","TabsTrigger","value","TabsContent","suggestion","SuggestionCard","onSelect","id","filter","s","priority","category","SuggestionDetailModal","onClose","getPriorityColor","h3","title","span","getDifficultyIcon","difficulty","description","reasoning","timeframe","suggestedTarget","targetUnit","Award","successProbability","size","h4","Lightbulb","CheckCircle","ul","benefits","benefit","index","li","strategies","strategy","warnings","AlertTriangle","warning"],"mappings":"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"}