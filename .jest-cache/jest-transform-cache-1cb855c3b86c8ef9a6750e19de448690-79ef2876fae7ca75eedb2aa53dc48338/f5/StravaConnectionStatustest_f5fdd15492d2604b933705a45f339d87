bb4e4c1346e736de1d03fb04a8e3d342
"use strict";
// Mock the hooks
jest.mock('next/navigation', ()=>({
        useSearchParams: jest.fn(),
        useRouter: jest.fn(()=>({
                replace: jest.fn()
            }))
    }));
jest.mock('@/providers/AuthProvider', ()=>({
        useAuth: jest.fn(()=>({
                user: {
                    id: 'test-user'
                }
            }))
    }));
jest.mock('@/hooks/strava/useStravaConnection', ()=>({
        useStravaConnection: jest.fn(()=>({
                connectionStatus: {
                    connected: false
                },
                isLoading: false,
                error: null,
                refreshStatus: jest.fn(),
                disconnect: jest.fn()
            })),
        STRAVA_CONNECTION_QUERY_KEY: 'strava-connection'
    }));
jest.mock('@/hooks/use-strava-sync', ()=>({
        useStravaSync: jest.fn(()=>({
                syncData: jest.fn(),
                isLoading: false,
                lastSyncResult: null,
                error: null
            }))
    }));
jest.mock('@/hooks/use-strava-auth', ()=>({
        useStravaAuth: jest.fn(()=>({
                mutate: jest.fn(),
                isPending: false
            }))
    }));
jest.mock('@/hooks/strava/useStravaToken', ()=>({
        useStravaToken: jest.fn(()=>({
                accessToken: null
            })),
        STRAVA_TOKEN_QUERY_KEY: 'strava-token'
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _navigation = require("next/navigation");
const _reactquery = require("@tanstack/react-query");
const _StravaConnectionStatus = require("../../../components/strava/StravaConnectionStatus");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseSearchParams = _navigation.useSearchParams;
describe('StravaConnectionStatus OAuth Callback', ()=>{
    let queryClient;
    beforeEach(()=>{
        queryClient = new _reactquery.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false
                },
                mutations: {
                    retry: false
                }
            }
        });
        jest.clearAllMocks();
    });
    const renderWithQueryClient = (component)=>{
        return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: component
        }));
    };
    it('should handle OAuth callback with authorization code', async ()=>{
        const mockExchangeToken = jest.fn();
        const mockRouter = {
            replace: jest.fn()
        };
        // Mock search params with OAuth code
        mockUseSearchParams.mockReturnValue({
            get: jest.fn((key)=>{
                if (key === 'code') return 'test-oauth-code';
                return null;
            })
        });
        // Mock the hooks
        require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({
            mutate: mockExchangeToken,
            isPending: false
        });
        require('next/navigation').useRouter.mockReturnValue(mockRouter);
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaConnectionStatus.StravaConnectionStatus, {}));
        await (0, _react1.waitFor)(()=>{
            expect(mockExchangeToken).toHaveBeenCalledWith('test-oauth-code', expect.objectContaining({
                onSuccess: expect.any(Function),
                onError: expect.any(Function)
            }));
        });
        // Verify URL cleanup happens immediately
        expect(mockRouter.replace).toHaveBeenCalled();
    });
    it('should handle OAuth error from Strava', async ()=>{
        const mockRouter = {
            replace: jest.fn()
        };
        // Mock search params with OAuth error
        mockUseSearchParams.mockReturnValue({
            get: jest.fn((key)=>{
                if (key === 'error') return 'access_denied';
                if (key === 'error_description') return 'User denied access';
                return null;
            })
        });
        require('next/navigation').useRouter.mockReturnValue(mockRouter);
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaConnectionStatus.StravaConnectionStatus, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/User denied access/)).toBeInTheDocument();
        });
        // Verify URL cleanup
        expect(mockRouter.replace).toHaveBeenCalled();
    });
    it('should not process OAuth code when already connected', ()=>{
        const mockExchangeToken = jest.fn();
        // Mock search params with OAuth code
        mockUseSearchParams.mockReturnValue({
            get: jest.fn((key)=>{
                if (key === 'code') return 'test-oauth-code';
                return null;
            })
        });
        // Mock connection status as already connected
        require('@/hooks/strava/useStravaConnection').useStravaConnection.mockReturnValue({
            connectionStatus: {
                connected: true
            },
            isLoading: false,
            error: null,
            refreshStatus: jest.fn(),
            disconnect: jest.fn()
        });
        require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({
            mutate: mockExchangeToken,
            isPending: false
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaConnectionStatus.StravaConnectionStatus, {}));
        // Should not call exchangeToken when already connected
        expect(mockExchangeToken).not.toHaveBeenCalled();
    });
    it('should not process OAuth code when already in progress', ()=>{
        const mockExchangeToken = jest.fn();
        // Mock search params with OAuth code
        mockUseSearchParams.mockReturnValue({
            get: jest.fn((key)=>{
                if (key === 'code') return 'test-oauth-code';
                return null;
            })
        });
        // Mock auth as in progress
        require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({
            mutate: mockExchangeToken,
            isPending: true
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaConnectionStatus.StravaConnectionStatus, {}));
        // Should not call exchangeToken when already in progress
        expect(mockExchangeToken).not.toHaveBeenCalled();
    });
    it('should invalidate query cache on successful OAuth', async ()=>{
        const mockExchangeToken = jest.fn();
        const invalidateQueriesSpy = jest.spyOn(queryClient, 'invalidateQueries');
        // Mock search params with OAuth code
        mockUseSearchParams.mockReturnValue({
            get: jest.fn((key)=>{
                if (key === 'code') return 'test-oauth-code';
                return null;
            })
        });
        // Make sure connection status is not connected to allow OAuth processing
        require('@/hooks/strava/useStravaConnection').useStravaConnection.mockReturnValue({
            connectionStatus: {
                connected: false
            },
            isLoading: false,
            error: null,
            refreshStatus: jest.fn(),
            disconnect: jest.fn()
        });
        require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({
            mutate: mockExchangeToken,
            isPending: false
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaConnectionStatus.StravaConnectionStatus, {}));
        // Get the onSuccess callback that was passed to exchangeToken
        await (0, _react1.waitFor)(()=>{
            expect(mockExchangeToken).toHaveBeenCalled();
        });
        const onSuccessCallback = mockExchangeToken.mock.calls[0][1].onSuccess;
        // Simulate successful OAuth
        await onSuccessCallback({
            success: true,
            athlete: {
                id: 123
            }
        });
        // Verify cache invalidation
        expect(invalidateQueriesSpy).toHaveBeenCalledWith({
            queryKey: [
                'strava',
                'connection'
            ]
        });
    });
});

//# sourceMappingURL=data:application/json;base64,