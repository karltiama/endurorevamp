{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\strava\\StravaConnectionStatus.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { StravaConnectionStatus } from '@/components/strava/StravaConnectionStatus';\r\n\r\n// Mock the hooks\r\njest.mock('next/navigation', () => ({\r\n  useSearchParams: jest.fn(),\r\n  useRouter: jest.fn(() => ({\r\n    replace: jest.fn(),\r\n  })),\r\n}));\r\n\r\njest.mock('@/providers/AuthProvider', () => ({\r\n  useAuth: jest.fn(() => ({\r\n    user: { id: 'test-user' }\r\n  })),\r\n}));\r\n\r\njest.mock('@/hooks/strava/useStravaConnection', () => ({\r\n  useStravaConnection: jest.fn(() => ({\r\n    connectionStatus: { connected: false },\r\n    isLoading: false,\r\n    error: null,\r\n    refreshStatus: jest.fn(),\r\n    disconnect: jest.fn(),\r\n  })),\r\n  STRAVA_CONNECTION_QUERY_KEY: 'strava-connection',\r\n}));\r\n\r\njest.mock('@/hooks/use-strava-sync', () => ({\r\n  useStravaSync: jest.fn(() => ({\r\n    syncData: jest.fn(),\r\n    isLoading: false,\r\n    lastSyncResult: null,\r\n    error: null,\r\n  })),\r\n}));\r\n\r\njest.mock('@/hooks/use-strava-auth', () => ({\r\n  useStravaAuth: jest.fn(() => ({\r\n    mutate: jest.fn(),\r\n    isPending: false,\r\n  })),\r\n}));\r\n\r\njest.mock('@/hooks/strava/useStravaToken', () => ({\r\n  useStravaToken: jest.fn(() => ({\r\n    accessToken: null,\r\n  })),\r\n  STRAVA_TOKEN_QUERY_KEY: 'strava-token',\r\n}));\r\n\r\nconst mockUseSearchParams = useSearchParams as jest.MockedFunction<typeof useSearchParams>;\r\n\r\ndescribe('StravaConnectionStatus OAuth Callback', () => {\r\n  let queryClient: QueryClient;\r\n\r\n  beforeEach(() => {\r\n    queryClient = new QueryClient({\r\n      defaultOptions: {\r\n        queries: { retry: false },\r\n        mutations: { retry: false },\r\n      },\r\n    });\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  const renderWithQueryClient = (component: React.ReactElement) => {\r\n    return render(\r\n      <QueryClientProvider client={queryClient}>\r\n        {component}\r\n      </QueryClientProvider>\r\n    );\r\n  };\r\n\r\n  it('should handle OAuth callback with authorization code', async () => {\r\n    const mockExchangeToken = jest.fn();\r\n    const mockRouter = { replace: jest.fn() };\r\n    \r\n    // Mock search params with OAuth code\r\n    mockUseSearchParams.mockReturnValue({\r\n      get: jest.fn((key: string) => {\r\n        if (key === 'code') return 'test-oauth-code';\r\n        return null;\r\n      }),\r\n    } as any);\r\n\r\n    // Mock the hooks\r\n    require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({\r\n      mutate: mockExchangeToken,\r\n      isPending: false,\r\n    });\r\n\r\n    require('next/navigation').useRouter.mockReturnValue(mockRouter);\r\n\r\n    renderWithQueryClient(<StravaConnectionStatus />);\r\n\r\n    await waitFor(() => {\r\n      expect(mockExchangeToken).toHaveBeenCalledWith(\r\n        'test-oauth-code',\r\n        expect.objectContaining({\r\n          onSuccess: expect.any(Function),\r\n          onError: expect.any(Function),\r\n        })\r\n      );\r\n    });\r\n\r\n    // Verify URL cleanup happens immediately\r\n    expect(mockRouter.replace).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should handle OAuth error from Strava', async () => {\r\n    const mockRouter = { replace: jest.fn() };\r\n    \r\n    // Mock search params with OAuth error\r\n    mockUseSearchParams.mockReturnValue({\r\n      get: jest.fn((key: string) => {\r\n        if (key === 'error') return 'access_denied';\r\n        if (key === 'error_description') return 'User denied access';\r\n        return null;\r\n      }),\r\n    } as any);\r\n\r\n    require('next/navigation').useRouter.mockReturnValue(mockRouter);\r\n\r\n    renderWithQueryClient(<StravaConnectionStatus />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText(/User denied access/)).toBeInTheDocument();\r\n    });\r\n\r\n    // Verify URL cleanup\r\n    expect(mockRouter.replace).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should not process OAuth code when already connected', () => {\r\n    const mockExchangeToken = jest.fn();\r\n    \r\n    // Mock search params with OAuth code\r\n    mockUseSearchParams.mockReturnValue({\r\n      get: jest.fn((key: string) => {\r\n        if (key === 'code') return 'test-oauth-code';\r\n        return null;\r\n      }),\r\n    } as any);\r\n\r\n    // Mock connection status as already connected\r\n    require('@/hooks/strava/useStravaConnection').useStravaConnection.mockReturnValue({\r\n      connectionStatus: { connected: true },\r\n      isLoading: false,\r\n      error: null,\r\n      refreshStatus: jest.fn(),\r\n      disconnect: jest.fn(),\r\n    });\r\n\r\n    require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({\r\n      mutate: mockExchangeToken,\r\n      isPending: false,\r\n    });\r\n\r\n    renderWithQueryClient(<StravaConnectionStatus />);\r\n\r\n    // Should not call exchangeToken when already connected\r\n    expect(mockExchangeToken).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should not process OAuth code when already in progress', () => {\r\n    const mockExchangeToken = jest.fn();\r\n    \r\n    // Mock search params with OAuth code\r\n    mockUseSearchParams.mockReturnValue({\r\n      get: jest.fn((key: string) => {\r\n        if (key === 'code') return 'test-oauth-code';\r\n        return null;\r\n      }),\r\n    } as any);\r\n\r\n    // Mock auth as in progress\r\n    require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({\r\n      mutate: mockExchangeToken,\r\n      isPending: true,\r\n    });\r\n\r\n    renderWithQueryClient(<StravaConnectionStatus />);\r\n\r\n    // Should not call exchangeToken when already in progress\r\n    expect(mockExchangeToken).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should invalidate query cache on successful OAuth', async () => {\r\n    const mockExchangeToken = jest.fn();\r\n    const invalidateQueriesSpy = jest.spyOn(queryClient, 'invalidateQueries');\r\n    \r\n    // Mock search params with OAuth code\r\n    mockUseSearchParams.mockReturnValue({\r\n      get: jest.fn((key: string) => {\r\n        if (key === 'code') return 'test-oauth-code';\r\n        return null;\r\n      }),\r\n    } as any);\r\n\r\n    // Make sure connection status is not connected to allow OAuth processing\r\n    require('@/hooks/strava/useStravaConnection').useStravaConnection.mockReturnValue({\r\n      connectionStatus: { connected: false },\r\n      isLoading: false,\r\n      error: null,\r\n      refreshStatus: jest.fn(),\r\n      disconnect: jest.fn(),\r\n    });\r\n\r\n    require('@/hooks/use-strava-auth').useStravaAuth.mockReturnValue({\r\n      mutate: mockExchangeToken,\r\n      isPending: false,\r\n    });\r\n\r\n    renderWithQueryClient(<StravaConnectionStatus />);\r\n\r\n    // Get the onSuccess callback that was passed to exchangeToken\r\n    await waitFor(() => {\r\n      expect(mockExchangeToken).toHaveBeenCalled();\r\n    });\r\n\r\n    const onSuccessCallback = mockExchangeToken.mock.calls[0][1].onSuccess;\r\n    \r\n    // Simulate successful OAuth\r\n    await onSuccessCallback({ success: true, athlete: { id: 123 } });\r\n\r\n    // Verify cache invalidation\r\n    expect(invalidateQueriesSpy).toHaveBeenCalledWith({\r\n      queryKey: ['strava', 'connection'],\r\n    });\r\n  });\r\n}); "],"names":["jest","mock","useSearchParams","fn","useRouter","replace","useAuth","user","id","useStravaConnection","connectionStatus","connected","isLoading","error","refreshStatus","disconnect","STRAVA_CONNECTION_QUERY_KEY","useStravaSync","syncData","lastSyncResult","useStravaAuth","mutate","isPending","useStravaToken","accessToken","STRAVA_TOKEN_QUERY_KEY","mockUseSearchParams","describe","queryClient","beforeEach","QueryClient","defaultOptions","queries","retry","mutations","clearAllMocks","renderWithQueryClient","component","render","QueryClientProvider","client","it","mockExchangeToken","mockRouter","mockReturnValue","get","key","require","StravaConnectionStatus","waitFor","expect","toHaveBeenCalledWith","objectContaining","onSuccess","any","Function","onError","toHaveBeenCalled","screen","getByText","toBeInTheDocument","not","invalidateQueriesSpy","spyOn","onSuccessCallback","calls","success","athlete","queryKey"],"mappings":"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"}