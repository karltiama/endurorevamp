287eb3456bb3c204c76b66c6528dbe97
"use strict";
// Mock the getStravaAuthUrl function
jest.mock('@/lib/strava', ()=>({
        getStravaAuthUrl: jest.fn(()=>'https://strava.com/oauth/authorize?client_id=test')
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _StravaReconnectionPrompt = require("../../../components/strava/StravaReconnectionPrompt");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Use the global window.location mock from jest.setup.js
describe('StravaReconnectionPrompt', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Reset location href for each test
        window.location.href = '';
    });
    it('renders with default title when no specific error', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {}));
        expect(_react1.screen.getByText('Strava Connection Issue')).toBeInTheDocument();
        expect(_react1.screen.getByText('Connect to Strava')).toBeInTheDocument();
    });
    it('shows token expired message for 401 errors', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            error: "401 - Token expired"
        }));
        expect(_react1.screen.getByText('Strava Connection Expired')).toBeInTheDocument();
        expect(_react1.screen.getByText('Your Strava connection has expired. This is normal and happens periodically for security reasons.')).toBeInTheDocument();
        expect(_react1.screen.getByText('Reconnect to Strava')).toBeInTheDocument();
    });
    it('shows network error message for network issues', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            error: "Network error - fetch failed"
        }));
        expect(_react1.screen.getByText('Strava Connection Issue')).toBeInTheDocument();
        expect(_react1.screen.getByText('There\'s a temporary connection issue with Strava. This usually resolves itself quickly.')).toBeInTheDocument();
    });
    it('shows refresh button for network errors when onRefresh is provided', ()=>{
        const mockRefresh = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            error: "network error",
            onRefresh: mockRefresh
        }));
        expect(_react1.screen.getByText('Refresh Connection')).toBeInTheDocument();
    });
    it('does not show refresh button for expired tokens', ()=>{
        const mockRefresh = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            error: "401 expired",
            onRefresh: mockRefresh
        }));
        expect(_react1.screen.queryByText('Refresh Connection')).not.toBeInTheDocument();
    });
    it('calls onRefresh when refresh button is clicked', async ()=>{
        const mockRefresh = jest.fn().mockResolvedValueOnce(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            error: "network error",
            onRefresh: mockRefresh
        }));
        const refreshButton = _react1.screen.getByText('Refresh Connection');
        _react1.fireEvent.click(refreshButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockRefresh).toHaveBeenCalledTimes(1);
        });
    });
    it('navigates to Strava OAuth when reconnect button is clicked', ()=>{
        const originalHref = window.location.href;
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {}));
        const reconnectButton = _react1.screen.getByText('Connect to Strava');
        _react1.fireEvent.click(reconnectButton);
        // Note: In a real test environment, you'd mock window.location.href assignment
        expect(_react1.screen.getByText('Connect to Strava')).toBeInTheDocument();
        // Cleanup
        window.location.href = originalHref;
    });
    it('shows error details when provided', ()=>{
        const errorMessage = 'Detailed error message';
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            error: errorMessage
        }));
        expect(_react1.screen.getByText('Error details:')).toBeInTheDocument();
        expect(_react1.screen.getByText(errorMessage)).toBeInTheDocument();
    });
    it('uses custom title when provided', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            title: "Custom Title"
        }));
        expect(_react1.screen.getByText('Custom Title')).toBeInTheDocument();
    });
    it('applies custom className', ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            className: "custom-class"
        }));
        expect(container.firstChild).toHaveClass('custom-class');
    });
    it('handles refresh errors by falling back to reconnect', async ()=>{
        const mockRefresh = jest.fn().mockRejectedValueOnce(new Error('Refresh failed'));
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation(()=>{});
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {
            error: "network error",
            onRefresh: mockRefresh
        }));
        const refreshButton = _react1.screen.getByText('Refresh Connection');
        _react1.fireEvent.click(refreshButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockRefresh).toHaveBeenCalledTimes(1);
            expect(consoleSpy).toHaveBeenCalledWith('Failed to refresh token:', expect.any(Error));
        });
        consoleSpy.mockRestore();
    });
    it('shows benefits list after reconnecting', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_StravaReconnectionPrompt.StravaReconnectionPrompt, {}));
        expect(_react1.screen.getByText('After reconnecting, you\'ll be able to:')).toBeInTheDocument();
        expect(_react1.screen.getByText('• View your recent activity data and analytics')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Sync new activities automatically')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Access detailed performance metrics')).toBeInTheDocument();
        expect(_react1.screen.getByText('• Track your training progress over time')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,