{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\strava\\StravaReconnectionPrompt.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { StravaReconnectionPrompt } from '@/components/strava/StravaReconnectionPrompt';\r\n\r\n// Mock the getStravaAuthUrl function\r\njest.mock('@/lib/strava', () => ({\r\n  getStravaAuthUrl: jest.fn(() => 'https://strava.com/oauth/authorize?client_id=test')\r\n}));\r\n\r\n// Use the global window.location mock from jest.setup.js\r\n\r\ndescribe('StravaReconnectionPrompt', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset location href for each test\r\n    window.location.href = '';\r\n  });\r\n\r\n  it('renders with default title when no specific error', () => {\r\n    render(<StravaReconnectionPrompt />);\r\n    \r\n    expect(screen.getByText('Strava Connection Issue')).toBeInTheDocument();\r\n    expect(screen.getByText('Connect to Strava')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows token expired message for 401 errors', () => {\r\n    render(<StravaReconnectionPrompt error=\"401 - Token expired\" />);\r\n    \r\n    expect(screen.getByText('Strava Connection Expired')).toBeInTheDocument();\r\n    expect(screen.getByText('Your Strava connection has expired. This is normal and happens periodically for security reasons.')).toBeInTheDocument();\r\n    expect(screen.getByText('Reconnect to Strava')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows network error message for network issues', () => {\r\n    render(<StravaReconnectionPrompt error=\"Network error - fetch failed\" />);\r\n    \r\n    expect(screen.getByText('Strava Connection Issue')).toBeInTheDocument();\r\n    expect(screen.getByText('There\\'s a temporary connection issue with Strava. This usually resolves itself quickly.')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows refresh button for network errors when onRefresh is provided', () => {\r\n    const mockRefresh = jest.fn();\r\n    render(<StravaReconnectionPrompt error=\"network error\" onRefresh={mockRefresh} />);\r\n    \r\n    expect(screen.getByText('Refresh Connection')).toBeInTheDocument();\r\n  });\r\n\r\n  it('does not show refresh button for expired tokens', () => {\r\n    const mockRefresh = jest.fn();\r\n    render(<StravaReconnectionPrompt error=\"401 expired\" onRefresh={mockRefresh} />);\r\n    \r\n    expect(screen.queryByText('Refresh Connection')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('calls onRefresh when refresh button is clicked', async () => {\r\n    const mockRefresh = jest.fn().mockResolvedValueOnce(undefined);\r\n    render(<StravaReconnectionPrompt error=\"network error\" onRefresh={mockRefresh} />);\r\n    \r\n    const refreshButton = screen.getByText('Refresh Connection');\r\n    fireEvent.click(refreshButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(mockRefresh).toHaveBeenCalledTimes(1);\r\n    });\r\n  });\r\n\r\n  it('navigates to Strava OAuth when reconnect button is clicked', () => {\r\n    const originalHref = window.location.href;\r\n    \r\n    render(<StravaReconnectionPrompt />);\r\n    \r\n    const reconnectButton = screen.getByText('Connect to Strava');\r\n    fireEvent.click(reconnectButton);\r\n    \r\n    // Note: In a real test environment, you'd mock window.location.href assignment\r\n    expect(screen.getByText('Connect to Strava')).toBeInTheDocument();\r\n    \r\n    // Cleanup\r\n    window.location.href = originalHref;\r\n  });\r\n\r\n  it('shows error details when provided', () => {\r\n    const errorMessage = 'Detailed error message';\r\n    render(<StravaReconnectionPrompt error={errorMessage} />);\r\n    \r\n    expect(screen.getByText('Error details:')).toBeInTheDocument();\r\n    expect(screen.getByText(errorMessage)).toBeInTheDocument();\r\n  });\r\n\r\n  it('uses custom title when provided', () => {\r\n    render(<StravaReconnectionPrompt title=\"Custom Title\" />);\r\n    \r\n    expect(screen.getByText('Custom Title')).toBeInTheDocument();\r\n  });\r\n\r\n  it('applies custom className', () => {\r\n    const { container } = render(<StravaReconnectionPrompt className=\"custom-class\" />);\r\n    \r\n    expect(container.firstChild).toHaveClass('custom-class');\r\n  });\r\n\r\n  it('handles refresh errors by falling back to reconnect', async () => {\r\n    const mockRefresh = jest.fn().mockRejectedValueOnce(new Error('Refresh failed'));\r\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n    \r\n    render(<StravaReconnectionPrompt error=\"network error\" onRefresh={mockRefresh} />);\r\n    \r\n    const refreshButton = screen.getByText('Refresh Connection');\r\n    fireEvent.click(refreshButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(mockRefresh).toHaveBeenCalledTimes(1);\r\n      expect(consoleSpy).toHaveBeenCalledWith('Failed to refresh token:', expect.any(Error));\r\n    });\r\n    \r\n    consoleSpy.mockRestore();\r\n  });\r\n\r\n  it('shows benefits list after reconnecting', () => {\r\n    render(<StravaReconnectionPrompt />);\r\n    \r\n    expect(screen.getByText('After reconnecting, you\\'ll be able to:')).toBeInTheDocument();\r\n    expect(screen.getByText('• View your recent activity data and analytics')).toBeInTheDocument();\r\n    expect(screen.getByText('• Sync new activities automatically')).toBeInTheDocument();\r\n    expect(screen.getByText('• Access detailed performance metrics')).toBeInTheDocument();\r\n    expect(screen.getByText('• Track your training progress over time')).toBeInTheDocument();\r\n  });\r\n}); "],"names":["jest","mock","getStravaAuthUrl","fn","describe","beforeEach","clearAllMocks","window","location","href","it","render","StravaReconnectionPrompt","expect","screen","getByText","toBeInTheDocument","error","mockRefresh","onRefresh","queryByText","not","mockResolvedValueOnce","undefined","refreshButton","fireEvent","click","waitFor","toHaveBeenCalledTimes","originalHref","reconnectButton","errorMessage","title","container","className","firstChild","toHaveClass","mockRejectedValueOnce","Error","consoleSpy","spyOn","console","mockImplementation","toHaveBeenCalledWith","any","mockRestore"],"mappings":"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"}