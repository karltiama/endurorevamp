{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\hooks\\strava\\useStravaToken.test.tsx"],"sourcesContent":["import { renderHook, waitFor } from '@testing-library/react'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { useStravaToken } from '@/hooks/strava/useStravaToken'\r\nimport { useAuth } from '@/providers/AuthProvider'\r\nimport { StravaAuth } from '@/lib/strava/auth'\r\nimport { User } from '@supabase/supabase-js'\r\n\r\n// Mock dependencies\r\njest.mock('@/providers/AuthProvider')\r\njest.mock('@/lib/strava/auth')\r\n\r\nconst mockUseAuth = useAuth as jest.MockedFunction<typeof useAuth>\r\nconst MockStravaAuth = StravaAuth as jest.MockedClass<typeof StravaAuth>\r\n\r\n// Mock user data\r\nconst createMockUser = (id: string): User => ({\r\n  id,\r\n  email: 'test@example.com',\r\n  app_metadata: {},\r\n  user_metadata: {},\r\n  aud: 'authenticated',\r\n  created_at: '2024-01-01T00:00:00Z',\r\n})\r\n\r\n// Test wrapper component\r\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        retry: false,\r\n      },\r\n    },\r\n  })\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n}\r\n\r\ndescribe('useStravaToken', () => {\r\n  const mockGetValidAccessToken = jest.fn()\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n    \r\n    // Setup StravaAuth mock\r\n    MockStravaAuth.mockImplementation(() => ({\r\n      getValidAccessToken: mockGetValidAccessToken,\r\n    } as any))\r\n  })\r\n\r\n  it('returns null when user is not authenticated', async () => {\r\n    mockUseAuth.mockReturnValue({\r\n      user: null,\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      signOut: jest.fn(),\r\n      refreshUser: jest.fn()\r\n    })\r\n\r\n    const { result } = renderHook(() => useStravaToken(), {\r\n      wrapper: TestWrapper,\r\n    })\r\n\r\n    expect(result.current.accessToken).toBeNull()\r\n    expect(result.current.isLoading).toBe(false)\r\n    expect(result.current.error).toBeNull()\r\n  })\r\n\r\n  it('fetches access token when user is authenticated', async () => {\r\n    const mockUser = createMockUser('user-123')\r\n    const mockToken = 'access-token-123'\r\n\r\n    mockUseAuth.mockReturnValue({\r\n      user: mockUser,\r\n      isLoading: false,\r\n      isAuthenticated: true,\r\n      signOut: jest.fn(),\r\n      refreshUser: jest.fn()\r\n    })\r\n    \r\n    mockGetValidAccessToken.mockResolvedValue(mockToken)\r\n\r\n    const { result } = renderHook(() => useStravaToken(), {\r\n      wrapper: TestWrapper,\r\n    })\r\n\r\n    // Initially loading\r\n    expect(result.current.isLoading).toBe(true)\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false)\r\n    })\r\n\r\n    expect(result.current.accessToken).toBe(mockToken)\r\n    expect(result.current.error).toBeNull()\r\n    expect(mockGetValidAccessToken).toHaveBeenCalledWith('user-123')\r\n  })\r\n\r\n  it('handles errors when fetching access token', async () => {\r\n    const mockUser = createMockUser('user-123')\r\n    const error = new Error('Failed to get token')\r\n\r\n    mockUseAuth.mockReturnValue({\r\n      user: mockUser,\r\n      isLoading: false,\r\n      isAuthenticated: true,\r\n      signOut: jest.fn(),\r\n      refreshUser: jest.fn()\r\n    })\r\n    \r\n    mockGetValidAccessToken.mockRejectedValue(error)\r\n\r\n    const { result } = renderHook(() => useStravaToken(), {\r\n      wrapper: TestWrapper,\r\n    })\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false)\r\n    })\r\n\r\n    expect(result.current.accessToken).toBeNull()\r\n    expect(result.current.error).toBe('Failed to get token')\r\n  })\r\n\r\n  it('can refresh token manually', async () => {\r\n    const mockUser = createMockUser('user-123')\r\n    const mockToken = 'new-access-token-123'\r\n\r\n    mockUseAuth.mockReturnValue({\r\n      user: mockUser,\r\n      isLoading: false,\r\n      isAuthenticated: true,\r\n      signOut: jest.fn(),\r\n      refreshUser: jest.fn()\r\n    })\r\n    \r\n    // First call returns null, second call returns token\r\n    mockGetValidAccessToken\r\n      .mockResolvedValueOnce(null)\r\n      .mockResolvedValueOnce(mockToken)\r\n\r\n    const { result } = renderHook(() => useStravaToken(), {\r\n      wrapper: TestWrapper,\r\n    })\r\n\r\n    // Wait for initial load\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false)\r\n    })\r\n\r\n    expect(result.current.accessToken).toBeNull()\r\n\r\n    // Manual refresh\r\n    await result.current.refreshToken()\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.accessToken).toBe(mockToken)\r\n    })\r\n\r\n    expect(mockGetValidAccessToken).toHaveBeenCalledWith('user-123')\r\n    expect(mockGetValidAccessToken.mock.calls.length).toBeGreaterThanOrEqual(2)\r\n  })\r\n\r\n  it('clears token when user changes to null', async () => {\r\n    const mockUser = createMockUser('user-123')\r\n    const mockToken = 'access-token-123'\r\n\r\n    // Initial state with user\r\n    mockUseAuth.mockReturnValue({\r\n      user: mockUser,\r\n      isLoading: false,\r\n      isAuthenticated: true,\r\n      signOut: jest.fn(),\r\n      refreshUser: jest.fn()\r\n    })\r\n    \r\n    mockGetValidAccessToken.mockResolvedValue(mockToken)\r\n\r\n    const { result, rerender } = renderHook(() => useStravaToken(), {\r\n      wrapper: TestWrapper,\r\n    })\r\n\r\n    // Wait for token to be loaded\r\n    await waitFor(() => {\r\n      expect(result.current.accessToken).toBe(mockToken)\r\n    })\r\n\r\n    // Change to no user\r\n    mockUseAuth.mockReturnValue({\r\n      user: null,\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      signOut: jest.fn(),\r\n      refreshUser: jest.fn()\r\n    })\r\n\r\n    rerender()\r\n\r\n    expect(result.current.accessToken).toBeNull()\r\n  })\r\n}) "],"names":["jest","mock","mockUseAuth","useAuth","MockStravaAuth","StravaAuth","createMockUser","id","email","app_metadata","user_metadata","aud","created_at","TestWrapper","children","queryClient","QueryClient","defaultOptions","queries","retry","QueryClientProvider","client","describe","mockGetValidAccessToken","fn","beforeEach","clearAllMocks","mockImplementation","getValidAccessToken","it","mockReturnValue","user","isLoading","isAuthenticated","signOut","refreshUser","result","renderHook","useStravaToken","wrapper","expect","current","accessToken","toBeNull","toBe","error","mockUser","mockToken","mockResolvedValue","waitFor","toHaveBeenCalledWith","Error","mockRejectedValue","mockResolvedValueOnce","refreshToken","calls","length","toBeGreaterThanOrEqual","rerender"],"mappings":";AAOA,oBAAoB;AACpBA,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;;;;;uBAT0B;4BACa;gCAClB;8BACP;sBACG;AAO3B,MAAMC,cAAcC,qBAAO;AAC3B,MAAMC,iBAAiBC,gBAAU;AAEjC,iBAAiB;AACjB,MAAMC,iBAAiB,CAACC,KAAsB,CAAA;QAC5CA;QACAC,OAAO;QACPC,cAAc,CAAC;QACfC,eAAe,CAAC;QAChBC,KAAK;QACLC,YAAY;IACd,CAAA;AAEA,yBAAyB;AACzB,MAAMC,cAAc,CAAC,EAAEC,QAAQ,EAAiC;IAC9D,MAAMC,cAAc,IAAIC,uBAAW,CAAC;QAClCC,gBAAgB;YACdC,SAAS;gBACPC,OAAO;YACT;QACF;IACF;IACA,qBACE,qBAACC,+BAAmB;QAACC,QAAQN;kBAC1BD;;AAGP;AAEAQ,SAAS,kBAAkB;IACzB,MAAMC,0BAA0BvB,KAAKwB,EAAE;IAEvCC,WAAW;QACTzB,KAAK0B,aAAa;QAElB,wBAAwB;QACxBtB,eAAeuB,kBAAkB,CAAC,IAAO,CAAA;gBACvCC,qBAAqBL;YACvB,CAAA;IACF;IAEAM,GAAG,+CAA+C;QAChD3B,YAAY4B,eAAe,CAAC;YAC1BC,MAAM;YACNC,WAAW;YACXC,iBAAiB;YACjBC,SAASlC,KAAKwB,EAAE;YAChBW,aAAanC,KAAKwB,EAAE;QACtB;QAEA,MAAM,EAAEY,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,8BAAc,KAAI;YACpDC,SAAS1B;QACX;QAEA2B,OAAOJ,OAAOK,OAAO,CAACC,WAAW,EAAEC,QAAQ;QAC3CH,OAAOJ,OAAOK,OAAO,CAACT,SAAS,EAAEY,IAAI,CAAC;QACtCJ,OAAOJ,OAAOK,OAAO,CAACI,KAAK,EAAEF,QAAQ;IACvC;IAEAd,GAAG,mDAAmD;QACpD,MAAMiB,WAAWxC,eAAe;QAChC,MAAMyC,YAAY;QAElB7C,YAAY4B,eAAe,CAAC;YAC1BC,MAAMe;YACNd,WAAW;YACXC,iBAAiB;YACjBC,SAASlC,KAAKwB,EAAE;YAChBW,aAAanC,KAAKwB,EAAE;QACtB;QAEAD,wBAAwByB,iBAAiB,CAACD;QAE1C,MAAM,EAAEX,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,8BAAc,KAAI;YACpDC,SAAS1B;QACX;QAEA,oBAAoB;QACpB2B,OAAOJ,OAAOK,OAAO,CAACT,SAAS,EAAEY,IAAI,CAAC;QAEtC,MAAMK,IAAAA,cAAO,EAAC;YACZT,OAAOJ,OAAOK,OAAO,CAACT,SAAS,EAAEY,IAAI,CAAC;QACxC;QAEAJ,OAAOJ,OAAOK,OAAO,CAACC,WAAW,EAAEE,IAAI,CAACG;QACxCP,OAAOJ,OAAOK,OAAO,CAACI,KAAK,EAAEF,QAAQ;QACrCH,OAAOjB,yBAAyB2B,oBAAoB,CAAC;IACvD;IAEArB,GAAG,6CAA6C;QAC9C,MAAMiB,WAAWxC,eAAe;QAChC,MAAMuC,QAAQ,IAAIM,MAAM;QAExBjD,YAAY4B,eAAe,CAAC;YAC1BC,MAAMe;YACNd,WAAW;YACXC,iBAAiB;YACjBC,SAASlC,KAAKwB,EAAE;YAChBW,aAAanC,KAAKwB,EAAE;QACtB;QAEAD,wBAAwB6B,iBAAiB,CAACP;QAE1C,MAAM,EAAET,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,8BAAc,KAAI;YACpDC,SAAS1B;QACX;QAEA,MAAMoC,IAAAA,cAAO,EAAC;YACZT,OAAOJ,OAAOK,OAAO,CAACT,SAAS,EAAEY,IAAI,CAAC;QACxC;QAEAJ,OAAOJ,OAAOK,OAAO,CAACC,WAAW,EAAEC,QAAQ;QAC3CH,OAAOJ,OAAOK,OAAO,CAACI,KAAK,EAAED,IAAI,CAAC;IACpC;IAEAf,GAAG,8BAA8B;QAC/B,MAAMiB,WAAWxC,eAAe;QAChC,MAAMyC,YAAY;QAElB7C,YAAY4B,eAAe,CAAC;YAC1BC,MAAMe;YACNd,WAAW;YACXC,iBAAiB;YACjBC,SAASlC,KAAKwB,EAAE;YAChBW,aAAanC,KAAKwB,EAAE;QACtB;QAEA,qDAAqD;QACrDD,wBACG8B,qBAAqB,CAAC,MACtBA,qBAAqB,CAACN;QAEzB,MAAM,EAAEX,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,8BAAc,KAAI;YACpDC,SAAS1B;QACX;QAEA,wBAAwB;QACxB,MAAMoC,IAAAA,cAAO,EAAC;YACZT,OAAOJ,OAAOK,OAAO,CAACT,SAAS,EAAEY,IAAI,CAAC;QACxC;QAEAJ,OAAOJ,OAAOK,OAAO,CAACC,WAAW,EAAEC,QAAQ;QAE3C,iBAAiB;QACjB,MAAMP,OAAOK,OAAO,CAACa,YAAY;QAEjC,MAAML,IAAAA,cAAO,EAAC;YACZT,OAAOJ,OAAOK,OAAO,CAACC,WAAW,EAAEE,IAAI,CAACG;QAC1C;QAEAP,OAAOjB,yBAAyB2B,oBAAoB,CAAC;QACrDV,OAAOjB,wBAAwBtB,IAAI,CAACsD,KAAK,CAACC,MAAM,EAAEC,sBAAsB,CAAC;IAC3E;IAEA5B,GAAG,0CAA0C;QAC3C,MAAMiB,WAAWxC,eAAe;QAChC,MAAMyC,YAAY;QAElB,0BAA0B;QAC1B7C,YAAY4B,eAAe,CAAC;YAC1BC,MAAMe;YACNd,WAAW;YACXC,iBAAiB;YACjBC,SAASlC,KAAKwB,EAAE;YAChBW,aAAanC,KAAKwB,EAAE;QACtB;QAEAD,wBAAwByB,iBAAiB,CAACD;QAE1C,MAAM,EAAEX,MAAM,EAAEsB,QAAQ,EAAE,GAAGrB,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,8BAAc,KAAI;YAC9DC,SAAS1B;QACX;QAEA,8BAA8B;QAC9B,MAAMoC,IAAAA,cAAO,EAAC;YACZT,OAAOJ,OAAOK,OAAO,CAACC,WAAW,EAAEE,IAAI,CAACG;QAC1C;QAEA,oBAAoB;QACpB7C,YAAY4B,eAAe,CAAC;YAC1BC,MAAM;YACNC,WAAW;YACXC,iBAAiB;YACjBC,SAASlC,KAAKwB,EAAE;YAChBW,aAAanC,KAAKwB,EAAE;QACtB;QAEAkC;QAEAlB,OAAOJ,OAAOK,OAAO,CAACC,WAAW,EAAEC,QAAQ;IAC7C;AACF"}