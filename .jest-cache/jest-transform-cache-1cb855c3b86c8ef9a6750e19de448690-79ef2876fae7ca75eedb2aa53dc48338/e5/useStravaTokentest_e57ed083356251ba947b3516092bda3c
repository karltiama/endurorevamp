36cefd522b9fec2b8788a2c7395b3b3e
"use strict";
// Mock dependencies
jest.mock('@/providers/AuthProvider');
jest.mock('@/lib/strava/auth');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _useStravaToken = require("../../../hooks/strava/useStravaToken");
const _AuthProvider = require("../../../providers/AuthProvider");
const _auth = require("../../../lib/strava/auth");
const mockUseAuth = _AuthProvider.useAuth;
const MockStravaAuth = _auth.StravaAuth;
// Mock user data
const createMockUser = (id)=>({
        id,
        email: 'test@example.com',
        app_metadata: {},
        user_metadata: {},
        aud: 'authenticated',
        created_at: '2024-01-01T00:00:00Z'
    });
// Test wrapper component
const TestWrapper = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
describe('useStravaToken', ()=>{
    const mockGetValidAccessToken = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup StravaAuth mock
        MockStravaAuth.mockImplementation(()=>({
                getValidAccessToken: mockGetValidAccessToken
            }));
    });
    it('returns null when user is not authenticated', async ()=>{
        mockUseAuth.mockReturnValue({
            user: null,
            isLoading: false,
            isAuthenticated: false,
            signOut: jest.fn(),
            refreshUser: jest.fn()
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useStravaToken.useStravaToken)(), {
            wrapper: TestWrapper
        });
        expect(result.current.accessToken).toBeNull();
        expect(result.current.isLoading).toBe(false);
        expect(result.current.error).toBeNull();
    });
    it('fetches access token when user is authenticated', async ()=>{
        const mockUser = createMockUser('user-123');
        const mockToken = 'access-token-123';
        mockUseAuth.mockReturnValue({
            user: mockUser,
            isLoading: false,
            isAuthenticated: true,
            signOut: jest.fn(),
            refreshUser: jest.fn()
        });
        mockGetValidAccessToken.mockResolvedValue(mockToken);
        const { result } = (0, _react.renderHook)(()=>(0, _useStravaToken.useStravaToken)(), {
            wrapper: TestWrapper
        });
        // Initially loading
        expect(result.current.isLoading).toBe(true);
        await (0, _react.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.accessToken).toBe(mockToken);
        expect(result.current.error).toBeNull();
        expect(mockGetValidAccessToken).toHaveBeenCalledWith('user-123');
    });
    it('handles errors when fetching access token', async ()=>{
        const mockUser = createMockUser('user-123');
        const error = new Error('Failed to get token');
        mockUseAuth.mockReturnValue({
            user: mockUser,
            isLoading: false,
            isAuthenticated: true,
            signOut: jest.fn(),
            refreshUser: jest.fn()
        });
        mockGetValidAccessToken.mockRejectedValue(error);
        const { result } = (0, _react.renderHook)(()=>(0, _useStravaToken.useStravaToken)(), {
            wrapper: TestWrapper
        });
        await (0, _react.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.accessToken).toBeNull();
        expect(result.current.error).toBe('Failed to get token');
    });
    it('can refresh token manually', async ()=>{
        const mockUser = createMockUser('user-123');
        const mockToken = 'new-access-token-123';
        mockUseAuth.mockReturnValue({
            user: mockUser,
            isLoading: false,
            isAuthenticated: true,
            signOut: jest.fn(),
            refreshUser: jest.fn()
        });
        // First call returns null, second call returns token
        mockGetValidAccessToken.mockResolvedValueOnce(null).mockResolvedValueOnce(mockToken);
        const { result } = (0, _react.renderHook)(()=>(0, _useStravaToken.useStravaToken)(), {
            wrapper: TestWrapper
        });
        // Wait for initial load
        await (0, _react.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.accessToken).toBeNull();
        // Manual refresh
        await result.current.refreshToken();
        await (0, _react.waitFor)(()=>{
            expect(result.current.accessToken).toBe(mockToken);
        });
        expect(mockGetValidAccessToken).toHaveBeenCalledWith('user-123');
        expect(mockGetValidAccessToken.mock.calls.length).toBeGreaterThanOrEqual(2);
    });
    it('clears token when user changes to null', async ()=>{
        const mockUser = createMockUser('user-123');
        const mockToken = 'access-token-123';
        // Initial state with user
        mockUseAuth.mockReturnValue({
            user: mockUser,
            isLoading: false,
            isAuthenticated: true,
            signOut: jest.fn(),
            refreshUser: jest.fn()
        });
        mockGetValidAccessToken.mockResolvedValue(mockToken);
        const { result, rerender } = (0, _react.renderHook)(()=>(0, _useStravaToken.useStravaToken)(), {
            wrapper: TestWrapper
        });
        // Wait for token to be loaded
        await (0, _react.waitFor)(()=>{
            expect(result.current.accessToken).toBe(mockToken);
        });
        // Change to no user
        mockUseAuth.mockReturnValue({
            user: null,
            isLoading: false,
            isAuthenticated: false,
            signOut: jest.fn(),
            refreshUser: jest.fn()
        });
        rerender();
        expect(result.current.accessToken).toBeNull();
    });
});

//# sourceMappingURL=data:application/json;base64,