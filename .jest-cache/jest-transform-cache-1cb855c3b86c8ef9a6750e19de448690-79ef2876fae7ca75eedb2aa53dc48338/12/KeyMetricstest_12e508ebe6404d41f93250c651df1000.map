{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\dashboard\\KeyMetrics.test.tsx"],"sourcesContent":["import React from 'react'\r\nimport { render, screen } from '@testing-library/react'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { KeyMetrics } from '@/components/dashboard/KeyMetrics'\r\nimport { calculateWeeklyDistance, calculateActivityStreak, getLastActivity } from '@/lib/dashboard/metrics'\r\nimport type { Activity } from '@/lib/strava/types'\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/use-user-activities', () => ({\r\n  useUserActivities: jest.fn(),\r\n}))\r\n\r\njest.mock('@/hooks/useGoals', () => ({\r\n  useUserGoals: jest.fn(),\r\n  useUpdateGoal: jest.fn(),\r\n  useGoalTypes: jest.fn(),\r\n  useCreateGoal: jest.fn(),\r\n}))\r\n\r\nconst { useUserActivities } = require('@/hooks/use-user-activities')\r\nconst { useUserGoals, useUpdateGoal, useGoalTypes, useCreateGoal } = require('@/hooks/useGoals')\r\n\r\n// Helper to create a test QueryClient\r\nconst createTestQueryClient = () => new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      retry: false,\r\n    },\r\n  },\r\n})\r\n\r\n// Sample activity data for testing\r\nconst createMockActivity = (overrides: Partial<Activity> = {}): Activity => ({\r\n  id: '1',\r\n  user_id: 'user-1',\r\n  strava_activity_id: 12345,\r\n  name: 'Morning Run',\r\n  sport_type: 'Run',\r\n  distance: 5000, // 5 km\r\n  moving_time: 1800, // 30 minutes\r\n  elapsed_time: 1800,\r\n  total_elevation_gain: 100,\r\n  start_date: new Date().toISOString(),\r\n  start_date_local: new Date().toISOString(),\r\n  timezone: 'UTC',\r\n  created_at: new Date().toISOString(),\r\n  ...overrides,\r\n})\r\n\r\ndescribe('KeyMetrics Component', () => {\r\n  let queryClient: QueryClient\r\n\r\n  beforeEach(() => {\r\n    queryClient = createTestQueryClient()\r\n    jest.clearAllMocks()\r\n    \r\n    // Setup default mocks for goal-related hooks\r\n    useUpdateGoal.mockReturnValue({\r\n      mutate: jest.fn(),\r\n      mutateAsync: jest.fn(),\r\n      isLoading: false,\r\n    })\r\n    \r\n    useGoalTypes.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n    })\r\n    \r\n    useCreateGoal.mockReturnValue({\r\n      mutate: jest.fn(),\r\n      mutateAsync: jest.fn(),\r\n      isLoading: false,\r\n    })\r\n  })\r\n\r\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n\r\n  it('shows loading skeleton when data is loading', () => {\r\n    useUserActivities.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: true,\r\n      error: null,\r\n    })\r\n\r\n    useUserGoals.mockReturnValue({\r\n      data: undefined,\r\n      isLoading: true,\r\n      error: null,\r\n    })\r\n\r\n    render(<KeyMetrics userId=\"user-1\" />, { wrapper })\r\n\r\n    // Should show skeleton with multiple cards\r\n    const skeletonCards = screen.getAllByText((_, element) => {\r\n      return element?.classList.contains('animate-pulse') || false\r\n    })\r\n    expect(skeletonCards.length).toBeGreaterThan(0)\r\n  })\r\n\r\n  it('shows setup message when no dashboard goals exist', () => {\r\n    useUserActivities.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n    })\r\n\r\n    useUserGoals.mockReturnValue({\r\n      data: { goals: [] },\r\n      isLoading: false,\r\n      error: null,\r\n    })\r\n\r\n    render(<KeyMetrics userId=\"user-1\" />, { wrapper })\r\n\r\n    expect(screen.getByText('Set Up Your Dashboard Goals')).toBeInTheDocument()\r\n    expect(screen.getByText('Choose up to 3 goals to track as key metrics on your dashboard.')).toBeInTheDocument()\r\n  })\r\n\r\n  it('displays goal metric cards when dashboard goals exist', () => {\r\n    const mockActivities = [\r\n      createMockActivity({\r\n        name: 'Recent Run',\r\n        distance: 10000,\r\n        start_date: new Date().toISOString(),\r\n      }),\r\n    ]\r\n\r\n    const mockGoals = [\r\n      {\r\n        id: 'goal-1',\r\n        goal_type: { display_name: 'Weekly Distance Goal', category: 'distance' },\r\n        target_value: 50,\r\n        current_progress: 25,\r\n        goal_data: { show_on_dashboard: true, dashboard_priority: 1 },\r\n        is_active: true,\r\n      },\r\n      {\r\n        id: 'goal-2',\r\n        goal_type: { display_name: 'Monthly Frequency Goal', category: 'frequency' },\r\n        target_value: 20,\r\n        current_progress: 12,\r\n        goal_data: { show_on_dashboard: true, dashboard_priority: 2 },\r\n        is_active: true,\r\n      },\r\n    ]\r\n\r\n    useUserActivities.mockReturnValue({\r\n      data: mockActivities,\r\n      isLoading: false,\r\n      error: null,\r\n    })\r\n\r\n    useUserGoals.mockReturnValue({\r\n      data: { goals: mockGoals },\r\n      isLoading: false,\r\n      error: null,\r\n    })\r\n\r\n    render(<KeyMetrics userId=\"user-1\" />, { wrapper })\r\n\r\n    // Should show the goal metric cards\r\n    expect(screen.getByText('Weekly Distance Goal')).toBeInTheDocument()\r\n    expect(screen.getByText('Monthly Frequency Goal')).toBeInTheDocument()\r\n    expect(screen.getByText('Key Metrics')).toBeInTheDocument()\r\n  })\r\n})\r\n\r\ndescribe('Dashboard Metrics Utilities', () => {\r\n  describe('calculateWeeklyDistance', () => {\r\n    it('calculates weekly distance correctly', () => {\r\n      const now = new Date()\r\n      const thisWeek = new Date(now)\r\n      thisWeek.setDate(now.getDate() - now.getDay() + 1) // This week (Monday)\r\n      \r\n      const lastWeek = new Date(thisWeek)\r\n      lastWeek.setDate(thisWeek.getDate() - 7)\r\n\r\n      const activities = [\r\n        createMockActivity({ \r\n          distance: 5000, \r\n          start_date: thisWeek.toISOString() \r\n        }),\r\n        createMockActivity({ \r\n          distance: 10000, \r\n          start_date: lastWeek.toISOString() \r\n        }),\r\n      ]\r\n\r\n      const result = calculateWeeklyDistance(activities)\r\n\r\n      expect(result.current).toBe(5000)\r\n      expect(result.previous).toBe(10000)\r\n      expect(result.change).toBe(-50) // 50% decrease\r\n    })\r\n\r\n    it('handles no previous week data', () => {\r\n      const thisWeek = new Date()\r\n      const activities = [\r\n        createMockActivity({ \r\n          distance: 5000, \r\n          start_date: thisWeek.toISOString() \r\n        })\r\n      ]\r\n\r\n      const result = calculateWeeklyDistance(activities)\r\n\r\n      expect(result.current).toBe(5000)\r\n      expect(result.previous).toBe(0)\r\n      expect(result.change).toBe(100)\r\n    })\r\n\r\n    it('handles empty activities', () => {\r\n      const result = calculateWeeklyDistance([])\r\n\r\n      expect(result.current).toBe(0)\r\n      expect(result.previous).toBe(0)\r\n      expect(result.change).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe('calculateActivityStreak', () => {\r\n    it('calculates current streak correctly', () => {\r\n      const today = new Date()\r\n      const yesterday = new Date(today)\r\n      yesterday.setDate(today.getDate() - 1)\r\n      const twoDaysAgo = new Date(today)\r\n      twoDaysAgo.setDate(today.getDate() - 2)\r\n\r\n      const activities = [\r\n        createMockActivity({ start_date: today.toISOString() }),\r\n        createMockActivity({ start_date: yesterday.toISOString() }),\r\n        createMockActivity({ start_date: twoDaysAgo.toISOString() }),\r\n      ]\r\n\r\n      const result = calculateActivityStreak(activities)\r\n\r\n      expect(result.current).toBe(3)\r\n      expect(result.longest).toBe(3)\r\n    })\r\n\r\n    it('handles broken streak', () => {\r\n      const today = new Date()\r\n      const threeDaysAgo = new Date(today)\r\n      threeDaysAgo.setDate(today.getDate() - 3)\r\n\r\n      const activities = [\r\n        createMockActivity({ start_date: today.toISOString() }),\r\n        createMockActivity({ start_date: threeDaysAgo.toISOString() }),\r\n      ]\r\n\r\n      const result = calculateActivityStreak(activities)\r\n\r\n      expect(result.current).toBe(1) // Only today counts for current streak\r\n    })\r\n\r\n    it('calculates consistency percentage', () => {\r\n      const activities = Array.from({ length: 15 }, (_, i) => {\r\n        const date = new Date()\r\n        date.setDate(date.getDate() - i)\r\n        return createMockActivity({ start_date: date.toISOString() })\r\n      })\r\n\r\n      const result = calculateActivityStreak(activities)\r\n\r\n      expect(result.consistency).toBe(50) // 15 days out of 30 = 50%\r\n    })\r\n\r\n    it('handles empty activities', () => {\r\n      const result = calculateActivityStreak([])\r\n\r\n      expect(result.current).toBe(0)\r\n      expect(result.longest).toBe(0)\r\n      expect(result.consistency).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe('getLastActivity', () => {\r\n    it('returns the most recent activity', () => {\r\n      const older = createMockActivity({ \r\n        id: '1', \r\n        name: 'Older Activity',\r\n        start_date: new Date('2024-01-01').toISOString()\r\n      })\r\n      const newer = createMockActivity({ \r\n        id: '2', \r\n        name: 'Newer Activity',\r\n        start_date: new Date('2024-01-02').toISOString()\r\n      })\r\n\r\n      // Activities should be passed in descending order (newest first)\r\n      const result = getLastActivity([newer, older])\r\n\r\n      expect(result?.name).toBe('Newer Activity')\r\n    })\r\n\r\n    it('returns null for empty activities', () => {\r\n      const result = getLastActivity([])\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n  })\r\n}) "],"names":["jest","mock","useUserActivities","fn","useUserGoals","useUpdateGoal","useGoalTypes","useCreateGoal","require","createTestQueryClient","QueryClient","defaultOptions","queries","retry","createMockActivity","overrides","id","user_id","strava_activity_id","name","sport_type","distance","moving_time","elapsed_time","total_elevation_gain","start_date","Date","toISOString","start_date_local","timezone","created_at","describe","queryClient","beforeEach","clearAllMocks","mockReturnValue","mutate","mutateAsync","isLoading","data","error","wrapper","children","QueryClientProvider","client","it","undefined","render","KeyMetrics","userId","skeletonCards","screen","getAllByText","_","element","classList","contains","expect","length","toBeGreaterThan","goals","getByText","toBeInTheDocument","mockActivities","mockGoals","goal_type","display_name","category","target_value","current_progress","goal_data","show_on_dashboard","dashboard_priority","is_active","now","thisWeek","setDate","getDate","getDay","lastWeek","activities","result","calculateWeeklyDistance","current","toBe","previous","change","today","yesterday","twoDaysAgo","calculateActivityStreak","longest","threeDaysAgo","Array","from","i","date","consistency","older","newer","getLastActivity","toBeNull"],"mappings":"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"}