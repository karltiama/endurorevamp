d62aab6b7c156ddd6eaac60530a54fbf
"use strict";
// Mock the hooks
jest.mock('@/hooks/use-user-activities');
jest.mock('@/hooks/useGoals');
jest.mock('@/hooks/useUnitPreferences');
jest.mock('@/lib/goals/dynamic-suggestions', ()=>({
        DynamicGoalEngine: {
            analyzeUserPerformance: jest.fn(),
            generateDynamicSuggestions: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _DynamicGoalSuggestions = require("../../../components/goals/DynamicGoalSuggestions");
const _useuseractivities = require("../../../hooks/use-user-activities");
const _useGoals = require("../../../hooks/useGoals");
const _useUnitPreferences = require("../../../hooks/useUnitPreferences");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseUserActivities = _useuseractivities.useUserActivities;
const mockUseUserGoals = _useGoals.useUserGoals;
const mockUseUnitPreferences = _useUnitPreferences.useUnitPreferences;
// Get the mocked functions from the module
const { DynamicGoalEngine } = require('@/lib/goals/dynamic-suggestions');
const mockAnalyzeUserPerformance = DynamicGoalEngine.analyzeUserPerformance;
const mockGenerateDynamicSuggestions = DynamicGoalEngine.generateDynamicSuggestions;
describe('DynamicGoalSuggestions Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockUseUserActivities.mockReturnValue({
            data: [
                {
                    id: 1,
                    name: 'Morning Run',
                    sport_type: 'Run',
                    distance: 5000,
                    moving_time: 1500,
                    start_date_local: '2024-01-01T08:00:00Z',
                    activity_type: 'Run'
                }
            ],
            isLoading: false,
            error: null
        });
        mockUseUserGoals.mockReturnValue({
            data: {
                goals: [],
                onboarding: null
            },
            isLoading: false,
            error: null
        });
    });
    it('displays performance profile with kilometers when set to km', async ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockProfile = {
            weeklyDistance: 25,
            monthlyDistance: 100,
            averagePace: 300,
            runFrequency: 4,
            longestRun: 15,
            averageHeartRate: 150,
            distanceTrend: 'improving',
            paceTrend: 'stable',
            frequencyTrend: 'improving',
            preferredSportTypes: [
                'Run'
            ],
            preferredDays: [
                1,
                3,
                5
            ],
            averageActivityDuration: 45,
            goalCompletionRate: 80,
            consistencyScore: 75,
            totalActivities: 50,
            runningExperience: 'intermediate',
            hasRecentInjuries: false
        };
        mockAnalyzeUserPerformance.mockReturnValue(mockProfile);
        mockGenerateDynamicSuggestions.mockReturnValue([
            {
                id: 'test-suggestion-1',
                title: 'Test Suggestion',
                description: 'Test description',
                priority: 'medium',
                difficulty: 'moderate',
                category: 'distance',
                targetValue: 30,
                targetUnit: 'km',
                timeframe: 'weekly',
                confidence: 0.8,
                reasoning: 'Test reasoning'
            }
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DynamicGoalSuggestions.DynamicGoalSuggestions, {
            userId: "user-1"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('25.0 km')).toBeInTheDocument();
            expect(_react1.screen.getByText('5:00/km')).toBeInTheDocument();
        });
    });
    it('displays performance profile with miles when set to miles', async ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'miles',
                pace: 'min/mile'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockProfile = {
            weeklyDistance: 25,
            monthlyDistance: 100,
            averagePace: 300,
            runFrequency: 4,
            longestRun: 15,
            averageHeartRate: 150,
            distanceTrend: 'improving',
            paceTrend: 'stable',
            frequencyTrend: 'improving',
            preferredSportTypes: [
                'Run'
            ],
            preferredDays: [
                1,
                3,
                5
            ],
            averageActivityDuration: 45,
            goalCompletionRate: 80,
            consistencyScore: 75,
            totalActivities: 50,
            runningExperience: 'intermediate',
            hasRecentInjuries: false
        };
        mockAnalyzeUserPerformance.mockReturnValue(mockProfile);
        mockGenerateDynamicSuggestions.mockReturnValue([
            {
                id: 'test-suggestion-1',
                title: 'Test Suggestion',
                description: 'Test description',
                priority: 'medium',
                difficulty: 'moderate',
                category: 'distance',
                targetValue: 30,
                targetUnit: 'miles',
                timeframe: 'weekly',
                confidence: 0.8,
                reasoning: 'Test reasoning'
            }
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DynamicGoalSuggestions.DynamicGoalSuggestions, {
            userId: "user-1"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('15.5 mi')).toBeInTheDocument();
            expect(_react1.screen.getByText('8:02/mi')).toBeInTheDocument();
        });
    });
    it('shows loading state initially', ()=>{
        mockUseUserActivities.mockReturnValue({
            data: [],
            isLoading: true,
            error: null
        });
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DynamicGoalSuggestions.DynamicGoalSuggestions, {
            userId: "user-1"
        }));
        // When activities are loading and there are no activities, show empty state
        expect(_react1.screen.getByText('Keep logging activities to get personalized goal suggestions!')).toBeInTheDocument();
    });
    it('shows no data message when no activities available', async ()=>{
        mockUseUserActivities.mockReturnValue({
            data: [],
            isLoading: false,
            error: null
        });
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        mockAnalyzeUserPerformance.mockReturnValue(null);
        mockGenerateDynamicSuggestions.mockReturnValue([]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DynamicGoalSuggestions.DynamicGoalSuggestions, {
            userId: "user-1"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Keep logging activities to get personalized goal suggestions!')).toBeInTheDocument();
        });
    });
    it('displays goal suggestions when available', async ()=>{
        mockUseUnitPreferences.mockReturnValue({
            preferences: {
                distance: 'km',
                pace: 'min/km'
            },
            isLoading: false,
            updatePreferences: jest.fn(),
            setDistanceUnit: jest.fn(),
            toggleUnits: jest.fn()
        });
        const mockProfile = {
            weeklyDistance: 25,
            monthlyDistance: 100,
            averagePace: 300,
            runFrequency: 4,
            longestRun: 15,
            averageHeartRate: 150,
            distanceTrend: 'improving',
            paceTrend: 'stable',
            frequencyTrend: 'improving',
            preferredSportTypes: [
                'Run'
            ],
            preferredDays: [
                1,
                3,
                5
            ],
            averageActivityDuration: 45,
            goalCompletionRate: 80,
            consistencyScore: 75,
            totalActivities: 50,
            runningExperience: 'intermediate',
            hasRecentInjuries: false
        };
        const mockSuggestions = [
            {
                id: 'test-suggestion',
                title: 'Increase Weekly Distance',
                description: 'Build your endurance by increasing weekly distance',
                reasoning: 'Your consistency shows you are ready for more volume',
                priority: 'high',
                category: 'distance',
                goalType: {},
                suggestedTarget: 30,
                targetUnit: 'km',
                timeframe: '4 weeks',
                difficulty: 'moderate',
                benefits: [
                    'Better endurance',
                    'Improved fitness'
                ],
                strategies: [
                    'Gradual increases',
                    'Long runs'
                ],
                successProbability: 80,
                requiredCommitment: 'medium'
            }
        ];
        mockAnalyzeUserPerformance.mockReturnValue(mockProfile);
        mockGenerateDynamicSuggestions.mockReturnValue(mockSuggestions);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DynamicGoalSuggestions.DynamicGoalSuggestions, {
            userId: "user-1"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Increase Weekly Distance')).toBeInTheDocument();
            expect(_react1.screen.getByText('Build your endurance by increasing weekly distance')).toBeInTheDocument();
            expect(_react1.screen.getByText('30 km')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,