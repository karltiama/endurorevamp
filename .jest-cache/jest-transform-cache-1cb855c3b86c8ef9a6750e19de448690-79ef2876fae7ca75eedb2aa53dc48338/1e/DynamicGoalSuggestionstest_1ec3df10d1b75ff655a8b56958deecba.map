{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\goals\\DynamicGoalSuggestions.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport { DynamicGoalSuggestions } from '@/components/goals/DynamicGoalSuggestions';\r\nimport { useUserActivities } from '@/hooks/use-user-activities';\r\nimport { useUserGoals } from '@/hooks/useGoals';\r\nimport { useUnitPreferences } from '@/hooks/useUnitPreferences';\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/use-user-activities');\r\njest.mock('@/hooks/useGoals');\r\njest.mock('@/hooks/useUnitPreferences');\r\n\r\njest.mock('@/lib/goals/dynamic-suggestions', () => ({\r\n  DynamicGoalEngine: {\r\n    analyzeUserPerformance: jest.fn(),\r\n    generateDynamicSuggestions: jest.fn(),\r\n  }\r\n}));\r\n\r\nconst mockUseUserActivities = useUserActivities as jest.MockedFunction<typeof useUserActivities>;\r\nconst mockUseUserGoals = useUserGoals as jest.MockedFunction<typeof useUserGoals>;\r\nconst mockUseUnitPreferences = useUnitPreferences as jest.MockedFunction<typeof useUnitPreferences>;\r\n\r\n// Get the mocked functions from the module\r\nconst { DynamicGoalEngine } = require('@/lib/goals/dynamic-suggestions');\r\nconst mockAnalyzeUserPerformance = DynamicGoalEngine.analyzeUserPerformance as jest.MockedFunction<any>;\r\nconst mockGenerateDynamicSuggestions = DynamicGoalEngine.generateDynamicSuggestions as jest.MockedFunction<any>;\r\n\r\ndescribe('DynamicGoalSuggestions Component', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [\r\n        {\r\n          id: 1,\r\n          name: 'Morning Run',\r\n          sport_type: 'Run',\r\n          distance: 5000,\r\n          moving_time: 1500,\r\n          start_date_local: '2024-01-01T08:00:00Z',\r\n          activity_type: 'Run'\r\n        }\r\n      ],\r\n      isLoading: false,\r\n      error: null\r\n    } as any);\r\n\r\n    mockUseUserGoals.mockReturnValue({\r\n      data: {\r\n        goals: [],\r\n        onboarding: null\r\n      },\r\n      isLoading: false,\r\n      error: null\r\n    } as any);\r\n  });\r\n\r\n  it('displays performance profile with kilometers when set to km', async () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    const mockProfile = {\r\n      weeklyDistance: 25, // km\r\n      monthlyDistance: 100,\r\n      averagePace: 300, // 5:00 per km\r\n      runFrequency: 4,\r\n      longestRun: 15,\r\n      averageHeartRate: 150,\r\n      distanceTrend: 'improving' as const,\r\n      paceTrend: 'stable' as const,\r\n      frequencyTrend: 'improving' as const,\r\n      preferredSportTypes: ['Run'],\r\n      preferredDays: [1, 3, 5],\r\n      averageActivityDuration: 45,\r\n      goalCompletionRate: 80,\r\n      consistencyScore: 75,\r\n      totalActivities: 50,\r\n      runningExperience: 'intermediate' as const,\r\n      hasRecentInjuries: false\r\n    };\r\n\r\n    mockAnalyzeUserPerformance.mockReturnValue(mockProfile);\r\n    mockGenerateDynamicSuggestions.mockReturnValue([\r\n      {\r\n        id: 'test-suggestion-1',\r\n        title: 'Test Suggestion',\r\n        description: 'Test description',\r\n        priority: 'medium',\r\n        difficulty: 'moderate',\r\n        category: 'distance',\r\n        targetValue: 30,\r\n        targetUnit: 'km',\r\n        timeframe: 'weekly',\r\n        confidence: 0.8,\r\n        reasoning: 'Test reasoning'\r\n      }\r\n    ]);\r\n\r\n    render(<DynamicGoalSuggestions userId=\"user-1\" />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('25.0 km')).toBeInTheDocument();\r\n      expect(screen.getByText('5:00/km')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('displays performance profile with miles when set to miles', async () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'miles', pace: 'min/mile' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    const mockProfile = {\r\n      weeklyDistance: 25, // km, should be converted to ~15.5 miles\r\n      monthlyDistance: 100,\r\n      averagePace: 300, // 5:00 per km, should be converted to ~8:02 per mile\r\n      runFrequency: 4,\r\n      longestRun: 15,\r\n      averageHeartRate: 150,\r\n      distanceTrend: 'improving' as const,\r\n      paceTrend: 'stable' as const,\r\n      frequencyTrend: 'improving' as const,\r\n      preferredSportTypes: ['Run'],\r\n      preferredDays: [1, 3, 5],\r\n      averageActivityDuration: 45,\r\n      goalCompletionRate: 80,\r\n      consistencyScore: 75,\r\n      totalActivities: 50,\r\n      runningExperience: 'intermediate' as const,\r\n      hasRecentInjuries: false\r\n    };\r\n\r\n    mockAnalyzeUserPerformance.mockReturnValue(mockProfile);\r\n    mockGenerateDynamicSuggestions.mockReturnValue([\r\n      {\r\n        id: 'test-suggestion-1',\r\n        title: 'Test Suggestion',\r\n        description: 'Test description',\r\n        priority: 'medium',\r\n        difficulty: 'moderate',\r\n        category: 'distance',\r\n        targetValue: 30,\r\n        targetUnit: 'miles',\r\n        timeframe: 'weekly',\r\n        confidence: 0.8,\r\n        reasoning: 'Test reasoning'\r\n      }\r\n    ]);\r\n\r\n    render(<DynamicGoalSuggestions userId=\"user-1\" />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('15.5 mi')).toBeInTheDocument();\r\n      expect(screen.getByText('8:02/mi')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('shows loading state initially', () => {\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [],\r\n      isLoading: true,\r\n      error: null\r\n    } as any);\r\n\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    render(<DynamicGoalSuggestions userId=\"user-1\" />);\r\n\r\n    // When activities are loading and there are no activities, show empty state\r\n    expect(screen.getByText('Keep logging activities to get personalized goal suggestions!')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows no data message when no activities available', async () => {\r\n    mockUseUserActivities.mockReturnValue({\r\n      data: [],\r\n      isLoading: false,\r\n      error: null\r\n    } as any);\r\n\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    mockAnalyzeUserPerformance.mockReturnValue(null);\r\n    mockGenerateDynamicSuggestions.mockReturnValue([]);\r\n\r\n    render(<DynamicGoalSuggestions userId=\"user-1\" />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Keep logging activities to get personalized goal suggestions!')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('displays goal suggestions when available', async () => {\r\n    mockUseUnitPreferences.mockReturnValue({\r\n      preferences: { distance: 'km', pace: 'min/km' },\r\n      isLoading: false,\r\n      updatePreferences: jest.fn(),\r\n      setDistanceUnit: jest.fn(),\r\n      toggleUnits: jest.fn()\r\n    });\r\n\r\n    const mockProfile = {\r\n      weeklyDistance: 25,\r\n      monthlyDistance: 100,\r\n      averagePace: 300,\r\n      runFrequency: 4,\r\n      longestRun: 15,\r\n      averageHeartRate: 150,\r\n      distanceTrend: 'improving' as const,\r\n      paceTrend: 'stable' as const,\r\n      frequencyTrend: 'improving' as const,\r\n      preferredSportTypes: ['Run'],\r\n      preferredDays: [1, 3, 5],\r\n      averageActivityDuration: 45,\r\n      goalCompletionRate: 80,\r\n      consistencyScore: 75,\r\n      totalActivities: 50,\r\n      runningExperience: 'intermediate' as const,\r\n      hasRecentInjuries: false\r\n    };\r\n\r\n    const mockSuggestions = [\r\n      {\r\n        id: 'test-suggestion',\r\n        title: 'Increase Weekly Distance',\r\n        description: 'Build your endurance by increasing weekly distance',\r\n        reasoning: 'Your consistency shows you are ready for more volume',\r\n        priority: 'high' as const,\r\n        category: 'distance' as const,\r\n        goalType: {} as any,\r\n        suggestedTarget: 30,\r\n        targetUnit: 'km',\r\n        timeframe: '4 weeks',\r\n        difficulty: 'moderate' as const,\r\n        benefits: ['Better endurance', 'Improved fitness'],\r\n        strategies: ['Gradual increases', 'Long runs'],\r\n        successProbability: 80,\r\n        requiredCommitment: 'medium' as const\r\n      }\r\n    ];\r\n\r\n    mockAnalyzeUserPerformance.mockReturnValue(mockProfile);\r\n    mockGenerateDynamicSuggestions.mockReturnValue(mockSuggestions);\r\n\r\n    render(<DynamicGoalSuggestions userId=\"user-1\" />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Increase Weekly Distance')).toBeInTheDocument();\r\n      expect(screen.getByText('Build your endurance by increasing weekly distance')).toBeInTheDocument();\r\n      expect(screen.getByText('30 km')).toBeInTheDocument();\r\n    });\r\n  });\r\n}); "],"names":["jest","mock","DynamicGoalEngine","analyzeUserPerformance","fn","generateDynamicSuggestions","mockUseUserActivities","useUserActivities","mockUseUserGoals","useUserGoals","mockUseUnitPreferences","useUnitPreferences","require","mockAnalyzeUserPerformance","mockGenerateDynamicSuggestions","describe","beforeEach","clearAllMocks","mockReturnValue","data","id","name","sport_type","distance","moving_time","start_date_local","activity_type","isLoading","error","goals","onboarding","it","preferences","pace","updatePreferences","setDistanceUnit","toggleUnits","mockProfile","weeklyDistance","monthlyDistance","averagePace","runFrequency","longestRun","averageHeartRate","distanceTrend","paceTrend","frequencyTrend","preferredSportTypes","preferredDays","averageActivityDuration","goalCompletionRate","consistencyScore","totalActivities","runningExperience","hasRecentInjuries","title","description","priority","difficulty","category","targetValue","targetUnit","timeframe","confidence","reasoning","render","DynamicGoalSuggestions","userId","waitFor","expect","screen","getByText","toBeInTheDocument","mockSuggestions","goalType","suggestedTarget","benefits","strategies","successProbability","requiredCommitment"],"mappings":"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"}