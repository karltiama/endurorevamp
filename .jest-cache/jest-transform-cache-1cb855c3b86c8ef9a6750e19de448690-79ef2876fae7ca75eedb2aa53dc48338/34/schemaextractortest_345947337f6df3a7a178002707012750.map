{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\database\\schema-extractor.test.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\ndescribe('Schema Extractor', () => {\r\n  let supabase: any\r\n  \r\n  beforeAll(() => {\r\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || \r\n        !process.env.SUPABASE_SERVICE_ROLE_KEY ||\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL.includes('test.supabase.co')) {\r\n      console.log('‚ö†Ô∏è  No real database credentials - skipping schema extraction')\r\n      return\r\n    }\r\n    \r\n    supabase = createClient(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n    )\r\n  })\r\n\r\n  test('extract complete database schema', async () => {\r\n    if (!supabase) {\r\n      console.log('Skipping - no database connection')\r\n      return\r\n    }\r\n\r\n    console.log('\\nüîç EXTRACTING DATABASE SCHEMA...\\n')\r\n\r\n    // Get all tables\r\n    const { data: tables, error: tablesError } = await supabase.rpc('get_table_info')\r\n    \r\n    if (tablesError) {\r\n      // Fallback to manual query\r\n      const { data: tablesData, error: fallbackError } = await supabase\r\n        .from('information_schema.tables')\r\n        .select('table_name')\r\n        .eq('table_schema', 'public')\r\n        .eq('table_type', 'BASE TABLE')\r\n\r\n      if (fallbackError) {\r\n        console.log('‚ùå Could not get table list:', fallbackError.message)\r\n        return\r\n      }\r\n\r\n      // Extract schema for each table manually\r\n      for (const table of tablesData || []) {\r\n        await extractTableSchema(supabase, table.table_name)\r\n      }\r\n    }\r\n\r\n    expect(true).toBe(true) // Test always passes, we just want the output\r\n  })\r\n})\r\n\r\nasync function extractTableSchema(supabase: any, tableName: string) {\r\n  console.log(`\\nüìä TABLE: ${tableName.toUpperCase()}`)\r\n  console.log('=' + '='.repeat(tableName.length + 8))\r\n\r\n  // Get columns\r\n  const { data: columns, error: columnsError } = await supabase.rpc('get_table_columns', {\r\n    table_name_input: tableName\r\n  })\r\n\r\n  if (columnsError) {\r\n    // Fallback to information_schema query\r\n    const query = `\r\n      SELECT \r\n        column_name,\r\n        data_type,\r\n        is_nullable,\r\n        column_default,\r\n        character_maximum_length,\r\n        numeric_precision,\r\n        numeric_scale\r\n      FROM information_schema.columns \r\n      WHERE table_schema = 'public' \r\n        AND table_name = '${tableName}'\r\n      ORDER BY ordinal_position\r\n    `\r\n    \r\n    const { data: fallbackColumns, error: fallbackError } = await supabase.rpc('exec_sql', {\r\n      sql: query\r\n    })\r\n\r\n    if (fallbackError) {\r\n      console.log(`‚ùå Could not get columns for ${tableName}:`, fallbackError.message)\r\n      return\r\n    }\r\n\r\n    // Display columns\r\n    if (fallbackColumns && fallbackColumns.length > 0) {\r\n      fallbackColumns.forEach((col: any) => {\r\n        const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'\r\n        const defaultVal = col.column_default ? ` DEFAULT ${col.column_default}` : ''\r\n        console.log(`  ${col.column_name.padEnd(25)} ${col.data_type.padEnd(15)} ${nullable}${defaultVal}`)\r\n      })\r\n    }\r\n  } else {\r\n    // Use RPC result\r\n    console.log('Columns:', columns)\r\n  }\r\n\r\n  // Get constraints (PKs, FKs, etc.)\r\n  await getTableConstraints(supabase, tableName)\r\n\r\n  // Get indexes\r\n  await getTableIndexes(supabase, tableName)\r\n\r\n  // Get sample data count\r\n  try {\r\n    const { count } = await supabase\r\n      .from(tableName)\r\n      .select('*', { count: 'exact', head: true })\r\n    \r\n    console.log(`üìà Record count: ${count || 0}`)\r\n  } catch (e) {\r\n    console.log('üìà Record count: Unable to query')\r\n  }\r\n}\r\n\r\nasync function getTableConstraints(supabase: any, tableName: string) {\r\n  const constraintsQuery = `\r\n    SELECT \r\n      tc.constraint_name,\r\n      tc.constraint_type,\r\n      ku.column_name,\r\n      ccu.table_name AS foreign_table_name,\r\n      ccu.column_name AS foreign_column_name\r\n    FROM information_schema.table_constraints tc\r\n    LEFT JOIN information_schema.key_column_usage ku \r\n      ON tc.constraint_name = ku.constraint_name\r\n    LEFT JOIN information_schema.constraint_column_usage ccu \r\n      ON tc.constraint_name = ccu.constraint_name\r\n    WHERE tc.table_schema = 'public' \r\n      AND tc.table_name = '${tableName}'\r\n    ORDER BY tc.constraint_type, ku.column_name\r\n  `\r\n\r\n  try {\r\n    const { data: constraints } = await supabase.rpc('exec_sql', { sql: constraintsQuery })\r\n    \r\n    if (constraints && constraints.length > 0) {\r\n      console.log('\\nüîó Constraints:')\r\n      constraints.forEach((constraint: any) => {\r\n        if (constraint.constraint_type === 'PRIMARY KEY') {\r\n          console.log(`  üîë PRIMARY KEY: ${constraint.column_name}`)\r\n        } else if (constraint.constraint_type === 'FOREIGN KEY') {\r\n          console.log(`  üîó FOREIGN KEY: ${constraint.column_name} ‚Üí ${constraint.foreign_table_name}(${constraint.foreign_column_name})`)\r\n        } else if (constraint.constraint_type === 'UNIQUE') {\r\n          console.log(`  ‚≠ê UNIQUE: ${constraint.column_name}`)\r\n        }\r\n      })\r\n    }\r\n  } catch (e) {\r\n    console.log('Could not get constraints')\r\n  }\r\n}\r\n\r\nasync function getTableIndexes(supabase: any, tableName: string) {\r\n  const indexQuery = `\r\n    SELECT \r\n      indexname,\r\n      indexdef\r\n    FROM pg_indexes \r\n    WHERE schemaname = 'public' \r\n      AND tablename = '${tableName}'\r\n      AND indexname NOT LIKE '%pkey'\r\n  `\r\n\r\n  try {\r\n    const { data: indexes } = await supabase.rpc('exec_sql', { sql: indexQuery })\r\n    \r\n    if (indexes && indexes.length > 0) {\r\n      console.log('\\nüìä Indexes:')\r\n      indexes.forEach((index: any) => {\r\n        console.log(`  üìä ${index.indexname}: ${index.indexdef}`)\r\n      })\r\n    }\r\n  } catch (e) {\r\n    console.log('Could not get indexes')\r\n  }\r\n}\r\n\r\n// Utility function you can call from anywhere\r\nexport async function generateSchemaReport() {\r\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || \r\n      !process.env.SUPABASE_SERVICE_ROLE_KEY ||\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL.includes('test.supabase.co')) {\r\n    console.log('‚ö†Ô∏è  No real database credentials available')\r\n    return null\r\n  }\r\n\r\n  const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n  )\r\n\r\n  // Get simplified schema info\r\n  const schema: {\r\n    tables: Record<string, any>;\r\n    relationships: any[];\r\n    summary: Record<string, any>;\r\n  } = {\r\n    tables: {},\r\n    relationships: [],\r\n    summary: {}\r\n  }\r\n\r\n  const tables = [\r\n    'activities', 'strava_tokens', 'sync_state', \r\n    'goal_types', 'user_goals', 'goal_progress', 'user_onboarding'\r\n  ]\r\n\r\n  for (const tableName of tables) {\r\n    try {\r\n      const { count } = await supabase\r\n        .from(tableName)\r\n        .select('*', { count: 'exact', head: true })\r\n      \r\n      schema.tables[tableName] = {\r\n        exists: true,\r\n        recordCount: count || 0\r\n      }\r\n    } catch (error) {\r\n      schema.tables[tableName] = {\r\n        exists: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log('\\nüìã SCHEMA SUMMARY')\r\n  console.log('================')\r\n  Object.entries(schema.tables).forEach(([table, info]: [string, any]) => {\r\n    const status = info.exists ? '‚úÖ' : '‚ùå'\r\n    const count = info.exists ? `(${info.recordCount} records)` : `(${info.error})`\r\n    console.log(`${status} ${table.padEnd(20)} ${count}`)\r\n  })\r\n\r\n  return schema\r\n} "],"names":["generateSchemaReport","describe","supabase","beforeAll","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","includes","console","log","createClient","test","data","tables","error","tablesError","rpc","tablesData","fallbackError","from","select","eq","message","table","extractTableSchema","table_name","expect","toBe","tableName","toUpperCase","repeat","length","columns","columnsError","table_name_input","query","fallbackColumns","sql","forEach","col","nullable","is_nullable","defaultVal","column_default","column_name","padEnd","data_type","getTableConstraints","getTableIndexes","count","head","e","constraintsQuery","constraints","constraint","constraint_type","foreign_table_name","foreign_column_name","indexQuery","indexes","index","indexname","indexdef","schema","relationships","summary","exists","recordCount","Error","Object","entries","info","status"],"mappings":"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"}