8f1bd6e5e4cb1857aff11bb057e66878
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getStravaAuthUrl", {
    enumerable: true,
    get: function() {
        return getStravaAuthUrl;
    }
});
function getStravaAuthUrl(baseUrl) {
    try {
        const url = new URL('https://www.strava.com/oauth/authorize');
        const clientId = process.env.NEXT_PUBLIC_STRAVA_CLIENT_ID;
        if (!clientId) {
            console.error('NEXT_PUBLIC_STRAVA_CLIENT_ID is not configured');
            return '#';
        }
        url.searchParams.set('client_id', clientId);
        // Use provided base URL, environment variable, or default
        let redirectUri = process.env.NEXT_PUBLIC_STRAVA_REDIRECT_URI;
        if (!redirectUri && baseUrl) {
            redirectUri = `${baseUrl}/dashboard`;
        } else if (!redirectUri) {
            // Fallback for development
            redirectUri = 'http://localhost:3000/dashboard';
        }
        console.log('ðŸ”— Strava OAuth URL config:', {
            clientId: clientId?.slice(0, 8) + '...',
            redirectUri
        });
        url.searchParams.set('redirect_uri', redirectUri);
        url.searchParams.set('response_type', 'code');
        url.searchParams.set('scope', 'read,activity:read_all');
        url.searchParams.set('approval_prompt', 'auto');
        return url.toString();
    } catch (error) {
        console.error('Error generating Strava URL:', error);
        return '#' // fallback URL
        ;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcdGlhbWFcXERlc2t0b3BcXENvZGluZ1xcZW5kdXJvcmV2YW1wXFxsaWJcXHN0cmF2YS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0U3RyYXZhQXV0aFVybChiYXNlVXJsPzogc3RyaW5nKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoJ2h0dHBzOi8vd3d3LnN0cmF2YS5jb20vb2F1dGgvYXV0aG9yaXplJylcclxuICAgIGNvbnN0IGNsaWVudElkID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1RSQVZBX0NMSUVOVF9JRFxyXG4gICAgXHJcbiAgICBpZiAoIWNsaWVudElkKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05FWFRfUFVCTElDX1NUUkFWQV9DTElFTlRfSUQgaXMgbm90IGNvbmZpZ3VyZWQnKVxyXG4gICAgICByZXR1cm4gJyMnXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdjbGllbnRfaWQnLCBjbGllbnRJZClcclxuICAgIFxyXG4gICAgLy8gVXNlIHByb3ZpZGVkIGJhc2UgVVJMLCBlbnZpcm9ubWVudCB2YXJpYWJsZSwgb3IgZGVmYXVsdFxyXG4gICAgbGV0IHJlZGlyZWN0VXJpID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1RSQVZBX1JFRElSRUNUX1VSSVxyXG4gICAgaWYgKCFyZWRpcmVjdFVyaSAmJiBiYXNlVXJsKSB7XHJcbiAgICAgIHJlZGlyZWN0VXJpID0gYCR7YmFzZVVybH0vZGFzaGJvYXJkYFxyXG4gICAgfSBlbHNlIGlmICghcmVkaXJlY3RVcmkpIHtcclxuICAgICAgLy8gRmFsbGJhY2sgZm9yIGRldmVsb3BtZW50XHJcbiAgICAgIHJlZGlyZWN0VXJpID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9kYXNoYm9hcmQnXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCfwn5SXIFN0cmF2YSBPQXV0aCBVUkwgY29uZmlnOicsIHsgXHJcbiAgICAgIGNsaWVudElkOiBjbGllbnRJZD8uc2xpY2UoMCwgOCkgKyAnLi4uJywgXHJcbiAgICAgIHJlZGlyZWN0VXJpIFxyXG4gICAgfSlcclxuICAgIFxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3JlZGlyZWN0X3VyaScsIHJlZGlyZWN0VXJpKVxyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3Jlc3BvbnNlX3R5cGUnLCAnY29kZScpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnc2NvcGUnLCAncmVhZCxhY3Rpdml0eTpyZWFkX2FsbCcpXHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnYXBwcm92YWxfcHJvbXB0JywgJ2F1dG8nKVxyXG4gICAgXHJcbiAgICByZXR1cm4gdXJsLnRvU3RyaW5nKClcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBTdHJhdmEgVVJMOicsIGVycm9yKVxyXG4gICAgcmV0dXJuICcjJyAvLyBmYWxsYmFjayBVUkxcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbImdldFN0cmF2YUF1dGhVcmwiLCJiYXNlVXJsIiwidXJsIiwiVVJMIiwiY2xpZW50SWQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1RSQVZBX0NMSUVOVF9JRCIsImNvbnNvbGUiLCJlcnJvciIsInNlYXJjaFBhcmFtcyIsInNldCIsInJlZGlyZWN0VXJpIiwiTkVYVF9QVUJMSUNfU1RSQVZBX1JFRElSRUNUX1VSSSIsImxvZyIsInNsaWNlIiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7K0JBQWdCQTs7O2VBQUFBOzs7QUFBVCxTQUFTQSxpQkFBaUJDLE9BQWdCO0lBQy9DLElBQUk7UUFDRixNQUFNQyxNQUFNLElBQUlDLElBQUk7UUFDcEIsTUFBTUMsV0FBV0MsUUFBUUMsR0FBRyxDQUFDQyw0QkFBNEI7UUFFekQsSUFBSSxDQUFDSCxVQUFVO1lBQ2JJLFFBQVFDLEtBQUssQ0FBQztZQUNkLE9BQU87UUFDVDtRQUVBUCxJQUFJUSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxhQUFhUDtRQUVsQywwREFBMEQ7UUFDMUQsSUFBSVEsY0FBY1AsUUFBUUMsR0FBRyxDQUFDTywrQkFBK0I7UUFDN0QsSUFBSSxDQUFDRCxlQUFlWCxTQUFTO1lBQzNCVyxjQUFjLEdBQUdYLFFBQVEsVUFBVSxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDVyxhQUFhO1lBQ3ZCLDJCQUEyQjtZQUMzQkEsY0FBYztRQUNoQjtRQUVBSixRQUFRTSxHQUFHLENBQUMsK0JBQStCO1lBQ3pDVixVQUFVQSxVQUFVVyxNQUFNLEdBQUcsS0FBSztZQUNsQ0g7UUFDRjtRQUVBVixJQUFJUSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxnQkFBZ0JDO1FBQ3JDVixJQUFJUSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUI7UUFDdENULElBQUlRLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLFNBQVM7UUFDOUJULElBQUlRLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLG1CQUFtQjtRQUV4QyxPQUFPVCxJQUFJYyxRQUFRO0lBQ3JCLEVBQUUsT0FBT1AsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsZ0NBQWdDQTtRQUM5QyxPQUFPLElBQUksZUFBZTs7SUFDNUI7QUFDRiJ9