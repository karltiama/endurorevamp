{"version":3,"sources":["C:\\Users\\tiama\\Desktop\\Coding\\endurorevamp\\__tests__\\components\\dashboard\\SyncDashboard.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport SyncDashboard from '@/components/dashboard/SyncDashboard'\r\nimport { ReactNode } from 'react'\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/use-strava-sync', () => ({\r\n  useStravaSync: jest.fn(),\r\n  useSyncStatusInfo: jest.fn()\r\n}))\r\n\r\nimport { useStravaSync, useSyncStatusInfo } from '@/hooks/use-strava-sync'\r\n\r\nconst mockUseStravaSync = useStravaSync as jest.MockedFunction<typeof useStravaSync>\r\nconst mockUseSyncStatusInfo = useSyncStatusInfo as jest.MockedFunction<typeof useSyncStatusInfo>\r\n\r\n// Create a wrapper for React Query\r\nconst createWrapper = () => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: { retry: false },\r\n      mutations: { retry: false },\r\n    },\r\n  })\r\n\r\n  return ({ children }: { children: ReactNode }) => (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n}\r\n\r\ndescribe('SyncDashboard', () => {\r\n  beforeEach(() => {\r\n    // Default mock implementations\r\n         mockUseStravaSync.mockReturnValue({\r\n       syncLatest: jest.fn(),\r\n       syncLastWeek: jest.fn(),\r\n       syncLastMonth: jest.fn(),\r\n       forceFullSync: jest.fn(),\r\n       customSync: jest.fn(),\r\n       isSyncing: false,\r\n       syncError: null,\r\n       syncResult: undefined,\r\n       isLoadingStatus: false,\r\n       syncStatus: undefined,\r\n       statusError: null,\r\n       refetchStatus: jest.fn(),\r\n       refreshStatus: jest.fn()\r\n     })\r\n\r\n    mockUseSyncStatusInfo.mockReturnValue({\r\n      lastSyncText: '2 hours ago',\r\n      canSync: true,\r\n      syncDisabledReason: null,\r\n      activityCount: 125,\r\n      todaySyncs: 2,\r\n      maxSyncs: 5,\r\n      consecutiveErrors: 0,\r\n      lastError: null\r\n    })\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  it('renders sync dashboard with status information', () => {\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    expect(screen.getByText('Activity Sync')).toBeInTheDocument()\r\n    expect(screen.getByText('Ready')).toBeInTheDocument()\r\n    expect(screen.getByText('2 hours ago')).toBeInTheDocument()\r\n    expect(screen.getByText('125')).toBeInTheDocument()\r\n    expect(screen.getByText('2/5')).toBeInTheDocument()\r\n  })\r\n\r\n     it('shows loading state when fetching status', () => {\r\n     mockUseStravaSync.mockReturnValue({\r\n       ...mockUseStravaSync(),\r\n       isLoadingStatus: true\r\n     })\r\n\r\n     render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n     // When loading, it shows skeleton loading state\r\n     const pulseElements = screen.getAllByRole('generic')\r\n     expect(pulseElements.some(el => el.classList.contains('animate-pulse'))).toBe(true)\r\n   })\r\n\r\n  it('displays sync buttons and handles clicks', () => {\r\n    const mockSyncLatest = jest.fn()\r\n    const mockSyncLastWeek = jest.fn()\r\n    \r\n    mockUseStravaSync.mockReturnValue({\r\n      ...mockUseStravaSync(),\r\n      syncLatest: mockSyncLatest,\r\n      syncLastWeek: mockSyncLastWeek\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    const latestButton = screen.getByText('Latest (50)')\r\n    const weekButton = screen.getByText('Last Week')\r\n\r\n    fireEvent.click(latestButton)\r\n    fireEvent.click(weekButton)\r\n\r\n    expect(mockSyncLatest).toHaveBeenCalledTimes(1)\r\n    expect(mockSyncLastWeek).toHaveBeenCalledTimes(1)\r\n  })\r\n\r\n  it('disables sync buttons when syncing', () => {\r\n    mockUseStravaSync.mockReturnValue({\r\n      ...mockUseStravaSync(),\r\n      isSyncing: true\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    const buttons = screen.getAllByRole('button').filter(btn => \r\n      btn.textContent?.includes('Syncing...') || \r\n      btn.hasAttribute('disabled')\r\n    )\r\n\r\n    expect(buttons.length).toBeGreaterThan(0)\r\n    buttons.forEach(button => {\r\n      expect(button).toBeDisabled()\r\n    })\r\n  })\r\n\r\n  it('disables sync buttons when sync not allowed', () => {\r\n    mockUseSyncStatusInfo.mockReturnValue({\r\n      ...mockUseSyncStatusInfo(),\r\n      canSync: false,\r\n      syncDisabledReason: 'Daily sync limit reached (5/5)'\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    expect(screen.getByText('Daily sync limit reached (5/5)')).toBeInTheDocument()\r\n    \r\n    const syncButtons = ['Latest (50)', 'Last Week', 'Last Month', 'Full Sync']\r\n    syncButtons.forEach(buttonText => {\r\n      const button = screen.getByText(buttonText)\r\n      expect(button).toBeDisabled()\r\n    })\r\n  })\r\n\r\n  it('displays sync success result', () => {\r\n    mockUseStravaSync.mockReturnValue({\r\n      ...mockUseStravaSync(),\r\n      syncResult: {\r\n        success: true,\r\n        message: 'Sync completed successfully',\r\n        data: {\r\n          activitiesProcessed: 25,\r\n          newActivities: 15,\r\n          updatedActivities: 10,\r\n          syncDuration: 3500\r\n        }\r\n      }\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    expect(screen.getByText('Sync completed successfully')).toBeInTheDocument()\r\n    expect(screen.getByText(/Processed 25 activities \\(15 new, 10 updated\\)/)).toBeInTheDocument()\r\n    expect(screen.getByText('Completed in 4s')).toBeInTheDocument()\r\n  })\r\n\r\n  it('displays sync error result', () => {\r\n    mockUseStravaSync.mockReturnValue({\r\n      ...mockUseStravaSync(),\r\n      syncResult: {\r\n        success: false,\r\n        message: 'Sync failed',\r\n        errors: ['Token expired', 'Network error'],\r\n        data: {\r\n          activitiesProcessed: 5,\r\n          newActivities: 0,\r\n          updatedActivities: 5,\r\n          syncDuration: 1200\r\n        }\r\n      }\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    expect(screen.getByText('Sync failed')).toBeInTheDocument()\r\n    expect(screen.getByText('Errors:')).toBeInTheDocument()\r\n    expect(screen.getByText('Token expired')).toBeInTheDocument()\r\n    expect(screen.getByText('Network error')).toBeInTheDocument()\r\n  })\r\n\r\n  it('displays consecutive error warning', () => {\r\n    mockUseSyncStatusInfo.mockReturnValue({\r\n      ...mockUseSyncStatusInfo(),\r\n      consecutiveErrors: 3,\r\n      lastError: 'Strava API rate limit exceeded'\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    expect(screen.getByText('3 consecutive sync failures')).toBeInTheDocument()\r\n    expect(screen.getByText('Strava API rate limit exceeded')).toBeInTheDocument()\r\n  })\r\n\r\n  it('shows and handles advanced options', async () => {\r\n    const mockCustomSync = jest.fn()\r\n    \r\n    mockUseStravaSync.mockReturnValue({\r\n      ...mockUseStravaSync(),\r\n      customSync: mockCustomSync\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    // Open advanced options\r\n    const advancedButton = screen.getByText('Advanced Options')\r\n    fireEvent.click(advancedButton)\r\n\r\n         // Wait for advanced options to appear\r\n     await waitFor(() => {\r\n       expect(screen.getByDisplayValue('7')).toBeInTheDocument()\r\n     })\r\n\r\n     // Change values\r\n     const daysInput = screen.getByDisplayValue('7')\r\n     const activitiesInput = screen.getByDisplayValue('50')\r\n    \r\n    fireEvent.change(daysInput, { target: { value: '14' } })\r\n    fireEvent.change(activitiesInput, { target: { value: '100' } })\r\n\r\n    // Trigger custom sync\r\n    const customSyncButton = screen.getByText('Custom Sync')\r\n    fireEvent.click(customSyncButton)\r\n\r\n    expect(mockCustomSync).toHaveBeenCalledWith({\r\n      sinceDays: 14,\r\n      maxActivities: 100\r\n    })\r\n  })\r\n\r\n  it('displays sync error from hook', () => {\r\n    mockUseStravaSync.mockReturnValue({\r\n      ...mockUseStravaSync(),\r\n      syncError: new Error('Network connection failed')\r\n    })\r\n\r\n    render(<SyncDashboard />, { wrapper: createWrapper() })\r\n\r\n    expect(screen.getByText('Sync Failed')).toBeInTheDocument()\r\n    expect(screen.getByText('Network connection failed')).toBeInTheDocument()\r\n  })\r\n}) "],"names":["jest","mock","useStravaSync","fn","useSyncStatusInfo","mockUseStravaSync","mockUseSyncStatusInfo","createWrapper","queryClient","QueryClient","defaultOptions","queries","retry","mutations","children","QueryClientProvider","client","describe","beforeEach","mockReturnValue","syncLatest","syncLastWeek","syncLastMonth","forceFullSync","customSync","isSyncing","syncError","syncResult","undefined","isLoadingStatus","syncStatus","statusError","refetchStatus","refreshStatus","lastSyncText","canSync","syncDisabledReason","activityCount","todaySyncs","maxSyncs","consecutiveErrors","lastError","afterEach","clearAllMocks","it","render","SyncDashboard","wrapper","expect","screen","getByText","toBeInTheDocument","pulseElements","getAllByRole","some","el","classList","contains","toBe","mockSyncLatest","mockSyncLastWeek","latestButton","weekButton","fireEvent","click","toHaveBeenCalledTimes","buttons","filter","btn","textContent","includes","hasAttribute","length","toBeGreaterThan","forEach","button","toBeDisabled","syncButtons","buttonText","success","message","data","activitiesProcessed","newActivities","updatedActivities","syncDuration","errors","mockCustomSync","advancedButton","waitFor","getByDisplayValue","daysInput","activitiesInput","change","target","value","customSyncButton","toHaveBeenCalledWith","sinceDays","maxActivities","Error"],"mappings":"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"}