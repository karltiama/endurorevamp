aaaf4eda948db7d0dc5aa7b96aa47629
"use strict";
// Mock the working hook
jest.mock('@/hooks/use-strava-sync', ()=>({
        useStravaSync: jest.fn(()=>({
                customSync: jest.fn(),
                isSyncing: false,
                syncError: null,
                syncResult: null,
                syncStatus: {
                    canSync: true,
                    activityCount: 0
                },
                isLoadingStatus: false
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _SyncButton = require("../../../components/strava/SyncButton");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const renderWithQueryClient = (component)=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: component
    }));
};
describe('SyncButton (Fixed)', ()=>{
    it('renders sync button', ()=>{
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SyncButton.SyncButton, {}));
        expect(_react1.screen.getByText('Sync Strava Data')).toBeInTheDocument();
    });
    it('shows syncing state', ()=>{
        const mockUseStravaSync = require('@/hooks/use-strava-sync').useStravaSync;
        mockUseStravaSync.mockReturnValue({
            customSync: jest.fn(),
            isSyncing: true,
            syncError: null,
            syncResult: null,
            syncStatus: {
                canSync: true,
                activityCount: 0
            },
            isLoadingStatus: false
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SyncButton.SyncButton, {}));
        expect(_react1.screen.getByText('Syncing...')).toBeInTheDocument();
    });
    it('shows error state', ()=>{
        const mockUseStravaSync = require('@/hooks/use-strava-sync').useStravaSync;
        mockUseStravaSync.mockReturnValue({
            customSync: jest.fn(),
            isSyncing: false,
            syncError: {
                message: 'Test error'
            },
            syncResult: null,
            syncStatus: {
                canSync: true,
                activityCount: 0
            },
            isLoadingStatus: false
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SyncButton.SyncButton, {}));
        expect(_react1.screen.getByText('Error:')).toBeInTheDocument();
        expect(_react1.screen.getByText('Test error')).toBeInTheDocument();
    });
    it('shows success state', ()=>{
        const mockUseStravaSync = require('@/hooks/use-strava-sync').useStravaSync;
        mockUseStravaSync.mockReturnValue({
            customSync: jest.fn(),
            isSyncing: false,
            syncError: null,
            syncResult: {
                success: true,
                data: {
                    activitiesProcessed: 5,
                    newActivities: 3,
                    updatedActivities: 2,
                    syncDuration: 2000
                }
            },
            syncStatus: {
                canSync: true,
                activityCount: 10
            },
            isLoadingStatus: false
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SyncButton.SyncButton, {}));
        expect(_react1.screen.getByText('Last Sync Results:')).toBeInTheDocument();
        expect(_react1.screen.getByText(/Activities processed:/)).toBeInTheDocument();
        expect(_react1.screen.getByText(/New activities:/)).toBeInTheDocument();
    });
    it('calls customSync when clicked', ()=>{
        const mockCustomSync = jest.fn();
        const mockUseStravaSync = require('@/hooks/use-strava-sync').useStravaSync;
        mockUseStravaSync.mockReturnValue({
            customSync: mockCustomSync,
            isSyncing: false,
            syncError: null,
            syncResult: null,
            syncStatus: {
                canSync: true,
                activityCount: 0
            },
            isLoadingStatus: false
        });
        renderWithQueryClient(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SyncButton.SyncButton, {}));
        const button = _react1.screen.getByText('Sync Strava Data');
        _react1.fireEvent.click(button);
        expect(mockCustomSync).toHaveBeenCalledWith({
            maxActivities: 50,
            sinceDays: 30
        });
    });
});

//# sourceMappingURL=data:application/json;base64,